
Blackfill_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b9c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08008d38  08008d38  00018d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f38  08008f38  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008f38  08008f38  00018f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f40  08008f40  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f40  08008f40  00018f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08008f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200000b8  08009000  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08009000  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ba0  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002336  00000000  00000000  00032c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00034fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00035fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d8  00000000  00000000  00036f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013042  00000000  00000000  0004e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000931b4  00000000  00000000  0006185a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4a0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a68  00000000  00000000  000f4a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b8 	.word	0x200000b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008d1c 	.word	0x08008d1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000bc 	.word	0x200000bc
 80001d4:	08008d1c 	.word	0x08008d1c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HMC5883L_setOffset>:

    return v;
}

void HMC5883L_setOffset(int xo, int yo)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
    xOffset = xo;
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HMC5883L_setOffset+0x24>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6013      	str	r3, [r2, #0]
    yOffset = yo;
 8000eb4:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <HMC5883L_setOffset+0x28>)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	6013      	str	r3, [r2, #0]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200000d8 	.word	0x200000d8
 8000ecc:	200000dc 	.word	0x200000dc

08000ed0 <HMC5883L_setRange>:

void HMC5883L_setRange(hmc5883l_range_t range)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	d833      	bhi.n	8000f48 <HMC5883L_setRange+0x78>
 8000ee0:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <HMC5883L_setRange+0x18>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000f09 	.word	0x08000f09
 8000eec:	08000f11 	.word	0x08000f11
 8000ef0:	08000f19 	.word	0x08000f19
 8000ef4:	08000f21 	.word	0x08000f21
 8000ef8:	08000f29 	.word	0x08000f29
 8000efc:	08000f31 	.word	0x08000f31
 8000f00:	08000f39 	.word	0x08000f39
 8000f04:	08000f41 	.word	0x08000f41
    {
	case HMC5883L_RANGE_0_88GA:
	    mgPerDigit = 0.73f;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HMC5883L_setRange+0x90>)
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <HMC5883L_setRange+0x94>)
 8000f0c:	601a      	str	r2, [r3, #0]
	    break;
 8000f0e:	e01c      	b.n	8000f4a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_3GA:
	    mgPerDigit = 0.92f;
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HMC5883L_setRange+0x90>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <HMC5883L_setRange+0x98>)
 8000f14:	601a      	str	r2, [r3, #0]
	    break;
 8000f16:	e018      	b.n	8000f4a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_1_9GA:
	    mgPerDigit = 1.22f;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HMC5883L_setRange+0x90>)
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HMC5883L_setRange+0x9c>)
 8000f1c:	601a      	str	r2, [r3, #0]
	    break;
 8000f1e:	e014      	b.n	8000f4a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_2_5GA:
	    mgPerDigit = 1.52f;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HMC5883L_setRange+0x90>)
 8000f22:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <HMC5883L_setRange+0xa0>)
 8000f24:	601a      	str	r2, [r3, #0]
	    break;
 8000f26:	e010      	b.n	8000f4a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4GA:
	    mgPerDigit = 2.27f;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HMC5883L_setRange+0x90>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <HMC5883L_setRange+0xa4>)
 8000f2c:	601a      	str	r2, [r3, #0]
	    break;
 8000f2e:	e00c      	b.n	8000f4a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_4_7GA:
	    mgPerDigit = 2.56f;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HMC5883L_setRange+0x90>)
 8000f32:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <HMC5883L_setRange+0xa8>)
 8000f34:	601a      	str	r2, [r3, #0]
	    break;
 8000f36:	e008      	b.n	8000f4a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_5_6GA:
	    mgPerDigit = 3.03f;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HMC5883L_setRange+0x90>)
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HMC5883L_setRange+0xac>)
 8000f3c:	601a      	str	r2, [r3, #0]
	    break;
 8000f3e:	e004      	b.n	8000f4a <HMC5883L_setRange+0x7a>

	case HMC5883L_RANGE_8_1GA:
	    mgPerDigit = 4.35f;
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HMC5883L_setRange+0x90>)
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <HMC5883L_setRange+0xb0>)
 8000f44:	601a      	str	r2, [r3, #0]
	    break;
 8000f46:	e000      	b.n	8000f4a <HMC5883L_setRange+0x7a>

	default:
	    break;
 8000f48:	bf00      	nop
    }

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_B, range << 5);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	015b      	lsls	r3, r3, #5
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	2001      	movs	r0, #1
 8000f54:	f000 f870 	bl	8001038 <HMC5883L_writeRegister8>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200000d4 	.word	0x200000d4
 8000f64:	3f3ae148 	.word	0x3f3ae148
 8000f68:	3f6b851f 	.word	0x3f6b851f
 8000f6c:	3f9c28f6 	.word	0x3f9c28f6
 8000f70:	3fc28f5c 	.word	0x3fc28f5c
 8000f74:	401147ae 	.word	0x401147ae
 8000f78:	4023d70a 	.word	0x4023d70a
 8000f7c:	4041eb85 	.word	0x4041eb85
 8000f80:	408b3333 	.word	0x408b3333

08000f84 <HMC5883L_setMeasurementMode>:
{
    return (hmc5883l_range_t)((HMC5883L_readRegister8(HMC5883L_REG_CONFIG_B) >> 5));
}

void HMC5883L_setMeasurementMode(hmc5883l_mode_t mode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_MODE);
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f000 f86e 	bl	8001070 <HMC5883L_readRegister8>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
    value &= 0xFC;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f023 0303 	bic.w	r3, r3, #3
 8000f9e:	73fb      	strb	r3, [r7, #15]
    value |= mode;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_MODE, value);
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	4619      	mov	r1, r3
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 f843 	bl	8001038 <HMC5883L_writeRegister8>
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HMC5883L_setDataRate>:

    return (hmc5883l_mode_t)value;
}

void HMC5883L_setDataRate(hmc5883l_dataRate_t dataRate)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f000 f853 	bl	8001070 <HMC5883L_readRegister8>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
    value &= 0xE3;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f023 031c 	bic.w	r3, r3, #28
 8000fd4:	73fb      	strb	r3, [r7, #15]
    value |= (dataRate << 2);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	b25a      	sxtb	r2, r3
 8000fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f824 	bl	8001038 <HMC5883L_writeRegister8>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HMC5883L_setSamples>:

    return (hmc5883l_dataRate_t)value;
}

void HMC5883L_setSamples(hmc5883l_samples_t samples)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    value = HMC5883L_readRegister8(HMC5883L_REG_CONFIG_A);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f834 	bl	8001070 <HMC5883L_readRegister8>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
    value &= 0x9F;
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001012:	73fb      	strb	r3, [r7, #15]
    value |= (samples << 5);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	015b      	lsls	r3, r3, #5
 8001018:	b25a      	sxtb	r2, r3
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4313      	orrs	r3, r2
 8001020:	b25b      	sxtb	r3, r3
 8001022:	73fb      	strb	r3, [r7, #15]

    HMC5883L_writeRegister8(HMC5883L_REG_CONFIG_A, value);
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	4619      	mov	r1, r3
 8001028:	2000      	movs	r0, #0
 800102a:	f000 f805 	bl	8001038 <HMC5883L_writeRegister8>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HMC5883L_writeRegister8>:
    return (hmc5883l_samples_t)value;
}

// Write byte to register
void HMC5883L_writeRegister8(uint8_t reg, uint8_t value)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af04      	add	r7, sp, #16
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&I2C, HMC5883L_DEFAULT_ADDRESS, reg, 1 , &value,1,500);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	b29a      	uxth	r2, r3
 800104c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2301      	movs	r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	1dbb      	adds	r3, r7, #6
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	213c      	movs	r1, #60	; 0x3c
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <HMC5883L_writeRegister8+0x34>)
 8001060:	f003 f902 	bl	8004268 <HAL_I2C_Mem_Write>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200000e0 	.word	0x200000e0

08001070 <HMC5883L_readRegister8>:
    return value;
}

// Read byte from register
uint8_t HMC5883L_readRegister8(uint8_t reg)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af04      	add	r7, sp, #16
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    HAL_I2C_Mem_Read(&I2C, HMC5883L_DEFAULT_ADDRESS , reg, 1, &value, 1, 500);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b29a      	uxth	r2, r3
 800107e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	f107 030f 	add.w	r3, r7, #15
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2301      	movs	r3, #1
 8001090:	213c      	movs	r1, #60	; 0x3c
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <HMC5883L_readRegister8+0x34>)
 8001094:	f003 f9e2 	bl	800445c <HAL_I2C_Mem_Read>
    return value;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000e0 	.word	0x200000e0

080010a8 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2203      	movs	r2, #3
 80010b4:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2203      	movs	r2, #3
 80010c0:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2203      	movs	r2, #3
 80010d2:	715a      	strb	r2, [r3, #5]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	460b      	mov	r3, r1
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	8af9      	ldrh	r1, [r7, #22]
 8001100:	f241 3388 	movw	r3, #5000	; 0x1388
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2302      	movs	r3, #2
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	f003 f9a3 	bl	800445c <HAL_I2C_Mem_Read>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10b      	bne.n	8001134 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800111c:	7d7b      	ldrb	r3, [r7, #21]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7d3b      	ldrb	r3, [r7, #20]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21b      	sxth	r3, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	801a      	strh	r2, [r3, #0]
		return true;
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <read_register16+0x56>
	} else
		return false;
 8001134:	2300      	movs	r3, #0

}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800113e:	b590      	push	{r4, r7, lr}
 8001140:	b08b      	sub	sp, #44	; 0x2c
 8001142:	af04      	add	r7, sp, #16
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	461a      	mov	r2, r3
 800114a:	460b      	mov	r3, r1
 800114c:	72fb      	strb	r3, [r7, #11]
 800114e:	4613      	mov	r3, r2
 8001150:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	b29a      	uxth	r2, r3
 8001162:	7abb      	ldrb	r3, [r7, #10]
 8001164:	b29b      	uxth	r3, r3
 8001166:	8af9      	ldrh	r1, [r7, #22]
 8001168:	f241 3488 	movw	r4, #5000	; 0x1388
 800116c:	9402      	str	r4, [sp, #8]
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	f003 f971 	bl	800445c <HAL_I2C_Mem_Read>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <read_data+0x46>
		return 0;
 8001180:	2300      	movs	r3, #0
 8001182:	e000      	b.n	8001186 <read_data+0x48>
	else
		return 1;
 8001184:	2301      	movs	r3, #1

}
 8001186:	4618      	mov	r0, r3
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}

0800118e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	461a      	mov	r2, r3
 800119a:	2188      	movs	r1, #136	; 0x88
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff9f 	bl	80010e0 <read_register16>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d06f      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3302      	adds	r3, #2
 80011ac:	461a      	mov	r2, r3
 80011ae:	218a      	movs	r1, #138	; 0x8a
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff95 	bl	80010e0 <read_register16>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d065      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3304      	adds	r3, #4
 80011c0:	461a      	mov	r2, r3
 80011c2:	218c      	movs	r1, #140	; 0x8c
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff8b 	bl	80010e0 <read_register16>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d05b      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3306      	adds	r3, #6
 80011d4:	461a      	mov	r2, r3
 80011d6:	218e      	movs	r1, #142	; 0x8e
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff81 	bl	80010e0 <read_register16>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d051      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3308      	adds	r3, #8
 80011e8:	461a      	mov	r2, r3
 80011ea:	2190      	movs	r1, #144	; 0x90
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff77 	bl	80010e0 <read_register16>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d047      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	330a      	adds	r3, #10
 80011fc:	461a      	mov	r2, r3
 80011fe:	2192      	movs	r1, #146	; 0x92
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff6d 	bl	80010e0 <read_register16>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d03d      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	330c      	adds	r3, #12
 8001210:	461a      	mov	r2, r3
 8001212:	2194      	movs	r1, #148	; 0x94
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff63 	bl	80010e0 <read_register16>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d033      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	330e      	adds	r3, #14
 8001224:	461a      	mov	r2, r3
 8001226:	2196      	movs	r1, #150	; 0x96
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff59 	bl	80010e0 <read_register16>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d029      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3310      	adds	r3, #16
 8001238:	461a      	mov	r2, r3
 800123a:	2198      	movs	r1, #152	; 0x98
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff4f 	bl	80010e0 <read_register16>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d01f      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3312      	adds	r3, #18
 800124c:	461a      	mov	r2, r3
 800124e:	219a      	movs	r1, #154	; 0x9a
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff45 	bl	80010e0 <read_register16>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d015      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3314      	adds	r3, #20
 8001260:	461a      	mov	r2, r3
 8001262:	219c      	movs	r1, #156	; 0x9c
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff3b 	bl	80010e0 <read_register16>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00b      	beq.n	8001288 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001274:	461a      	mov	r2, r3
 8001276:	219e      	movs	r1, #158	; 0x9e
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff31 	bl	80010e0 <read_register16>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <read_calibration_data+0xfa>

		return true;
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <read_calibration_data+0xfc>
	}

	return false;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f103 0218 	add.w	r2, r3, #24
 80012a0:	2301      	movs	r3, #1
 80012a2:	21a1      	movs	r1, #161	; 0xa1
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff4a 	bl	800113e <read_data>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d14b      	bne.n	8001348 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	331a      	adds	r3, #26
 80012b4:	461a      	mov	r2, r3
 80012b6:	21e1      	movs	r1, #225	; 0xe1
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff11 	bl	80010e0 <read_register16>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d041      	beq.n	8001348 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f103 021c 	add.w	r2, r3, #28
 80012ca:	2301      	movs	r3, #1
 80012cc:	21e3      	movs	r1, #227	; 0xe3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ff35 	bl	800113e <read_data>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d136      	bne.n	8001348 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80012da:	f107 030e 	add.w	r3, r7, #14
 80012de:	461a      	mov	r2, r3
 80012e0:	21e4      	movs	r1, #228	; 0xe4
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fefc 	bl	80010e0 <read_register16>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d02c      	beq.n	8001348 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	461a      	mov	r2, r3
 80012f4:	21e5      	movs	r1, #229	; 0xe5
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fef2 	bl	80010e0 <read_register16>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d022      	beq.n	8001348 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001308:	2301      	movs	r3, #1
 800130a:	21e7      	movs	r1, #231	; 0xe7
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff16 	bl	800113e <read_data>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d117      	bne.n	8001348 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001318:	89fb      	ldrh	r3, [r7, #14]
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	b21b      	sxth	r3, r3
 800131e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001322:	b21a      	sxth	r2, r3
 8001324:	89fb      	ldrh	r3, [r7, #14]
 8001326:	121b      	asrs	r3, r3, #8
 8001328:	b21b      	sxth	r3, r3
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b21a      	sxth	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001338:	89bb      	ldrh	r3, [r7, #12]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	b29b      	uxth	r3, r3
 800133e:	b21a      	sxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	841a      	strh	r2, [r3, #32]

		return true;
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <read_hum_calibration_data+0xb8>
	}

	return false;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001352:	b580      	push	{r7, lr}
 8001354:	b088      	sub	sp, #32
 8001356:	af04      	add	r7, sp, #16
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]
 800135e:	4613      	mov	r3, r2
 8001360:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	b29a      	uxth	r2, r3
 8001372:	89f9      	ldrh	r1, [r7, #14]
 8001374:	f242 7310 	movw	r3, #10000	; 0x2710
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2301      	movs	r3, #1
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	1cbb      	adds	r3, r7, #2
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	f002 ff70 	bl	8004268 <HAL_I2C_Mem_Write>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <write_register8+0x40>
		return false;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <write_register8+0x42>
	else
		return true;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013aa:	2b76      	cmp	r3, #118	; 0x76
 80013ac:	d005      	beq.n	80013ba <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013b2:	2b77      	cmp	r3, #119	; 0x77
 80013b4:	d001      	beq.n	80013ba <bmp280_init+0x1e>

		return false;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e099      	b.n	80014ee <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013c0:	2301      	movs	r3, #1
 80013c2:	21d0      	movs	r1, #208	; 0xd0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff feba 	bl	800113e <read_data>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <bmp280_init+0x38>
		return false;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e08c      	b.n	80014ee <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013da:	2b58      	cmp	r3, #88	; 0x58
 80013dc:	d006      	beq.n	80013ec <bmp280_init+0x50>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013e4:	2b60      	cmp	r3, #96	; 0x60
 80013e6:	d001      	beq.n	80013ec <bmp280_init+0x50>

		return false;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e080      	b.n	80014ee <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80013ec:	22b6      	movs	r2, #182	; 0xb6
 80013ee:	21e0      	movs	r1, #224	; 0xe0
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ffae 	bl	8001352 <write_register8>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <bmp280_init+0x64>
		return false;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e076      	b.n	80014ee <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001400:	f107 020c 	add.w	r2, r7, #12
 8001404:	2301      	movs	r3, #1
 8001406:	21f3      	movs	r1, #243	; 0xf3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff fe98 	bl	800113e <read_data>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f5      	bne.n	8001400 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001414:	7b3b      	ldrb	r3, [r7, #12]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff feb5 	bl	800118e <read_calibration_data>
 8001424:	4603      	mov	r3, r0
 8001426:	f083 0301 	eor.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <bmp280_init+0x96>
 8001430:	e001      	b.n	8001436 <bmp280_init+0x9a>
		return false;
 8001432:	2300      	movs	r3, #0
 8001434:	e05b      	b.n	80014ee <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800143c:	2b60      	cmp	r3, #96	; 0x60
 800143e:	d10a      	bne.n	8001456 <bmp280_init+0xba>
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff26 	bl	8001292 <read_hum_calibration_data>
 8001446:	4603      	mov	r3, r0
 8001448:	f083 0301 	eor.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <bmp280_init+0xba>
		return false;
 8001452:	2300      	movs	r3, #0
 8001454:	e04b      	b.n	80014ee <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	795b      	ldrb	r3, [r3, #5]
 800145a:	015b      	lsls	r3, r3, #5
 800145c:	b25a      	sxtb	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	b25b      	sxtb	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b25b      	sxtb	r3, r3
 800146a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	461a      	mov	r2, r3
 8001470:	21f5      	movs	r1, #245	; 0xf5
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff6d 	bl	8001352 <write_register8>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <bmp280_init+0xe6>
		return false;
 800147e:	2300      	movs	r3, #0
 8001480:	e035      	b.n	80014ee <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d102      	bne.n	8001490 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	78db      	ldrb	r3, [r3, #3]
 8001494:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001496:	b25a      	sxtb	r2, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	789b      	ldrb	r3, [r3, #2]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25a      	sxtb	r2, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014ae:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014b6:	2b60      	cmp	r3, #96	; 0x60
 80014b8:	d10d      	bne.n	80014d6 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	791b      	ldrb	r3, [r3, #4]
 80014be:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	461a      	mov	r2, r3
 80014c4:	21f2      	movs	r1, #242	; 0xf2
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ff43 	bl	8001352 <write_register8>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <bmp280_init+0x13a>
			return false;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e00b      	b.n	80014ee <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	461a      	mov	r2, r3
 80014da:	21f4      	movs	r1, #244	; 0xf4
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff38 	bl	8001352 <write_register8>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <bmp280_init+0x150>
		return false;
 80014e8:	2300      	movs	r3, #0
 80014ea:	e000      	b.n	80014ee <bmp280_init+0x152>
	}

	return true;
 80014ec:	2301      	movs	r3, #1
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <MPU6050_Init>:
static void MX_TIM11_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */

void MPU6050_Init (void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	2301      	movs	r3, #1
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2301      	movs	r3, #1
 800150e:	2275      	movs	r2, #117	; 0x75
 8001510:	21d0      	movs	r1, #208	; 0xd0
 8001512:	4823      	ldr	r0, [pc, #140]	; (80015a0 <MPU6050_Init+0xa8>)
 8001514:	f002 ffa2 	bl	800445c <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b68      	cmp	r3, #104	; 0x68
 800151c:	d13b      	bne.n	8001596 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	1dbb      	adds	r3, r7, #6
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	226b      	movs	r2, #107	; 0x6b
 8001534:	21d0      	movs	r1, #208	; 0xd0
 8001536:	481a      	ldr	r0, [pc, #104]	; (80015a0 <MPU6050_Init+0xa8>)
 8001538:	f002 fe96 	bl	8004268 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x03;
 800153c:	2303      	movs	r3, #3
 800153e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, DLPF_CFG, 1, &Data, 1, 1000);
 8001540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2301      	movs	r3, #1
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	1dbb      	adds	r3, r7, #6
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	221a      	movs	r2, #26
 8001552:	21d0      	movs	r1, #208	; 0xd0
 8001554:	4812      	ldr	r0, [pc, #72]	; (80015a0 <MPU6050_Init+0xa8>)
 8001556:	f002 fe87 	bl	8004268 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 8g
		Data = 0x10;
 800155a:	2310      	movs	r3, #16
 800155c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	2301      	movs	r3, #1
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2301      	movs	r3, #1
 800156e:	221c      	movs	r2, #28
 8001570:	21d0      	movs	r1, #208	; 0xd0
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <MPU6050_Init+0xa8>)
 8001574:	f002 fe78 	bl	8004268 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 500 �/s
		Data = 0x08;
 8001578:	2308      	movs	r3, #8
 800157a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	2301      	movs	r3, #1
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	1dbb      	adds	r3, r7, #6
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2301      	movs	r3, #1
 800158c:	221b      	movs	r2, #27
 800158e:	21d0      	movs	r1, #208	; 0xd0
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MPU6050_Init+0xa8>)
 8001592:	f002 fe69 	bl	8004268 <HAL_I2C_Mem_Write>
	}

}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200000e0 	.word	0x200000e0

080015a4 <gyro_get_data>:

void gyro_get_data(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af04      	add	r7, sp, #16

	uint8_t Accel_Val_Raw[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Accel_Val_Raw, 6, 1000);
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	2306      	movs	r3, #6
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2301      	movs	r3, #1
 80015bc:	223b      	movs	r2, #59	; 0x3b
 80015be:	21d0      	movs	r1, #208	; 0xd0
 80015c0:	482c      	ldr	r0, [pc, #176]	; (8001674 <gyro_get_data+0xd0>)
 80015c2:	f002 ff4b 	bl	800445c <HAL_I2C_Mem_Read>

	acc_y = (int16_t) (Accel_Val_Raw[0] << 8 | Accel_Val_Raw [1]);
 80015c6:	7a3b      	ldrb	r3, [r7, #8]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	7a7b      	ldrb	r3, [r7, #9]
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <gyro_get_data+0xd4>)
 80015d8:	601a      	str	r2, [r3, #0]
	acc_x = (int16_t) (Accel_Val_Raw[2] << 8 | Accel_Val_Raw [3]);
 80015da:	7abb      	ldrb	r3, [r7, #10]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	7afb      	ldrb	r3, [r7, #11]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <gyro_get_data+0xd8>)
 80015ec:	601a      	str	r2, [r3, #0]
	acc_z = (int16_t) (Accel_Val_Raw[4] << 8 | Accel_Val_Raw [5]);
 80015ee:	7b3b      	ldrb	r3, [r7, #12]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	7b7b      	ldrb	r3, [r7, #13]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <gyro_get_data+0xdc>)
 8001600:	601a      	str	r2, [r3, #0]

	uint8_t Gyro_Val_Raw[6];
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Gyro_Val_Raw, 6, 1000);
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	2306      	movs	r3, #6
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	463b      	mov	r3, r7
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	2243      	movs	r2, #67	; 0x43
 8001614:	21d0      	movs	r1, #208	; 0xd0
 8001616:	4817      	ldr	r0, [pc, #92]	; (8001674 <gyro_get_data+0xd0>)
 8001618:	f002 ff20 	bl	800445c <HAL_I2C_Mem_Read>

	gyro_y = (int16_t) (Gyro_Val_Raw[0] << 8 | Gyro_Val_Raw [1]);
 800161c:	783b      	ldrb	r3, [r7, #0]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	787b      	ldrb	r3, [r7, #1]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21b      	sxth	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <gyro_get_data+0xe0>)
 800162e:	601a      	str	r2, [r3, #0]
	gyro_x = (int16_t) (Gyro_Val_Raw[2] << 8 | Gyro_Val_Raw [3]);
 8001630:	78bb      	ldrb	r3, [r7, #2]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b21b      	sxth	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <gyro_get_data+0xe4>)
 8001642:	601a      	str	r2, [r3, #0]
	gyro_z = (int16_t) (Gyro_Val_Raw[4] << 8 | Gyro_Val_Raw [5]);
 8001644:	793b      	ldrb	r3, [r7, #4]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	797b      	ldrb	r3, [r7, #5]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21b      	sxth	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <gyro_get_data+0xe8>)
 8001656:	601a      	str	r2, [r3, #0]

	gyro_x *= -1;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <gyro_get_data+0xe4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	425b      	negs	r3, r3
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <gyro_get_data+0xe4>)
 8001660:	6013      	str	r3, [r2, #0]
	//gyro_y *= -1;
	gyro_z *= -1;
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <gyro_get_data+0xe8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	425b      	negs	r3, r3
 8001668:	4a08      	ldr	r2, [pc, #32]	; (800168c <gyro_get_data+0xe8>)
 800166a:	6013      	str	r3, [r2, #0]

}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200000e0 	.word	0x200000e0
 8001678:	20000350 	.word	0x20000350
 800167c:	2000034c 	.word	0x2000034c
 8001680:	20000354 	.word	0x20000354
 8001684:	20000344 	.word	0x20000344
 8001688:	20000340 	.word	0x20000340
 800168c:	20000348 	.word	0x20000348

08001690 <mpu6050_cal>:

void mpu6050_cal(){
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

	for( int i = 0; i < 2000; i++){
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	e0cf      	b.n	800183c <mpu6050_cal+0x1ac>
		if ( i % 15 == 0 ) HAL_GPIO_TogglePin(GPIOC, led_cal_Pin);
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <mpu6050_cal+0x230>)
 80016a0:	fb83 1302 	smull	r1, r3, r3, r2
 80016a4:	4413      	add	r3, r2
 80016a6:	10d9      	asrs	r1, r3, #3
 80016a8:	17d3      	asrs	r3, r2, #31
 80016aa:	1ac9      	subs	r1, r1, r3
 80016ac:	460b      	mov	r3, r1
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	1a5b      	subs	r3, r3, r1
 80016b2:	1ad1      	subs	r1, r2, r3
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d104      	bne.n	80016c2 <mpu6050_cal+0x32>
 80016b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016bc:	4881      	ldr	r0, [pc, #516]	; (80018c4 <mpu6050_cal+0x234>)
 80016be:	f002 fc5c 	bl	8003f7a <HAL_GPIO_TogglePin>
		gyro_get_data();
 80016c2:	f7ff ff6f 	bl	80015a4 <gyro_get_data>

		gyro_x_cal += gyro_x;
 80016c6:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <mpu6050_cal+0x238>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b80      	ldr	r3, [pc, #512]	; (80018cc <mpu6050_cal+0x23c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a7d      	ldr	r2, [pc, #500]	; (80018c8 <mpu6050_cal+0x238>)
 80016d2:	6013      	str	r3, [r2, #0]
		gyro_y_cal += gyro_y;
 80016d4:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <mpu6050_cal+0x240>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b7e      	ldr	r3, [pc, #504]	; (80018d4 <mpu6050_cal+0x244>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4413      	add	r3, r2
 80016de:	4a7c      	ldr	r2, [pc, #496]	; (80018d0 <mpu6050_cal+0x240>)
 80016e0:	6013      	str	r3, [r2, #0]
		gyro_z_cal += gyro_z;
 80016e2:	4b7d      	ldr	r3, [pc, #500]	; (80018d8 <mpu6050_cal+0x248>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b7d      	ldr	r3, [pc, #500]	; (80018dc <mpu6050_cal+0x24c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a7a      	ldr	r2, [pc, #488]	; (80018d8 <mpu6050_cal+0x248>)
 80016ee:	6013      	str	r3, [r2, #0]


		acc_total_vector = sqrt( ( acc_x*acc_x ) + ( acc_y * acc_y) + ( acc_z * acc_z ) );
 80016f0:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <mpu6050_cal+0x250>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a7a      	ldr	r2, [pc, #488]	; (80018e0 <mpu6050_cal+0x250>)
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	fb03 f202 	mul.w	r2, r3, r2
 80016fc:	4b79      	ldr	r3, [pc, #484]	; (80018e4 <mpu6050_cal+0x254>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4978      	ldr	r1, [pc, #480]	; (80018e4 <mpu6050_cal+0x254>)
 8001702:	6809      	ldr	r1, [r1, #0]
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	441a      	add	r2, r3
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <mpu6050_cal+0x258>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4976      	ldr	r1, [pc, #472]	; (80018e8 <mpu6050_cal+0x258>)
 8001710:	6809      	ldr	r1, [r1, #0]
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe feaf 	bl	800047c <__aeabi_i2d>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	ec43 2b10 	vmov	d0, r2, r3
 8001726:	f006 f80b 	bl	8007740 <sqrt>
 800172a:	ec53 2b10 	vmov	r2, r3, d0
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff f9bd 	bl	8000ab0 <__aeabi_d2iz>
 8001736:	4603      	mov	r3, r0
 8001738:	4a6c      	ldr	r2, [pc, #432]	; (80018ec <mpu6050_cal+0x25c>)
 800173a:	6013      	str	r3, [r2, #0]

		  if ( abs(acc_y) < acc_total_vector ){
 800173c:	4b69      	ldr	r3, [pc, #420]	; (80018e4 <mpu6050_cal+0x254>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001744:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <mpu6050_cal+0x25c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	da27      	bge.n	80017a0 <mpu6050_cal+0x110>
			  angle_pitch_acc = asin( (float) acc_y / acc_total_vector ) * 57.296;
 8001750:	4b64      	ldr	r3, [pc, #400]	; (80018e4 <mpu6050_cal+0x254>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175c:	4b63      	ldr	r3, [pc, #396]	; (80018ec <mpu6050_cal+0x25c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001768:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800176c:	ee16 0a90 	vmov	r0, s13
 8001770:	f7fe fe96 	bl	80004a0 <__aeabi_f2d>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	ec43 2b10 	vmov	d0, r2, r3
 800177c:	f005 ffac 	bl	80076d8 <asin>
 8001780:	ec51 0b10 	vmov	r0, r1, d0
 8001784:	a34c      	add	r3, pc, #304	; (adr r3, 80018b8 <mpu6050_cal+0x228>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe fee1 	bl	8000550 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff f9b3 	bl	8000b00 <__aeabi_d2f>
 800179a:	4603      	mov	r3, r0
 800179c:	4a54      	ldr	r2, [pc, #336]	; (80018f0 <mpu6050_cal+0x260>)
 800179e:	6013      	str	r3, [r2, #0]
		  }

		  if ( abs(acc_x) < acc_total_vector ){
 80017a0:	4b4f      	ldr	r3, [pc, #316]	; (80018e0 <mpu6050_cal+0x250>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017ac:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <mpu6050_cal+0x25c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	da27      	bge.n	8001804 <mpu6050_cal+0x174>
			  angle_roll_acc = asin( (float) acc_x / acc_total_vector ) * 57.296;
 80017b4:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <mpu6050_cal+0x250>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c0:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <mpu6050_cal+0x25c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017d0:	ee16 0a90 	vmov	r0, s13
 80017d4:	f7fe fe64 	bl	80004a0 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	ec43 2b10 	vmov	d0, r2, r3
 80017e0:	f005 ff7a 	bl	80076d8 <asin>
 80017e4:	ec51 0b10 	vmov	r0, r1, d0
 80017e8:	a333      	add	r3, pc, #204	; (adr r3, 80018b8 <mpu6050_cal+0x228>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe feaf 	bl	8000550 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	f7ff f981 	bl	8000b00 <__aeabi_d2f>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <mpu6050_cal+0x264>)
 8001802:	6013      	str	r3, [r2, #0]
		  }

		  angle_pitch_acc_cal += angle_pitch_acc;
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <mpu6050_cal+0x268>)
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <mpu6050_cal+0x260>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <mpu6050_cal+0x268>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
		  angle_roll_acc_cal += angle_roll_acc;
 800181a:	4b38      	ldr	r3, [pc, #224]	; (80018fc <mpu6050_cal+0x26c>)
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <mpu6050_cal+0x264>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <mpu6050_cal+0x26c>)
 800182c:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(4);
 8001830:	2004      	movs	r0, #4
 8001832:	f001 fd53 	bl	80032dc <HAL_Delay>
	for( int i = 0; i < 2000; i++){
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001842:	f6ff af2b 	blt.w	800169c <mpu6050_cal+0xc>

	}

	gyro_x_cal /= 2000;
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <mpu6050_cal+0x238>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2d      	ldr	r2, [pc, #180]	; (8001900 <mpu6050_cal+0x270>)
 800184c:	fb82 1203 	smull	r1, r2, r2, r3
 8001850:	11d2      	asrs	r2, r2, #7
 8001852:	17db      	asrs	r3, r3, #31
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <mpu6050_cal+0x238>)
 8001858:	6013      	str	r3, [r2, #0]
	gyro_y_cal /= 2000;
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <mpu6050_cal+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a28      	ldr	r2, [pc, #160]	; (8001900 <mpu6050_cal+0x270>)
 8001860:	fb82 1203 	smull	r1, r2, r2, r3
 8001864:	11d2      	asrs	r2, r2, #7
 8001866:	17db      	asrs	r3, r3, #31
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	4a19      	ldr	r2, [pc, #100]	; (80018d0 <mpu6050_cal+0x240>)
 800186c:	6013      	str	r3, [r2, #0]
	gyro_z_cal /= 2000;
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <mpu6050_cal+0x248>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a23      	ldr	r2, [pc, #140]	; (8001900 <mpu6050_cal+0x270>)
 8001874:	fb82 1203 	smull	r1, r2, r2, r3
 8001878:	11d2      	asrs	r2, r2, #7
 800187a:	17db      	asrs	r3, r3, #31
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	4a16      	ldr	r2, [pc, #88]	; (80018d8 <mpu6050_cal+0x248>)
 8001880:	6013      	str	r3, [r2, #0]

	angle_pitch_acc_cal /= 2000;
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <mpu6050_cal+0x268>)
 8001884:	ed93 7a00 	vldr	s14, [r3]
 8001888:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001904 <mpu6050_cal+0x274>
 800188c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <mpu6050_cal+0x268>)
 8001892:	edc3 7a00 	vstr	s15, [r3]
	angle_roll_acc_cal /= 2000;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <mpu6050_cal+0x26c>)
 8001898:	ed93 7a00 	vldr	s14, [r3]
 800189c:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001904 <mpu6050_cal+0x274>
 80018a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <mpu6050_cal+0x26c>)
 80018a6:	edc3 7a00 	vstr	s15, [r3]
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	53f7ced9 	.word	0x53f7ced9
 80018bc:	404ca5e3 	.word	0x404ca5e3
 80018c0:	88888889 	.word	0x88888889
 80018c4:	40020800 	.word	0x40020800
 80018c8:	20000328 	.word	0x20000328
 80018cc:	20000340 	.word	0x20000340
 80018d0:	2000032c 	.word	0x2000032c
 80018d4:	20000344 	.word	0x20000344
 80018d8:	20000330 	.word	0x20000330
 80018dc:	20000348 	.word	0x20000348
 80018e0:	2000034c 	.word	0x2000034c
 80018e4:	20000350 	.word	0x20000350
 80018e8:	20000354 	.word	0x20000354
 80018ec:	20000358 	.word	0x20000358
 80018f0:	20000368 	.word	0x20000368
 80018f4:	20000364 	.word	0x20000364
 80018f8:	20000334 	.word	0x20000334
 80018fc:	20000338 	.word	0x20000338
 8001900:	10624dd3 	.word	0x10624dd3
 8001904:	44fa0000 	.word	0x44fa0000

08001908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190e:	f001 fc73 	bl	80031f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001912:	f000 ffd3 	bl	80028bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001916:	f001 f991 	bl	8002c3c <MX_GPIO_Init>
  MX_DMA_Init();
 800191a:	f001 f96f 	bl	8002bfc <MX_DMA_Init>
  MX_I2C1_Init();
 800191e:	f001 f835 	bl	800298c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001922:	f001 f941 	bl	8002ba8 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001926:	f001 f85f 	bl	80029e8 <MX_TIM5_Init>
  MX_TIM11_Init();
 800192a:	f001 f919 	bl	8002b60 <MX_TIM11_Init>
  MX_TIM10_Init();
 800192e:	f001 f8f3 	bl	8002b18 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8001932:	2064      	movs	r0, #100	; 0x64
 8001934:	f001 fcd2 	bl	80032dc <HAL_Delay>
  HAL_TIM_Base_Start(&htim10);
 8001938:	48bd      	ldr	r0, [pc, #756]	; (8001c30 <main+0x328>)
 800193a:	f003 ffb9 	bl	80058b0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 800193e:	48bd      	ldr	r0, [pc, #756]	; (8001c34 <main+0x32c>)
 8001940:	f003 ffb6 	bl	80058b0 <HAL_TIM_Base_Start>


  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001944:	2100      	movs	r1, #0
 8001946:	48bc      	ldr	r0, [pc, #752]	; (8001c38 <main+0x330>)
 8001948:	f004 f866 	bl	8005a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800194c:	2104      	movs	r1, #4
 800194e:	48ba      	ldr	r0, [pc, #744]	; (8001c38 <main+0x330>)
 8001950:	f004 f862 	bl	8005a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001954:	2108      	movs	r1, #8
 8001956:	48b8      	ldr	r0, [pc, #736]	; (8001c38 <main+0x330>)
 8001958:	f004 f85e 	bl	8005a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800195c:	210c      	movs	r1, #12
 800195e:	48b6      	ldr	r0, [pc, #728]	; (8001c38 <main+0x330>)
 8001960:	f004 f85a 	bl	8005a18 <HAL_TIM_PWM_Start>
  HAL_Delay(100);
 8001964:	2064      	movs	r0, #100	; 0x64
 8001966:	f001 fcb9 	bl	80032dc <HAL_Delay>

  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,0);
 800196a:	4bb3      	ldr	r3, [pc, #716]	; (8001c38 <main+0x330>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2200      	movs	r2, #0
 8001970:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_2,0);
 8001972:	4bb1      	ldr	r3, [pc, #708]	; (8001c38 <main+0x330>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,0);
 800197a:	4baf      	ldr	r3, [pc, #700]	; (8001c38 <main+0x330>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2200      	movs	r2, #0
 8001980:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,0);
 8001982:	4bad      	ldr	r3, [pc, #692]	; (8001c38 <main+0x330>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2200      	movs	r2, #0
 8001988:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_Delay(100);
 800198a:	2064      	movs	r0, #100	; 0x64
 800198c:	f001 fca6 	bl	80032dc <HAL_Delay>

  HMC5883L_setRange (HMC5883L_RANGE_1_3GA);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff fa9d 	bl	8000ed0 <HMC5883L_setRange>
  HMC5883L_setMeasurementMode (HMC5883L_CONTINOUS);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff faf4 	bl	8000f84 <HMC5883L_setMeasurementMode>
  HMC5883L_setDataRate (HMC5883L_DATARATE_15HZ);
 800199c:	2004      	movs	r0, #4
 800199e:	f7ff fb0c 	bl	8000fba <HMC5883L_setDataRate>
  HMC5883L_setSamples (HMC5883L_SAMPLES_1);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7ff fb28 	bl	8000ff8 <HMC5883L_setSamples>
  HMC5883L_setOffset (0, 0);
 80019a8:	2100      	movs	r1, #0
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff fa7a 	bl	8000ea4 <HMC5883L_setOffset>

  bmp280_init_default_params(&bmp280.params);
 80019b0:	48a2      	ldr	r0, [pc, #648]	; (8001c3c <main+0x334>)
 80019b2:	f7ff fb79 	bl	80010a8 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 80019b6:	4ba2      	ldr	r3, [pc, #648]	; (8001c40 <main+0x338>)
 80019b8:	2276      	movs	r2, #118	; 0x76
 80019ba:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 80019bc:	4ba0      	ldr	r3, [pc, #640]	; (8001c40 <main+0x338>)
 80019be:	4aa1      	ldr	r2, [pc, #644]	; (8001c44 <main+0x33c>)
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
  bmp280_init(&bmp280, &bmp280.params);
 80019c2:	499e      	ldr	r1, [pc, #632]	; (8001c3c <main+0x334>)
 80019c4:	489e      	ldr	r0, [pc, #632]	; (8001c40 <main+0x338>)
 80019c6:	f7ff fce9 	bl	800139c <bmp280_init>

  MPU6050_Init();
 80019ca:	f7ff fd95 	bl	80014f8 <MPU6050_Init>
  HAL_Delay(1000);
 80019ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019d2:	f001 fc83 	bl	80032dc <HAL_Delay>
  mpu6050_cal();
 80019d6:	f7ff fe5b 	bl	8001690 <mpu6050_cal>
  HAL_Delay(1000);
 80019da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019de:	f001 fc7d 	bl	80032dc <HAL_Delay>
//  do_altitude_cal();

  loop_timer = __HAL_TIM_GET_COUNTER(&htim10);
 80019e2:	4b93      	ldr	r3, [pc, #588]	; (8001c30 <main+0x328>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b97      	ldr	r3, [pc, #604]	; (8001c48 <main+0x340>)
 80019ec:	601a      	str	r2, [r3, #0]
//    //If the difference is larger then 1 or smaller then -1 the slow average is adjuste based on the error between the fast and slow average.
//    if (actual_pressure_diff > 1 || actual_pressure_diff < -1)actual_pressure_slow -= actual_pressure_diff / 6.0;
//    //actual_pressure = actual_pressure_slow;


	  receiver_input_channel_1 = ch[0];
 80019ee:	4b97      	ldr	r3, [pc, #604]	; (8001c4c <main+0x344>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a97      	ldr	r2, [pc, #604]	; (8001c50 <main+0x348>)
 80019f4:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_2 = ch[1];
 80019f6:	4b95      	ldr	r3, [pc, #596]	; (8001c4c <main+0x344>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a96      	ldr	r2, [pc, #600]	; (8001c54 <main+0x34c>)
 80019fc:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_3 = ch[2];
 80019fe:	4b93      	ldr	r3, [pc, #588]	; (8001c4c <main+0x344>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4a95      	ldr	r2, [pc, #596]	; (8001c58 <main+0x350>)
 8001a04:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_4 = ch[3];
 8001a06:	4b91      	ldr	r3, [pc, #580]	; (8001c4c <main+0x344>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	4a94      	ldr	r2, [pc, #592]	; (8001c5c <main+0x354>)
 8001a0c:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_5 = ch[4];
 8001a0e:	4b8f      	ldr	r3, [pc, #572]	; (8001c4c <main+0x344>)
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	4a93      	ldr	r2, [pc, #588]	; (8001c60 <main+0x358>)
 8001a14:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_6 = ch[5];
 8001a16:	4b8d      	ldr	r3, [pc, #564]	; (8001c4c <main+0x344>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	4a92      	ldr	r2, [pc, #584]	; (8001c64 <main+0x35c>)
 8001a1c:	6013      	str	r3, [r2, #0]

	  gyro_get_data();
 8001a1e:	f7ff fdc1 	bl	80015a4 <gyro_get_data>

	  gyro_x -= gyro_x_cal;
 8001a22:	4b91      	ldr	r3, [pc, #580]	; (8001c68 <main+0x360>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b91      	ldr	r3, [pc, #580]	; (8001c6c <main+0x364>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a8e      	ldr	r2, [pc, #568]	; (8001c68 <main+0x360>)
 8001a2e:	6013      	str	r3, [r2, #0]
	  gyro_y -= gyro_y_cal;
 8001a30:	4b8f      	ldr	r3, [pc, #572]	; (8001c70 <main+0x368>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b8f      	ldr	r3, [pc, #572]	; (8001c74 <main+0x36c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	4a8d      	ldr	r2, [pc, #564]	; (8001c70 <main+0x368>)
 8001a3c:	6013      	str	r3, [r2, #0]
	  gyro_z -= gyro_z_cal;
 8001a3e:	4b8e      	ldr	r3, [pc, #568]	; (8001c78 <main+0x370>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b8e      	ldr	r3, [pc, #568]	; (8001c7c <main+0x374>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	4a8b      	ldr	r2, [pc, #556]	; (8001c78 <main+0x370>)
 8001a4a:	6013      	str	r3, [r2, #0]

//	  acc_x -= acc_x_cal;
//	  acc_y -= acc_y_cal;
//	  acc_z -= acc_z_cal;

	  gyro_pitch_input 	= ( gyro_pitch_input * 0.7 ) + ((float)( gyro_x / 65.5) * 0.3);
 8001a4c:	4b8c      	ldr	r3, [pc, #560]	; (8001c80 <main+0x378>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd25 	bl	80004a0 <__aeabi_f2d>
 8001a56:	a36e      	add	r3, pc, #440	; (adr r3, 8001c10 <main+0x308>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fd78 	bl	8000550 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4614      	mov	r4, r2
 8001a66:	461d      	mov	r5, r3
 8001a68:	4b7f      	ldr	r3, [pc, #508]	; (8001c68 <main+0x360>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd05 	bl	800047c <__aeabi_i2d>
 8001a72:	a369      	add	r3, pc, #420	; (adr r3, 8001c18 <main+0x310>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fe94 	bl	80007a4 <__aeabi_ddiv>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff f83c 	bl	8000b00 <__aeabi_d2f>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd08 	bl	80004a0 <__aeabi_f2d>
 8001a90:	a363      	add	r3, pc, #396	; (adr r3, 8001c20 <main+0x318>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fd5b 	bl	8000550 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fb9f 	bl	80001e4 <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f827 	bl	8000b00 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a72      	ldr	r2, [pc, #456]	; (8001c80 <main+0x378>)
 8001ab6:	6013      	str	r3, [r2, #0]
	  gyro_roll_input 	= ( gyro_roll_input * 0.7 ) + ((float)( gyro_y / 65.5) * 0.3);
 8001ab8:	4b72      	ldr	r3, [pc, #456]	; (8001c84 <main+0x37c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fcef 	bl	80004a0 <__aeabi_f2d>
 8001ac2:	a353      	add	r3, pc, #332	; (adr r3, 8001c10 <main+0x308>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fd42 	bl	8000550 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <main+0x368>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fccf 	bl	800047c <__aeabi_i2d>
 8001ade:	a34e      	add	r3, pc, #312	; (adr r3, 8001c18 <main+0x310>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fe5e 	bl	80007a4 <__aeabi_ddiv>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff f806 	bl	8000b00 <__aeabi_d2f>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fcd2 	bl	80004a0 <__aeabi_f2d>
 8001afc:	a348      	add	r3, pc, #288	; (adr r3, 8001c20 <main+0x318>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fd25 	bl	8000550 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fb69 	bl	80001e4 <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7fe fff1 	bl	8000b00 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <main+0x37c>)
 8001b22:	6013      	str	r3, [r2, #0]
	  gyro_yaw_input 	= ( gyro_yaw_input * 0.7 ) + ((float)( gyro_z / 65.5) * 0.3);
 8001b24:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <main+0x380>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcb9 	bl	80004a0 <__aeabi_f2d>
 8001b2e:	a338      	add	r3, pc, #224	; (adr r3, 8001c10 <main+0x308>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fd0c 	bl	8000550 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	461d      	mov	r5, r3
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <main+0x370>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fc99 	bl	800047c <__aeabi_i2d>
 8001b4a:	a333      	add	r3, pc, #204	; (adr r3, 8001c18 <main+0x310>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fe28 	bl	80007a4 <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7fe ffd0 	bl	8000b00 <__aeabi_d2f>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fc9c 	bl	80004a0 <__aeabi_f2d>
 8001b68:	a32d      	add	r3, pc, #180	; (adr r3, 8001c20 <main+0x318>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	f7fe fcef 	bl	8000550 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f7fe fb33 	bl	80001e4 <__adddf3>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7fe ffbb 	bl	8000b00 <__aeabi_d2f>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4a3e      	ldr	r2, [pc, #248]	; (8001c88 <main+0x380>)
 8001b8e:	6013      	str	r3, [r2, #0]

	  angle_pitch += gyro_x * 0.0000611;
 8001b90:	4b3e      	ldr	r3, [pc, #248]	; (8001c8c <main+0x384>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fc83 	bl	80004a0 <__aeabi_f2d>
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	460d      	mov	r5, r1
 8001b9e:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <main+0x360>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fc6a 	bl	800047c <__aeabi_i2d>
 8001ba8:	a31f      	add	r3, pc, #124	; (adr r3, 8001c28 <main+0x320>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fccf 	bl	8000550 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	4629      	mov	r1, r5
 8001bba:	f7fe fb13 	bl	80001e4 <__adddf3>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7fe ff9b 	bl	8000b00 <__aeabi_d2f>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a2f      	ldr	r2, [pc, #188]	; (8001c8c <main+0x384>)
 8001bce:	6013      	str	r3, [r2, #0]
	  angle_roll += gyro_y * 0.0000611;
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <main+0x388>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc63 	bl	80004a0 <__aeabi_f2d>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	460d      	mov	r5, r1
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <main+0x368>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fc4a 	bl	800047c <__aeabi_i2d>
 8001be8:	a30f      	add	r3, pc, #60	; (adr r3, 8001c28 <main+0x320>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe fcaf 	bl	8000550 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe faf3 	bl	80001e4 <__adddf3>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe ff7b 	bl	8000b00 <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	e042      	b.n	8001c94 <main+0x38c>
 8001c0e:	bf00      	nop
 8001c10:	66666666 	.word	0x66666666
 8001c14:	3fe66666 	.word	0x3fe66666
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	40506000 	.word	0x40506000
 8001c20:	33333333 	.word	0x33333333
 8001c24:	3fd33333 	.word	0x3fd33333
 8001c28:	01d41596 	.word	0x01d41596
 8001c2c:	3f10045a 	.word	0x3f10045a
 8001c30:	2000017c 	.word	0x2000017c
 8001c34:	200001c4 	.word	0x200001c4
 8001c38:	20000134 	.word	0x20000134
 8001c3c:	200002dc 	.word	0x200002dc
 8001c40:	200002b0 	.word	0x200002b0
 8001c44:	200000e0 	.word	0x200000e0
 8001c48:	2000033c 	.word	0x2000033c
 8001c4c:	200002e4 	.word	0x200002e4
 8001c50:	2000030c 	.word	0x2000030c
 8001c54:	20000310 	.word	0x20000310
 8001c58:	20000314 	.word	0x20000314
 8001c5c:	20000318 	.word	0x20000318
 8001c60:	2000031c 	.word	0x2000031c
 8001c64:	20000320 	.word	0x20000320
 8001c68:	20000340 	.word	0x20000340
 8001c6c:	20000328 	.word	0x20000328
 8001c70:	20000344 	.word	0x20000344
 8001c74:	2000032c 	.word	0x2000032c
 8001c78:	20000348 	.word	0x20000348
 8001c7c:	20000330 	.word	0x20000330
 8001c80:	20000378 	.word	0x20000378
 8001c84:	20000374 	.word	0x20000374
 8001c88:	2000037c 	.word	0x2000037c
 8001c8c:	20000360 	.word	0x20000360
 8001c90:	2000035c 	.word	0x2000035c
 8001c94:	4ac6      	ldr	r2, [pc, #792]	; (8001fb0 <main+0x6a8>)
 8001c96:	6013      	str	r3, [r2, #0]


	  angle_pitch -= angle_roll * sin(gyro_z * 0.000001066);
 8001c98:	4bc6      	ldr	r3, [pc, #792]	; (8001fb4 <main+0x6ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fbff 	bl	80004a0 <__aeabi_f2d>
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	4bc2      	ldr	r3, [pc, #776]	; (8001fb0 <main+0x6a8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fbf8 	bl	80004a0 <__aeabi_f2d>
 8001cb0:	4680      	mov	r8, r0
 8001cb2:	4689      	mov	r9, r1
 8001cb4:	4bc0      	ldr	r3, [pc, #768]	; (8001fb8 <main+0x6b0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fbdf 	bl	800047c <__aeabi_i2d>
 8001cbe:	a3b4      	add	r3, pc, #720	; (adr r3, 8001f90 <main+0x688>)
 8001cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc4:	f7fe fc44 	bl	8000550 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	ec43 2b17 	vmov	d7, r2, r3
 8001cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd4:	eef0 0a67 	vmov.f32	s1, s15
 8001cd8:	f005 fca6 	bl	8007628 <sin>
 8001cdc:	ec53 2b10 	vmov	r2, r3, d0
 8001ce0:	4640      	mov	r0, r8
 8001ce2:	4649      	mov	r1, r9
 8001ce4:	f7fe fc34 	bl	8000550 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4620      	mov	r0, r4
 8001cee:	4629      	mov	r1, r5
 8001cf0:	f7fe fa76 	bl	80001e0 <__aeabi_dsub>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7fe ff00 	bl	8000b00 <__aeabi_d2f>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4aac      	ldr	r2, [pc, #688]	; (8001fb4 <main+0x6ac>)
 8001d04:	6013      	str	r3, [r2, #0]
	  angle_roll += angle_pitch * sin(gyro_z * 0.000001066);
 8001d06:	4baa      	ldr	r3, [pc, #680]	; (8001fb0 <main+0x6a8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fbc8 	bl	80004a0 <__aeabi_f2d>
 8001d10:	4604      	mov	r4, r0
 8001d12:	460d      	mov	r5, r1
 8001d14:	4ba7      	ldr	r3, [pc, #668]	; (8001fb4 <main+0x6ac>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fbc1 	bl	80004a0 <__aeabi_f2d>
 8001d1e:	4680      	mov	r8, r0
 8001d20:	4689      	mov	r9, r1
 8001d22:	4ba5      	ldr	r3, [pc, #660]	; (8001fb8 <main+0x6b0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fba8 	bl	800047c <__aeabi_i2d>
 8001d2c:	a398      	add	r3, pc, #608	; (adr r3, 8001f90 <main+0x688>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fc0d 	bl	8000550 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	ec43 2b17 	vmov	d7, r2, r3
 8001d3e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d42:	eef0 0a67 	vmov.f32	s1, s15
 8001d46:	f005 fc6f 	bl	8007628 <sin>
 8001d4a:	ec53 2b10 	vmov	r2, r3, d0
 8001d4e:	4640      	mov	r0, r8
 8001d50:	4649      	mov	r1, r9
 8001d52:	f7fe fbfd 	bl	8000550 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	f7fe fa41 	bl	80001e4 <__adddf3>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fec9 	bl	8000b00 <__aeabi_d2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4a8f      	ldr	r2, [pc, #572]	; (8001fb0 <main+0x6a8>)
 8001d72:	6013      	str	r3, [r2, #0]

	  acc_total_vector = sqrt( ( acc_x*acc_x ) + ( acc_y * acc_y) + ( acc_z * acc_z ) );
 8001d74:	4b91      	ldr	r3, [pc, #580]	; (8001fbc <main+0x6b4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a90      	ldr	r2, [pc, #576]	; (8001fbc <main+0x6b4>)
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	fb03 f202 	mul.w	r2, r3, r2
 8001d80:	4b8f      	ldr	r3, [pc, #572]	; (8001fc0 <main+0x6b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	498e      	ldr	r1, [pc, #568]	; (8001fc0 <main+0x6b8>)
 8001d86:	6809      	ldr	r1, [r1, #0]
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	441a      	add	r2, r3
 8001d8e:	4b8d      	ldr	r3, [pc, #564]	; (8001fc4 <main+0x6bc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	498c      	ldr	r1, [pc, #560]	; (8001fc4 <main+0x6bc>)
 8001d94:	6809      	ldr	r1, [r1, #0]
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fb6d 	bl	800047c <__aeabi_i2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	ec43 2b10 	vmov	d0, r2, r3
 8001daa:	f005 fcc9 	bl	8007740 <sqrt>
 8001dae:	ec53 2b10 	vmov	r2, r3, d0
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe fe7b 	bl	8000ab0 <__aeabi_d2iz>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a82      	ldr	r2, [pc, #520]	; (8001fc8 <main+0x6c0>)
 8001dbe:	6013      	str	r3, [r2, #0]

	  if ( abs(acc_y) < acc_total_vector ){
 8001dc0:	4b7f      	ldr	r3, [pc, #508]	; (8001fc0 <main+0x6b8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001dc8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001dcc:	4b7e      	ldr	r3, [pc, #504]	; (8001fc8 <main+0x6c0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	da32      	bge.n	8001e3a <main+0x532>
		  angle_pitch_acc = asin( (float) acc_y / acc_total_vector ) * 57.296;
 8001dd4:	4b7a      	ldr	r3, [pc, #488]	; (8001fc0 <main+0x6b8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de0:	4b79      	ldr	r3, [pc, #484]	; (8001fc8 <main+0x6c0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001df0:	ee16 0a90 	vmov	r0, s13
 8001df4:	f7fe fb54 	bl	80004a0 <__aeabi_f2d>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	ec43 2b10 	vmov	d0, r2, r3
 8001e00:	f005 fc6a 	bl	80076d8 <asin>
 8001e04:	ec51 0b10 	vmov	r0, r1, d0
 8001e08:	a363      	add	r3, pc, #396	; (adr r3, 8001f98 <main+0x690>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fb9f 	bl	8000550 <__aeabi_dmul>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7fe fe71 	bl	8000b00 <__aeabi_d2f>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4a6a      	ldr	r2, [pc, #424]	; (8001fcc <main+0x6c4>)
 8001e22:	6013      	str	r3, [r2, #0]
		  angle_pitch_acc -= angle_pitch_acc_cal;
 8001e24:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <main+0x6c4>)
 8001e26:	ed93 7a00 	vldr	s14, [r3]
 8001e2a:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <main+0x6c8>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <main+0x6c4>)
 8001e36:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if ( abs(acc_x) < acc_total_vector ){
 8001e3a:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <main+0x6b4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e42:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e46:	4b60      	ldr	r3, [pc, #384]	; (8001fc8 <main+0x6c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	da32      	bge.n	8001eb4 <main+0x5ac>
		  angle_roll_acc = asin( (float) acc_x / acc_total_vector ) * 57.296;
 8001e4e:	4b5b      	ldr	r3, [pc, #364]	; (8001fbc <main+0x6b4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e5a:	4b5b      	ldr	r3, [pc, #364]	; (8001fc8 <main+0x6c0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e6a:	ee16 0a90 	vmov	r0, s13
 8001e6e:	f7fe fb17 	bl	80004a0 <__aeabi_f2d>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	ec43 2b10 	vmov	d0, r2, r3
 8001e7a:	f005 fc2d 	bl	80076d8 <asin>
 8001e7e:	ec51 0b10 	vmov	r0, r1, d0
 8001e82:	a345      	add	r3, pc, #276	; (adr r3, 8001f98 <main+0x690>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fb62 	bl	8000550 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	f7fe fe34 	bl	8000b00 <__aeabi_d2f>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4a4e      	ldr	r2, [pc, #312]	; (8001fd4 <main+0x6cc>)
 8001e9c:	6013      	str	r3, [r2, #0]
		  angle_roll_acc -= angle_roll_acc_cal;
 8001e9e:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <main+0x6cc>)
 8001ea0:	ed93 7a00 	vldr	s14, [r3]
 8001ea4:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <main+0x6d0>)
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eae:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <main+0x6cc>)
 8001eb0:	edc3 7a00 	vstr	s15, [r3]
	  }

	  angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;
 8001eb4:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <main+0x6ac>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe faf1 	bl	80004a0 <__aeabi_f2d>
 8001ebe:	a338      	add	r3, pc, #224	; (adr r3, 8001fa0 <main+0x698>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fb44 	bl	8000550 <__aeabi_dmul>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4614      	mov	r4, r2
 8001ece:	461d      	mov	r5, r3
 8001ed0:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <main+0x6c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fae3 	bl	80004a0 <__aeabi_f2d>
 8001eda:	a333      	add	r3, pc, #204	; (adr r3, 8001fa8 <main+0x6a0>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe fb36 	bl	8000550 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4629      	mov	r1, r5
 8001eec:	f7fe f97a 	bl	80001e4 <__adddf3>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7fe fe02 	bl	8000b00 <__aeabi_d2f>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <main+0x6ac>)
 8001f00:	6013      	str	r3, [r2, #0]
	  angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;
 8001f02:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <main+0x6a8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe faca 	bl	80004a0 <__aeabi_f2d>
 8001f0c:	a324      	add	r3, pc, #144	; (adr r3, 8001fa0 <main+0x698>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	f7fe fb1d 	bl	8000550 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4614      	mov	r4, r2
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <main+0x6cc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fabc 	bl	80004a0 <__aeabi_f2d>
 8001f28:	a31f      	add	r3, pc, #124	; (adr r3, 8001fa8 <main+0x6a0>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fb0f 	bl	8000550 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe f953 	bl	80001e4 <__adddf3>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe fddb 	bl	8000b00 <__aeabi_d2f>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <main+0x6a8>)
 8001f4e:	6013      	str	r3, [r2, #0]
//		  angle_roll = angle_roll_acc;
//		  set_gyro_angle = true;
//	  }


		  pitch_level_adjust = angle_pitch * 15;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <main+0x6ac>)
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <main+0x6d4>)
 8001f60:	edc3 7a00 	vstr	s15, [r3]
		  roll_level_adjust = angle_roll * 15;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <main+0x6a8>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <main+0x6d8>)
 8001f74:	edc3 7a00 	vstr	s15, [r3]
//	  }


//	  if ( receiver_input_channel_3 < 1050 && receiver_input_channel_4 < 1050 ) start =1;

	  if ( receiver_input_channel_6 > 1550 ){
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <main+0x6dc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f240 620e 	movw	r2, #1550	; 0x60e
 8001f80:	4293      	cmp	r3, r2
 8001f82:	dd53      	ble.n	800202c <main+0x724>
		  start = 2;
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <main+0x6e0>)
 8001f86:	2202      	movs	r2, #2
 8001f88:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(led_arm_GPIO_Port, led_arm_Pin, 1);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	e02d      	b.n	8001fec <main+0x6e4>
 8001f90:	652c6e62 	.word	0x652c6e62
 8001f94:	3eb1e26f 	.word	0x3eb1e26f
 8001f98:	53f7ced9 	.word	0x53f7ced9
 8001f9c:	404ca5e3 	.word	0x404ca5e3
 8001fa0:	23a29c78 	.word	0x23a29c78
 8001fa4:	3feffcb9 	.word	0x3feffcb9
 8001fa8:	eb1c432d 	.word	0xeb1c432d
 8001fac:	3f3a36e2 	.word	0x3f3a36e2
 8001fb0:	2000035c 	.word	0x2000035c
 8001fb4:	20000360 	.word	0x20000360
 8001fb8:	20000348 	.word	0x20000348
 8001fbc:	2000034c 	.word	0x2000034c
 8001fc0:	20000350 	.word	0x20000350
 8001fc4:	20000354 	.word	0x20000354
 8001fc8:	20000358 	.word	0x20000358
 8001fcc:	20000368 	.word	0x20000368
 8001fd0:	20000334 	.word	0x20000334
 8001fd4:	20000364 	.word	0x20000364
 8001fd8:	20000338 	.word	0x20000338
 8001fdc:	20000370 	.word	0x20000370
 8001fe0:	2000036c 	.word	0x2000036c
 8001fe4:	20000320 	.word	0x20000320
 8001fe8:	200003b8 	.word	0x200003b8
 8001fec:	4894      	ldr	r0, [pc, #592]	; (8002240 <main+0x938>)
 8001fee:	f001 ffab 	bl	8003f48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led_disarm_GPIO_Port, led_disarm_Pin, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	4892      	ldr	r0, [pc, #584]	; (8002240 <main+0x938>)
 8001ff8:	f001 ffa6 	bl	8003f48 <HAL_GPIO_WritePin>

		  //angle_pitch = angle_pitch_acc;
		  //angle_roll = angle_roll_acc;

		  pid_i_mem_roll = 0;
 8001ffc:	4b91      	ldr	r3, [pc, #580]	; (8002244 <main+0x93c>)
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
		  pid_last_roll_d_error = 0;
 8002004:	4b90      	ldr	r3, [pc, #576]	; (8002248 <main+0x940>)
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
		  pid_i_mem_pitch = 0;
 800200c:	4b8f      	ldr	r3, [pc, #572]	; (800224c <main+0x944>)
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
		  pid_last_pitch_d_eroor = 0;
 8002014:	4b8e      	ldr	r3, [pc, #568]	; (8002250 <main+0x948>)
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
		  pid_i_mem_yaw = 0;
 800201c:	4b8d      	ldr	r3, [pc, #564]	; (8002254 <main+0x94c>)
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
		  pid_last_yaw_d_error = 0;
 8002024:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <main+0x950>)
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
	  }

	  if ( start == 2 && receiver_input_channel_6 < 1450){
 800202c:	4b8b      	ldr	r3, [pc, #556]	; (800225c <main+0x954>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d112      	bne.n	800205a <main+0x752>
 8002034:	4b8a      	ldr	r3, [pc, #552]	; (8002260 <main+0x958>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f240 52a9 	movw	r2, #1449	; 0x5a9
 800203c:	4293      	cmp	r3, r2
 800203e:	dc0c      	bgt.n	800205a <main+0x752>
		  start =0;
 8002040:	4b86      	ldr	r3, [pc, #536]	; (800225c <main+0x954>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(led_arm_GPIO_Port, led_arm_Pin, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2101      	movs	r1, #1
 800204a:	487d      	ldr	r0, [pc, #500]	; (8002240 <main+0x938>)
 800204c:	f001 ff7c 	bl	8003f48 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led_disarm_GPIO_Port, led_disarm_Pin, 1);
 8002050:	2201      	movs	r2, #1
 8002052:	2102      	movs	r1, #2
 8002054:	487a      	ldr	r0, [pc, #488]	; (8002240 <main+0x938>)
 8002056:	f001 ff77 	bl	8003f48 <HAL_GPIO_WritePin>
	  }


	  pid_roll_setpoint =0;
 800205a:	4b82      	ldr	r3, [pc, #520]	; (8002264 <main+0x95c>)
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
	  if ( receiver_input_channel_1 > 1508 ) {
 8002062:	4b81      	ldr	r3, [pc, #516]	; (8002268 <main+0x960>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800206a:	4293      	cmp	r3, r2
 800206c:	dd0b      	ble.n	8002086 <main+0x77e>
		  pid_roll_setpoint = (receiver_input_channel_1 - 1508);
 800206e:	4b7e      	ldr	r3, [pc, #504]	; (8002268 <main+0x960>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8002076:	ee07 3a90 	vmov	s15, r3
 800207a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800207e:	4b79      	ldr	r3, [pc, #484]	; (8002264 <main+0x95c>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
 8002084:	e015      	b.n	80020b2 <main+0x7aa>
	  }
	  else if ( receiver_input_channel_1  < 1492 ){
 8002086:	4b78      	ldr	r3, [pc, #480]	; (8002268 <main+0x960>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f240 52d3 	movw	r2, #1491	; 0x5d3
 800208e:	4293      	cmp	r3, r2
 8002090:	dc0b      	bgt.n	80020aa <main+0x7a2>
		  pid_roll_setpoint = ( receiver_input_channel_1  - 1492 );
 8002092:	4b75      	ldr	r3, [pc, #468]	; (8002268 <main+0x960>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a2:	4b70      	ldr	r3, [pc, #448]	; (8002264 <main+0x95c>)
 80020a4:	edc3 7a00 	vstr	s15, [r3]
 80020a8:	e003      	b.n	80020b2 <main+0x7aa>
	  }
	  else{
		  receiver_input_channel_1 = 1500;
 80020aa:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <main+0x960>)
 80020ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80020b0:	601a      	str	r2, [r3, #0]
	  }

	  pid_roll_setpoint -= roll_level_adjust;
 80020b2:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <main+0x95c>)
 80020b4:	ed93 7a00 	vldr	s14, [r3]
 80020b8:	4b6c      	ldr	r3, [pc, #432]	; (800226c <main+0x964>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c2:	4b68      	ldr	r3, [pc, #416]	; (8002264 <main+0x95c>)
 80020c4:	edc3 7a00 	vstr	s15, [r3]
	  pid_roll_setpoint /= turning_speed;
 80020c8:	4b66      	ldr	r3, [pc, #408]	; (8002264 <main+0x95c>)
 80020ca:	edd3 6a00 	vldr	s13, [r3]
 80020ce:	4b68      	ldr	r3, [pc, #416]	; (8002270 <main+0x968>)
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d8:	4b62      	ldr	r3, [pc, #392]	; (8002264 <main+0x95c>)
 80020da:	edc3 7a00 	vstr	s15, [r3]

	  pid_pitch_setpoint =0;
 80020de:	4b65      	ldr	r3, [pc, #404]	; (8002274 <main+0x96c>)
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
	  if ( receiver_input_channel_2 > 1508 ) {
 80020e6:	4b64      	ldr	r3, [pc, #400]	; (8002278 <main+0x970>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80020ee:	4293      	cmp	r3, r2
 80020f0:	dd0b      	ble.n	800210a <main+0x802>
		  pid_pitch_setpoint = ( receiver_input_channel_2 - 1508 );
 80020f2:	4b61      	ldr	r3, [pc, #388]	; (8002278 <main+0x970>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80020fa:	ee07 3a90 	vmov	s15, r3
 80020fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002102:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <main+0x96c>)
 8002104:	edc3 7a00 	vstr	s15, [r3]
 8002108:	e015      	b.n	8002136 <main+0x82e>
	  }
	  else if ( receiver_input_channel_2 < 1492 ) {
 800210a:	4b5b      	ldr	r3, [pc, #364]	; (8002278 <main+0x970>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f240 52d3 	movw	r2, #1491	; 0x5d3
 8002112:	4293      	cmp	r3, r2
 8002114:	dc0b      	bgt.n	800212e <main+0x826>
		  pid_pitch_setpoint = ( receiver_input_channel_2 - 1492 );
 8002116:	4b58      	ldr	r3, [pc, #352]	; (8002278 <main+0x970>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002126:	4b53      	ldr	r3, [pc, #332]	; (8002274 <main+0x96c>)
 8002128:	edc3 7a00 	vstr	s15, [r3]
 800212c:	e003      	b.n	8002136 <main+0x82e>
	  }
	  else{
	  	receiver_input_channel_2 = 1500;
 800212e:	4b52      	ldr	r3, [pc, #328]	; (8002278 <main+0x970>)
 8002130:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002134:	601a      	str	r2, [r3, #0]
	  }

	  pid_pitch_setpoint -= pitch_level_adjust;
 8002136:	4b4f      	ldr	r3, [pc, #316]	; (8002274 <main+0x96c>)
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	4b4f      	ldr	r3, [pc, #316]	; (800227c <main+0x974>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002146:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <main+0x96c>)
 8002148:	edc3 7a00 	vstr	s15, [r3]
	  pid_pitch_setpoint /= turning_speed;
 800214c:	4b49      	ldr	r3, [pc, #292]	; (8002274 <main+0x96c>)
 800214e:	edd3 6a00 	vldr	s13, [r3]
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <main+0x968>)
 8002154:	ed93 7a00 	vldr	s14, [r3]
 8002158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800215c:	4b45      	ldr	r3, [pc, #276]	; (8002274 <main+0x96c>)
 800215e:	edc3 7a00 	vstr	s15, [r3]


	  pid_yaw_setpoint =0;
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <main+0x978>)
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
	  if ( receiver_input_channel_3 > 1050 ){
 800216a:	4b46      	ldr	r3, [pc, #280]	; (8002284 <main+0x97c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f240 421a 	movw	r2, #1050	; 0x41a
 8002172:	4293      	cmp	r3, r2
 8002174:	dd2d      	ble.n	80021d2 <main+0x8ca>
		  if ( receiver_input_channel_4 > 1508 ) {
 8002176:	4b44      	ldr	r3, [pc, #272]	; (8002288 <main+0x980>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800217e:	4293      	cmp	r3, r2
 8002180:	dd10      	ble.n	80021a4 <main+0x89c>
			  pid_yaw_setpoint = ( receiver_input_channel_4 - 1508 ) / turning_speed;
 8002182:	4b41      	ldr	r3, [pc, #260]	; (8002288 <main+0x980>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <main+0x968>)
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800219c:	4b38      	ldr	r3, [pc, #224]	; (8002280 <main+0x978>)
 800219e:	edc3 7a00 	vstr	s15, [r3]
 80021a2:	e01a      	b.n	80021da <main+0x8d2>
		  }
		  else if ( receiver_input_channel_4 < 1492 ){
 80021a4:	4b38      	ldr	r3, [pc, #224]	; (8002288 <main+0x980>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f240 52d3 	movw	r2, #1491	; 0x5d3
 80021ac:	4293      	cmp	r3, r2
 80021ae:	dc14      	bgt.n	80021da <main+0x8d2>
			  pid_yaw_setpoint = ( receiver_input_channel_4 - 1492 ) / turning_speed;
 80021b0:	4b35      	ldr	r3, [pc, #212]	; (8002288 <main+0x980>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <main+0x968>)
 80021c2:	ed93 7a00 	vldr	s14, [r3]
 80021c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ca:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <main+0x978>)
 80021cc:	edc3 7a00 	vstr	s15, [r3]
 80021d0:	e003      	b.n	80021da <main+0x8d2>
		  }
	  }
	  else{
	  	  receiver_input_channel_4 = 1500;
 80021d2:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <main+0x980>)
 80021d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80021d8:	601a      	str	r2, [r3, #0]
	  }

	  pid_error_temp = gyro_roll_input - pid_roll_setpoint;
 80021da:	4b2c      	ldr	r3, [pc, #176]	; (800228c <main+0x984>)
 80021dc:	ed93 7a00 	vldr	s14, [r3]
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <main+0x95c>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <main+0x988>)
 80021ec:	edc3 7a00 	vstr	s15, [r3]
	  pid_i_mem_roll += pid_i_gain_roll * pid_error_temp;
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <main+0x98c>)
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <main+0x988>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <main+0x93c>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <main+0x93c>)
 800220c:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_i_mem_roll > pid_max_roll ) pid_i_mem_roll = pid_max_roll;
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <main+0x990>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <main+0x93c>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222a:	d537      	bpl.n	800229c <main+0x994>
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <main+0x990>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <main+0x93c>)
 800223a:	edc3 7a00 	vstr	s15, [r3]
 800223e:	e046      	b.n	80022ce <main+0x9c6>
 8002240:	40020400 	.word	0x40020400
 8002244:	20000390 	.word	0x20000390
 8002248:	2000039c 	.word	0x2000039c
 800224c:	20000394 	.word	0x20000394
 8002250:	200003a0 	.word	0x200003a0
 8002254:	20000398 	.word	0x20000398
 8002258:	200003a4 	.word	0x200003a4
 800225c:	200003b8 	.word	0x200003b8
 8002260:	20000320 	.word	0x20000320
 8002264:	20000380 	.word	0x20000380
 8002268:	2000030c 	.word	0x2000030c
 800226c:	2000036c 	.word	0x2000036c
 8002270:	20000044 	.word	0x20000044
 8002274:	20000384 	.word	0x20000384
 8002278:	20000310 	.word	0x20000310
 800227c:	20000370 	.word	0x20000370
 8002280:	20000388 	.word	0x20000388
 8002284:	20000314 	.word	0x20000314
 8002288:	20000318 	.word	0x20000318
 800228c:	20000374 	.word	0x20000374
 8002290:	200003a8 	.word	0x200003a8
 8002294:	20000004 	.word	0x20000004
 8002298:	2000001c 	.word	0x2000001c
	  else if ( pid_i_mem_roll < pid_max_roll * -1 ) pid_i_mem_roll = pid_max_roll * -1;
 800229c:	4b9f      	ldr	r3, [pc, #636]	; (800251c <main+0xc14>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	425b      	negs	r3, r3
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022aa:	4b9d      	ldr	r3, [pc, #628]	; (8002520 <main+0xc18>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	dd09      	ble.n	80022ce <main+0x9c6>
 80022ba:	4b98      	ldr	r3, [pc, #608]	; (800251c <main+0xc14>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	425b      	negs	r3, r3
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c8:	4b95      	ldr	r3, [pc, #596]	; (8002520 <main+0xc18>)
 80022ca:	edc3 7a00 	vstr	s15, [r3]

	  pid_roll_output = ( pid_p_gain_roll * pid_error_temp ) + pid_i_mem_roll + ( pid_d_gain_roll * ( pid_error_temp - pid_last_roll_d_error));
 80022ce:	4b95      	ldr	r3, [pc, #596]	; (8002524 <main+0xc1c>)
 80022d0:	ed93 7a00 	vldr	s14, [r3]
 80022d4:	4b94      	ldr	r3, [pc, #592]	; (8002528 <main+0xc20>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022de:	4b90      	ldr	r3, [pc, #576]	; (8002520 <main+0xc18>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e8:	4b8f      	ldr	r3, [pc, #572]	; (8002528 <main+0xc20>)
 80022ea:	edd3 6a00 	vldr	s13, [r3]
 80022ee:	4b8f      	ldr	r3, [pc, #572]	; (800252c <main+0xc24>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022f8:	4b8d      	ldr	r3, [pc, #564]	; (8002530 <main+0xc28>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002306:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <main+0xc2c>)
 8002308:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_roll_output > pid_max_roll ) pid_roll_output = pid_max_roll;
 800230c:	4b83      	ldr	r3, [pc, #524]	; (800251c <main+0xc14>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002318:	4b86      	ldr	r3, [pc, #536]	; (8002534 <main+0xc2c>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	d509      	bpl.n	800233c <main+0xa34>
 8002328:	4b7c      	ldr	r3, [pc, #496]	; (800251c <main+0xc14>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002334:	4b7f      	ldr	r3, [pc, #508]	; (8002534 <main+0xc2c>)
 8002336:	edc3 7a00 	vstr	s15, [r3]
 800233a:	e018      	b.n	800236e <main+0xa66>
	  else if ( pid_roll_output < pid_max_roll * -1) pid_roll_output = pid_max_roll * -1;
 800233c:	4b77      	ldr	r3, [pc, #476]	; (800251c <main+0xc14>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	425b      	negs	r3, r3
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800234a:	4b7a      	ldr	r3, [pc, #488]	; (8002534 <main+0xc2c>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	dd09      	ble.n	800236e <main+0xa66>
 800235a:	4b70      	ldr	r3, [pc, #448]	; (800251c <main+0xc14>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	425b      	negs	r3, r3
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002368:	4b72      	ldr	r3, [pc, #456]	; (8002534 <main+0xc2c>)
 800236a:	edc3 7a00 	vstr	s15, [r3]

	  pid_last_roll_d_error = pid_error_temp;
 800236e:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <main+0xc20>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6e      	ldr	r2, [pc, #440]	; (800252c <main+0xc24>)
 8002374:	6013      	str	r3, [r2, #0]


	  pid_error_temp = gyro_pitch_input - pid_pitch_setpoint;
 8002376:	4b70      	ldr	r3, [pc, #448]	; (8002538 <main+0xc30>)
 8002378:	ed93 7a00 	vldr	s14, [r3]
 800237c:	4b6f      	ldr	r3, [pc, #444]	; (800253c <main+0xc34>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002386:	4b68      	ldr	r3, [pc, #416]	; (8002528 <main+0xc20>)
 8002388:	edc3 7a00 	vstr	s15, [r3]
	  pid_i_mem_pitch += pid_i_gain_pitch * pid_error_temp;
 800238c:	4b6c      	ldr	r3, [pc, #432]	; (8002540 <main+0xc38>)
 800238e:	ed93 7a00 	vldr	s14, [r3]
 8002392:	4b65      	ldr	r3, [pc, #404]	; (8002528 <main+0xc20>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239c:	4b69      	ldr	r3, [pc, #420]	; (8002544 <main+0xc3c>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a6:	4b67      	ldr	r3, [pc, #412]	; (8002544 <main+0xc3c>)
 80023a8:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_i_mem_pitch > pid_max_pitch ) pid_i_mem_pitch = pid_max_pitch;
 80023ac:	4b66      	ldr	r3, [pc, #408]	; (8002548 <main+0xc40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b8:	4b62      	ldr	r3, [pc, #392]	; (8002544 <main+0xc3c>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	d509      	bpl.n	80023dc <main+0xad4>
 80023c8:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <main+0xc40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d4:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <main+0xc3c>)
 80023d6:	edc3 7a00 	vstr	s15, [r3]
 80023da:	e018      	b.n	800240e <main+0xb06>
	  else if ( pid_i_mem_pitch < pid_max_pitch * -1 ) pid_i_mem_pitch = pid_max_pitch * -1;
 80023dc:	4b5a      	ldr	r3, [pc, #360]	; (8002548 <main+0xc40>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	425b      	negs	r3, r3
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ea:	4b56      	ldr	r3, [pc, #344]	; (8002544 <main+0xc3c>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f8:	dd09      	ble.n	800240e <main+0xb06>
 80023fa:	4b53      	ldr	r3, [pc, #332]	; (8002548 <main+0xc40>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	425b      	negs	r3, r3
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002408:	4b4e      	ldr	r3, [pc, #312]	; (8002544 <main+0xc3c>)
 800240a:	edc3 7a00 	vstr	s15, [r3]

	  pid_pitch_output = ( pid_p_gain_pitch * pid_error_temp ) + pid_i_mem_pitch + ( pid_d_gain_pitch * ( pid_error_temp - pid_last_pitch_d_eroor));
 800240e:	4b4f      	ldr	r3, [pc, #316]	; (800254c <main+0xc44>)
 8002410:	ed93 7a00 	vldr	s14, [r3]
 8002414:	4b44      	ldr	r3, [pc, #272]	; (8002528 <main+0xc20>)
 8002416:	edd3 7a00 	vldr	s15, [r3]
 800241a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241e:	4b49      	ldr	r3, [pc, #292]	; (8002544 <main+0xc3c>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002428:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <main+0xc20>)
 800242a:	edd3 6a00 	vldr	s13, [r3]
 800242e:	4b48      	ldr	r3, [pc, #288]	; (8002550 <main+0xc48>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <main+0xc4c>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002446:	4b44      	ldr	r3, [pc, #272]	; (8002558 <main+0xc50>)
 8002448:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_pitch_output > pid_max_pitch ) pid_pitch_output = pid_max_pitch;
 800244c:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <main+0xc40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <main+0xc50>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002466:	d509      	bpl.n	800247c <main+0xb74>
 8002468:	4b37      	ldr	r3, [pc, #220]	; (8002548 <main+0xc40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002474:	4b38      	ldr	r3, [pc, #224]	; (8002558 <main+0xc50>)
 8002476:	edc3 7a00 	vstr	s15, [r3]
 800247a:	e018      	b.n	80024ae <main+0xba6>
	  else if ( pid_pitch_output < pid_max_pitch * -1 ) pid_pitch_output = pid_max_pitch * -1;
 800247c:	4b32      	ldr	r3, [pc, #200]	; (8002548 <main+0xc40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	425b      	negs	r3, r3
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800248a:	4b33      	ldr	r3, [pc, #204]	; (8002558 <main+0xc50>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002498:	dd09      	ble.n	80024ae <main+0xba6>
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <main+0xc40>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	425b      	negs	r3, r3
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <main+0xc50>)
 80024aa:	edc3 7a00 	vstr	s15, [r3]

	  pid_last_pitch_d_eroor = pid_error_temp;
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <main+0xc20>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a27      	ldr	r2, [pc, #156]	; (8002550 <main+0xc48>)
 80024b4:	6013      	str	r3, [r2, #0]


	  pid_error_temp = gyro_yaw_input - pid_yaw_setpoint;
 80024b6:	4b29      	ldr	r3, [pc, #164]	; (800255c <main+0xc54>)
 80024b8:	ed93 7a00 	vldr	s14, [r3]
 80024bc:	4b28      	ldr	r3, [pc, #160]	; (8002560 <main+0xc58>)
 80024be:	edd3 7a00 	vldr	s15, [r3]
 80024c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <main+0xc20>)
 80024c8:	edc3 7a00 	vstr	s15, [r3]
	  pid_i_mem_yaw += pid_p_gain_yaw * pid_error_temp;
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <main+0xc5c>)
 80024ce:	ed93 7a00 	vldr	s14, [r3]
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <main+0xc20>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024dc:	4b22      	ldr	r3, [pc, #136]	; (8002568 <main+0xc60>)
 80024de:	edd3 7a00 	vldr	s15, [r3]
 80024e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <main+0xc60>)
 80024e8:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_i_mem_yaw > pid_max_yaw ) pid_i_mem_yaw = pid_max_yaw;
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <main+0xc64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f8:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <main+0xc60>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002506:	d533      	bpl.n	8002570 <main+0xc68>
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <main+0xc64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <main+0xc60>)
 8002516:	edc3 7a00 	vstr	s15, [r3]
 800251a:	e042      	b.n	80025a2 <main+0xc9a>
 800251c:	2000001c 	.word	0x2000001c
 8002520:	20000390 	.word	0x20000390
 8002524:	20000000 	.word	0x20000000
 8002528:	200003a8 	.word	0x200003a8
 800252c:	2000039c 	.word	0x2000039c
 8002530:	20000008 	.word	0x20000008
 8002534:	200003ac 	.word	0x200003ac
 8002538:	20000378 	.word	0x20000378
 800253c:	20000384 	.word	0x20000384
 8002540:	20000010 	.word	0x20000010
 8002544:	20000394 	.word	0x20000394
 8002548:	20000020 	.word	0x20000020
 800254c:	2000000c 	.word	0x2000000c
 8002550:	200003a0 	.word	0x200003a0
 8002554:	20000014 	.word	0x20000014
 8002558:	200003b0 	.word	0x200003b0
 800255c:	2000037c 	.word	0x2000037c
 8002560:	20000388 	.word	0x20000388
 8002564:	20000018 	.word	0x20000018
 8002568:	20000398 	.word	0x20000398
 800256c:	20000024 	.word	0x20000024
	  else if ( pid_i_mem_yaw < pid_max_yaw * -1 ) pid_i_mem_yaw = pid_max_yaw * -1;
 8002570:	4b9d      	ldr	r3, [pc, #628]	; (80027e8 <main+0xee0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	425b      	negs	r3, r3
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257e:	4b9b      	ldr	r3, [pc, #620]	; (80027ec <main+0xee4>)
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258c:	dd09      	ble.n	80025a2 <main+0xc9a>
 800258e:	4b96      	ldr	r3, [pc, #600]	; (80027e8 <main+0xee0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	425b      	negs	r3, r3
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800259c:	4b93      	ldr	r3, [pc, #588]	; (80027ec <main+0xee4>)
 800259e:	edc3 7a00 	vstr	s15, [r3]

	  pid_yaw_output = ( pid_p_gain_yaw * pid_error_temp ) + pid_i_mem_yaw + ( pid_d_gain_yaw * ( pid_error_temp - pid_last_yaw_d_error ));
 80025a2:	4b93      	ldr	r3, [pc, #588]	; (80027f0 <main+0xee8>)
 80025a4:	ed93 7a00 	vldr	s14, [r3]
 80025a8:	4b92      	ldr	r3, [pc, #584]	; (80027f4 <main+0xeec>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b2:	4b8e      	ldr	r3, [pc, #568]	; (80027ec <main+0xee4>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025bc:	4b8d      	ldr	r3, [pc, #564]	; (80027f4 <main+0xeec>)
 80025be:	edd3 6a00 	vldr	s13, [r3]
 80025c2:	4b8d      	ldr	r3, [pc, #564]	; (80027f8 <main+0xef0>)
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80025cc:	4b8b      	ldr	r3, [pc, #556]	; (80027fc <main+0xef4>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <main+0xef8>)
 80025dc:	edc3 7a00 	vstr	s15, [r3]

	  if ( pid_yaw_output > pid_max_yaw ) pid_yaw_output = pid_max_yaw;
 80025e0:	4b81      	ldr	r3, [pc, #516]	; (80027e8 <main+0xee0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ec:	4b84      	ldr	r3, [pc, #528]	; (8002800 <main+0xef8>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fa:	d509      	bpl.n	8002610 <main+0xd08>
 80025fc:	4b7a      	ldr	r3, [pc, #488]	; (80027e8 <main+0xee0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002608:	4b7d      	ldr	r3, [pc, #500]	; (8002800 <main+0xef8>)
 800260a:	edc3 7a00 	vstr	s15, [r3]
 800260e:	e018      	b.n	8002642 <main+0xd3a>
	  else if ( pid_yaw_output < pid_max_yaw * -1 ) pid_yaw_output = pid_max_yaw * -1;
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <main+0xee0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	425b      	negs	r3, r3
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800261e:	4b78      	ldr	r3, [pc, #480]	; (8002800 <main+0xef8>)
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262c:	dd09      	ble.n	8002642 <main+0xd3a>
 800262e:	4b6e      	ldr	r3, [pc, #440]	; (80027e8 <main+0xee0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	425b      	negs	r3, r3
 8002634:	ee07 3a90 	vmov	s15, r3
 8002638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800263c:	4b70      	ldr	r3, [pc, #448]	; (8002800 <main+0xef8>)
 800263e:	edc3 7a00 	vstr	s15, [r3]

	  pid_last_yaw_d_error = pid_error_temp;
 8002642:	4b6c      	ldr	r3, [pc, #432]	; (80027f4 <main+0xeec>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6c      	ldr	r2, [pc, #432]	; (80027f8 <main+0xef0>)
 8002648:	6013      	str	r3, [r2, #0]

	  throttle = receiver_input_channel_3;
 800264a:	4b6e      	ldr	r3, [pc, #440]	; (8002804 <main+0xefc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6e      	ldr	r2, [pc, #440]	; (8002808 <main+0xf00>)
 8002650:	6013      	str	r3, [r2, #0]


	  if ( start == 2 ){
 8002652:	4b6e      	ldr	r3, [pc, #440]	; (800280c <main+0xf04>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b02      	cmp	r3, #2
 8002658:	f040 80ea 	bne.w	8002830 <main+0xf28>
		  if ( throttle > 1800 ) throttle = 1800;
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <main+0xf00>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002664:	dd03      	ble.n	800266e <main+0xd66>
 8002666:	4b68      	ldr	r3, [pc, #416]	; (8002808 <main+0xf00>)
 8002668:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800266c:	601a      	str	r2, [r3, #0]

		  esc_1 = throttle - pid_pitch_output + pid_roll_output - pid_yaw_output;
 800266e:	4b66      	ldr	r3, [pc, #408]	; (8002808 <main+0xf00>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800267a:	4b65      	ldr	r3, [pc, #404]	; (8002810 <main+0xf08>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002684:	4b63      	ldr	r3, [pc, #396]	; (8002814 <main+0xf0c>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800268e:	4b5c      	ldr	r3, [pc, #368]	; (8002800 <main+0xef8>)
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269c:	ee17 2a90 	vmov	r2, s15
 80026a0:	4b5d      	ldr	r3, [pc, #372]	; (8002818 <main+0xf10>)
 80026a2:	601a      	str	r2, [r3, #0]
		  esc_2 = throttle + pid_pitch_output + pid_roll_output + pid_yaw_output;
 80026a4:	4b58      	ldr	r3, [pc, #352]	; (8002808 <main+0xf00>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026b0:	4b57      	ldr	r3, [pc, #348]	; (8002810 <main+0xf08>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ba:	4b56      	ldr	r3, [pc, #344]	; (8002814 <main+0xf0c>)
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c4:	4b4e      	ldr	r3, [pc, #312]	; (8002800 <main+0xef8>)
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d2:	ee17 2a90 	vmov	r2, s15
 80026d6:	4b51      	ldr	r3, [pc, #324]	; (800281c <main+0xf14>)
 80026d8:	601a      	str	r2, [r3, #0]
		  esc_3 = throttle + pid_pitch_output - pid_roll_output - pid_yaw_output;
 80026da:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <main+0xf00>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <main+0xf08>)
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	4b48      	ldr	r3, [pc, #288]	; (8002814 <main+0xf0c>)
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026fa:	4b41      	ldr	r3, [pc, #260]	; (8002800 <main+0xef8>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002708:	ee17 2a90 	vmov	r2, s15
 800270c:	4b44      	ldr	r3, [pc, #272]	; (8002820 <main+0xf18>)
 800270e:	601a      	str	r2, [r3, #0]
		  esc_4 = throttle - pid_pitch_output - pid_roll_output + pid_yaw_output;
 8002710:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <main+0xf00>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	ee07 3a90 	vmov	s15, r3
 8002718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271c:	4b3c      	ldr	r3, [pc, #240]	; (8002810 <main+0xf08>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002726:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <main+0xf0c>)
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002730:	4b33      	ldr	r3, [pc, #204]	; (8002800 <main+0xef8>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800273e:	ee17 2a90 	vmov	r2, s15
 8002742:	4b38      	ldr	r3, [pc, #224]	; (8002824 <main+0xf1c>)
 8002744:	601a      	str	r2, [r3, #0]

		  if ( esc_1 < min_throthle ) esc_1 = min_throthle;
 8002746:	4b34      	ldr	r3, [pc, #208]	; (8002818 <main+0xf10>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <main+0xf20>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	da03      	bge.n	800275a <main+0xe52>
 8002752:	4b35      	ldr	r3, [pc, #212]	; (8002828 <main+0xf20>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a30      	ldr	r2, [pc, #192]	; (8002818 <main+0xf10>)
 8002758:	6013      	str	r3, [r2, #0]
		  if ( esc_2 < min_throthle ) esc_2 = min_throthle;
 800275a:	4b30      	ldr	r3, [pc, #192]	; (800281c <main+0xf14>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b32      	ldr	r3, [pc, #200]	; (8002828 <main+0xf20>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	da03      	bge.n	800276e <main+0xe66>
 8002766:	4b30      	ldr	r3, [pc, #192]	; (8002828 <main+0xf20>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2c      	ldr	r2, [pc, #176]	; (800281c <main+0xf14>)
 800276c:	6013      	str	r3, [r2, #0]
		  if ( esc_3 < min_throthle ) esc_3 = min_throthle;
 800276e:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <main+0xf18>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <main+0xf20>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	da03      	bge.n	8002782 <main+0xe7a>
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <main+0xf20>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a28      	ldr	r2, [pc, #160]	; (8002820 <main+0xf18>)
 8002780:	6013      	str	r3, [r2, #0]
		  if ( esc_4 < min_throthle ) esc_4 = min_throthle;
 8002782:	4b28      	ldr	r3, [pc, #160]	; (8002824 <main+0xf1c>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4b28      	ldr	r3, [pc, #160]	; (8002828 <main+0xf20>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	da03      	bge.n	8002796 <main+0xe8e>
 800278e:	4b26      	ldr	r3, [pc, #152]	; (8002828 <main+0xf20>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a24      	ldr	r2, [pc, #144]	; (8002824 <main+0xf1c>)
 8002794:	6013      	str	r3, [r2, #0]

		  if ( esc_1 > max_throthle ) esc_1 = max_throthle;
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <main+0xf10>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <main+0xf24>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	dd03      	ble.n	80027aa <main+0xea2>
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <main+0xf24>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <main+0xf10>)
 80027a8:	6013      	str	r3, [r2, #0]
		  if ( esc_2 > max_throthle ) esc_2 = max_throthle;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <main+0xf14>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <main+0xf24>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	dd03      	ble.n	80027be <main+0xeb6>
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <main+0xf24>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a18      	ldr	r2, [pc, #96]	; (800281c <main+0xf14>)
 80027bc:	6013      	str	r3, [r2, #0]
		  if ( esc_3 > max_throthle ) esc_3 = max_throthle;
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <main+0xf18>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <main+0xf24>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	dd03      	ble.n	80027d2 <main+0xeca>
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <main+0xf24>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a14      	ldr	r2, [pc, #80]	; (8002820 <main+0xf18>)
 80027d0:	6013      	str	r3, [r2, #0]
		  if ( esc_4 > max_throthle ) esc_4 = max_throthle;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <main+0xf1c>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <main+0xf24>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	dd38      	ble.n	8002850 <main+0xf48>
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <main+0xf24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a10      	ldr	r2, [pc, #64]	; (8002824 <main+0xf1c>)
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e033      	b.n	8002850 <main+0xf48>
 80027e8:	20000024 	.word	0x20000024
 80027ec:	20000398 	.word	0x20000398
 80027f0:	20000018 	.word	0x20000018
 80027f4:	200003a8 	.word	0x200003a8
 80027f8:	200003a4 	.word	0x200003a4
 80027fc:	2000038c 	.word	0x2000038c
 8002800:	200003b4 	.word	0x200003b4
 8002804:	20000314 	.word	0x20000314
 8002808:	20000324 	.word	0x20000324
 800280c:	200003b8 	.word	0x200003b8
 8002810:	200003b0 	.word	0x200003b0
 8002814:	200003ac 	.word	0x200003ac
 8002818:	20000028 	.word	0x20000028
 800281c:	2000002c 	.word	0x2000002c
 8002820:	20000030 	.word	0x20000030
 8002824:	20000034 	.word	0x20000034
 8002828:	20000038 	.word	0x20000038
 800282c:	2000003c 	.word	0x2000003c


	  }else{
		  esc_1 = disable_motor;
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <main+0xf94>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <main+0xf98>)
 8002836:	6013      	str	r3, [r2, #0]
		  esc_2 = disable_motor;
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <main+0xf94>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <main+0xf9c>)
 800283e:	6013      	str	r3, [r2, #0]
		  esc_3 = disable_motor;
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <main+0xf94>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <main+0xfa0>)
 8002846:	6013      	str	r3, [r2, #0]
		  esc_4 = disable_motor;
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <main+0xf94>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a17      	ldr	r2, [pc, #92]	; (80028ac <main+0xfa4>)
 800284e:	6013      	str	r3, [r2, #0]
	  }

	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,esc_1);
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <main+0xf98>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <main+0xfa8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_2,esc_2);
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <main+0xf9c>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <main+0xfa8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,esc_3);
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <main+0xfa0>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <main+0xfa8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,esc_4);
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <main+0xfa4>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <main+0xfa8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40

	//	  if ( __HAL_TIM_GET_COUNTER(&htim13) - loop_timer > 4070 ){
	//		  HAL_GPIO_TogglePin(led_status_GPIO_Port, led_status_Pin);
	//	  }

	  while ( __HAL_TIM_GET_COUNTER(&htim10) - loop_timer < 4000 );
 8002878:	bf00      	nop
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <main+0xfac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <main+0xfb0>)
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800288a:	d3f6      	bcc.n	800287a <main+0xf72>
	  loop_timer = __HAL_TIM_GET_COUNTER(&htim10);
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <main+0xfac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	461a      	mov	r2, r3
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <main+0xfb0>)
 8002896:	601a      	str	r2, [r3, #0]
	  receiver_input_channel_1 = ch[0];
 8002898:	f7ff b8a9 	b.w	80019ee <main+0xe6>
 800289c:	20000040 	.word	0x20000040
 80028a0:	20000028 	.word	0x20000028
 80028a4:	2000002c 	.word	0x2000002c
 80028a8:	20000030 	.word	0x20000030
 80028ac:	20000034 	.word	0x20000034
 80028b0:	20000134 	.word	0x20000134
 80028b4:	2000017c 	.word	0x2000017c
 80028b8:	2000033c 	.word	0x2000033c

080028bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b094      	sub	sp, #80	; 0x50
 80028c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028c2:	f107 0320 	add.w	r3, r7, #32
 80028c6:	2230      	movs	r2, #48	; 0x30
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f004 fea4 	bl	8007618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <SystemClock_Config+0xc8>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	4a26      	ldr	r2, [pc, #152]	; (8002984 <SystemClock_Config+0xc8>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	; 0x40
 80028f0:	4b24      	ldr	r3, [pc, #144]	; (8002984 <SystemClock_Config+0xc8>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	4b21      	ldr	r3, [pc, #132]	; (8002988 <SystemClock_Config+0xcc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a20      	ldr	r2, [pc, #128]	; (8002988 <SystemClock_Config+0xcc>)
 8002906:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <SystemClock_Config+0xcc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002918:	2301      	movs	r3, #1
 800291a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800291c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002922:	2302      	movs	r3, #2
 8002924:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002926:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800292a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800292c:	230c      	movs	r3, #12
 800292e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002930:	2360      	movs	r3, #96	; 0x60
 8002932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002934:	2302      	movs	r3, #2
 8002936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002938:	2304      	movs	r3, #4
 800293a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800293c:	f107 0320 	add.w	r3, r7, #32
 8002940:	4618      	mov	r0, r3
 8002942:	f002 fb0d 	bl	8004f60 <HAL_RCC_OscConfig>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800294c:	f000 fa40 	bl	8002dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002950:	230f      	movs	r3, #15
 8002952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002954:	2302      	movs	r3, #2
 8002956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800295c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002966:	f107 030c 	add.w	r3, r7, #12
 800296a:	2103      	movs	r1, #3
 800296c:	4618      	mov	r0, r3
 800296e:	f002 fd6f 	bl	8005450 <HAL_RCC_ClockConfig>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002978:	f000 fa2a 	bl	8002dd0 <Error_Handler>
  }
}
 800297c:	bf00      	nop
 800297e:	3750      	adds	r7, #80	; 0x50
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	40007000 	.word	0x40007000

0800298c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <MX_I2C1_Init+0x50>)
 8002992:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <MX_I2C1_Init+0x54>)
 8002994:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MX_I2C1_Init+0x50>)
 8002998:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <MX_I2C1_Init+0x58>)
 800299a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <MX_I2C1_Init+0x50>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <MX_I2C1_Init+0x50>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <MX_I2C1_Init+0x50>)
 80029aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <MX_I2C1_Init+0x50>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <MX_I2C1_Init+0x50>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <MX_I2C1_Init+0x50>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <MX_I2C1_Init+0x50>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029c8:	4804      	ldr	r0, [pc, #16]	; (80029dc <MX_I2C1_Init+0x50>)
 80029ca:	f001 fb09 	bl	8003fe0 <HAL_I2C_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029d4:	f000 f9fc 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200000e0 	.word	0x200000e0
 80029e0:	40005400 	.word	0x40005400
 80029e4:	00061a80 	.word	0x00061a80

080029e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fc:	f107 0320 	add.w	r3, r7, #32
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
 8002a14:	615a      	str	r2, [r3, #20]
 8002a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a18:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002a1a:	4a3e      	ldr	r2, [pc, #248]	; (8002b14 <MX_TIM5_Init+0x12c>)
 8002a1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002a20:	2263      	movs	r2, #99	; 0x63
 8002a22:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8002a2a:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002a2c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002a30:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a32:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a3e:	4834      	ldr	r0, [pc, #208]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002a40:	f002 fee6 	bl	8005810 <HAL_TIM_Base_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002a4a:	f000 f9c1 	bl	8002dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a58:	4619      	mov	r1, r3
 8002a5a:	482d      	ldr	r0, [pc, #180]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002a5c:	f003 fa56 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002a66:	f000 f9b3 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002a6a:	4829      	ldr	r0, [pc, #164]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002a6c:	f002 ff7a 	bl	8005964 <HAL_TIM_PWM_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002a76:	f000 f9ab 	bl	8002dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a82:	f107 0320 	add.w	r3, r7, #32
 8002a86:	4619      	mov	r1, r3
 8002a88:	4821      	ldr	r0, [pc, #132]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002a8a:	f003 fe05 	bl	8006698 <HAL_TIMEx_MasterConfigSynchronization>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002a94:	f000 f99c 	bl	8002dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a98:	2360      	movs	r3, #96	; 0x60
 8002a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2200      	movs	r2, #0
 8002aac:	4619      	mov	r1, r3
 8002aae:	4818      	ldr	r0, [pc, #96]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002ab0:	f003 f96a 	bl	8005d88 <HAL_TIM_PWM_ConfigChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002aba:	f000 f989 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4812      	ldr	r0, [pc, #72]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002ac6:	f003 f95f 	bl	8005d88 <HAL_TIM_PWM_ConfigChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002ad0:	f000 f97e 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	2208      	movs	r2, #8
 8002ad8:	4619      	mov	r1, r3
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002adc:	f003 f954 	bl	8005d88 <HAL_TIM_PWM_ConfigChannel>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 8002ae6:	f000 f973 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	220c      	movs	r2, #12
 8002aee:	4619      	mov	r1, r3
 8002af0:	4807      	ldr	r0, [pc, #28]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002af2:	f003 f949 	bl	8005d88 <HAL_TIM_PWM_ConfigChannel>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 8002afc:	f000 f968 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002b00:	4803      	ldr	r0, [pc, #12]	; (8002b10 <MX_TIM5_Init+0x128>)
 8002b02:	f000 fa2f 	bl	8002f64 <HAL_TIM_MspPostInit>

}
 8002b06:	bf00      	nop
 8002b08:	3738      	adds	r7, #56	; 0x38
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000134 	.word	0x20000134
 8002b14:	40000c00 	.word	0x40000c00

08002b18 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_TIM10_Init+0x40>)
 8002b1e:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <MX_TIM10_Init+0x44>)
 8002b20:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <MX_TIM10_Init+0x40>)
 8002b24:	2263      	movs	r2, #99	; 0x63
 8002b26:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <MX_TIM10_Init+0x40>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <MX_TIM10_Init+0x40>)
 8002b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b34:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <MX_TIM10_Init+0x40>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_TIM10_Init+0x40>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_TIM10_Init+0x40>)
 8002b44:	f002 fe64 	bl	8005810 <HAL_TIM_Base_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002b4e:	f000 f93f 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000017c 	.word	0x2000017c
 8002b5c:	40014400 	.word	0x40014400

08002b60 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_TIM11_Init+0x40>)
 8002b66:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <MX_TIM11_Init+0x44>)
 8002b68:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <MX_TIM11_Init+0x40>)
 8002b6c:	2263      	movs	r2, #99	; 0x63
 8002b6e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <MX_TIM11_Init+0x40>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xffff;
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <MX_TIM11_Init+0x40>)
 8002b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b7c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <MX_TIM11_Init+0x40>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_TIM11_Init+0x40>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <MX_TIM11_Init+0x40>)
 8002b8c:	f002 fe40 	bl	8005810 <HAL_TIM_Base_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002b96:	f000 f91b 	bl	8002dd0 <Error_Handler>
  /* USER CODE BEGIN TIM11_Init 2 */


  /* USER CODE END TIM11_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200001c4 	.word	0x200001c4
 8002ba4:	40014800 	.word	0x40014800

08002ba8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <MX_USART1_UART_Init+0x50>)
 8002bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bce:	220c      	movs	r2, #12
 8002bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bde:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002be0:	f003 fddc 	bl	800679c <HAL_UART_Init>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bea:	f000 f8f1 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000020c 	.word	0x2000020c
 8002bf8:	40011000 	.word	0x40011000

08002bfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <MX_DMA_Init+0x3c>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <MX_DMA_Init+0x3c>)
 8002c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <MX_DMA_Init+0x3c>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	203a      	movs	r0, #58	; 0x3a
 8002c24:	f000 fc59 	bl	80034da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002c28:	203a      	movs	r0, #58	; 0x3a
 8002c2a:	f000 fc72 	bl	8003512 <HAL_NVIC_EnableIRQ>

}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800

08002c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
 8002c50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a3a      	ldr	r2, [pc, #232]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002c5c:	f043 0304 	orr.w	r3, r3, #4
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b38      	ldr	r3, [pc, #224]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a33      	ldr	r2, [pc, #204]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <MX_GPIO_Init+0x108>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_cal_GPIO_Port, led_cal_Pin, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cc8:	481f      	ldr	r0, [pc, #124]	; (8002d48 <MX_GPIO_Init+0x10c>)
 8002cca:	f001 f93d 	bl	8003f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_arm_Pin|led_disarm_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2103      	movs	r1, #3
 8002cd2:	481e      	ldr	r0, [pc, #120]	; (8002d4c <MX_GPIO_Init+0x110>)
 8002cd4:	f001 f938 	bl	8003f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_cal_Pin */
  GPIO_InitStruct.Pin = led_cal_Pin;
 8002cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_cal_GPIO_Port, &GPIO_InitStruct);
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4815      	ldr	r0, [pc, #84]	; (8002d48 <MX_GPIO_Init+0x10c>)
 8002cf2:	f000 ffa5 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_Pin */
  GPIO_InitStruct.Pin = RC_Pin;
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_GPIO_Port, &GPIO_InitStruct);
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4811      	ldr	r0, [pc, #68]	; (8002d50 <MX_GPIO_Init+0x114>)
 8002d0c:	f000 ff98 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_arm_Pin led_disarm_Pin */
  GPIO_InitStruct.Pin = led_arm_Pin|led_disarm_Pin;
 8002d10:	2303      	movs	r3, #3
 8002d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4619      	mov	r1, r3
 8002d26:	4809      	ldr	r0, [pc, #36]	; (8002d4c <MX_GPIO_Init+0x110>)
 8002d28:	f000 ff8a 	bl	8003c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	200a      	movs	r0, #10
 8002d32:	f000 fbd2 	bl	80034da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002d36:	200a      	movs	r0, #10
 8002d38:	f000 fbeb 	bl	8003512 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d3c:	bf00      	nop
 8002d3e:	3728      	adds	r7, #40	; 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40020000 	.word	0x40020000

08002d54 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]

	if ( GPIO_Pin == RC_Pin){
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d127      	bne.n	8002db4 <HAL_GPIO_EXTI_Callback+0x60>
		tick = __HAL_TIM_GET_COUNTER(&htim11);
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_GPIO_EXTI_Callback+0x70>)
 8002d6e:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim11,0);
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

		if ( tick < 2100){
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_GPIO_EXTI_Callback+0x70>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f640 0233 	movw	r2, #2099	; 0x833
 8002d80:	4293      	cmp	r3, r2
 8002d82:	dc10      	bgt.n	8002da6 <HAL_GPIO_EXTI_Callback+0x52>
			ch[pulse] = tick;
 8002d84:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_GPIO_EXTI_Callback+0x74>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_GPIO_EXTI_Callback+0x70>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0e      	ldr	r2, [pc, #56]	; (8002dcc <HAL_GPIO_EXTI_Callback+0x78>)
 8002d92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			pulse++;
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_GPIO_EXTI_Callback+0x74>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_GPIO_EXTI_Callback+0x74>)
 8002da2:	701a      	strb	r2, [r3, #0]
			pulse =0;
		}

	}

}
 8002da4:	e006      	b.n	8002db4 <HAL_GPIO_EXTI_Callback+0x60>
			__HAL_TIM_SET_COUNTER(&htim11,0);
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
			pulse =0;
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_GPIO_EXTI_Callback+0x74>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	200001c4 	.word	0x200001c4
 8002dc4:	20000304 	.word	0x20000304
 8002dc8:	20000308 	.word	0x20000308
 8002dcc:	200002e4 	.word	0x200002e4

08002dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd4:	b672      	cpsid	i
}
 8002dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <Error_Handler+0x8>
	...

08002ddc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_MspInit+0x4c>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	4a0f      	ldr	r2, [pc, #60]	; (8002e28 <HAL_MspInit+0x4c>)
 8002dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df0:	6453      	str	r3, [r2, #68]	; 0x44
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_MspInit+0x4c>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfa:	607b      	str	r3, [r7, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	603b      	str	r3, [r7, #0]
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_MspInit+0x4c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_MspInit+0x4c>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_MspInit+0x4c>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800

08002e2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a19      	ldr	r2, [pc, #100]	; (8002eb0 <HAL_I2C_MspInit+0x84>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d12b      	bne.n	8002ea6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_I2C_MspInit+0x88>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <HAL_I2C_MspInit+0x88>)
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_I2C_MspInit+0x88>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e6a:	23c0      	movs	r3, #192	; 0xc0
 8002e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e6e:	2312      	movs	r3, #18
 8002e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4619      	mov	r1, r3
 8002e84:	480c      	ldr	r0, [pc, #48]	; (8002eb8 <HAL_I2C_MspInit+0x8c>)
 8002e86:	f000 fedb 	bl	8003c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_I2C_MspInit+0x88>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <HAL_I2C_MspInit+0x88>)
 8002e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_I2C_MspInit+0x88>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3728      	adds	r7, #40	; 0x28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40005400 	.word	0x40005400
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020400 	.word	0x40020400

08002ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_TIM_Base_MspInit+0x98>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d10e      	bne.n	8002eec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <HAL_TIM_Base_MspInit+0x9c>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <HAL_TIM_Base_MspInit+0x9c>)
 8002ed8:	f043 0308 	orr.w	r3, r3, #8
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <HAL_TIM_Base_MspInit+0x9c>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002eea:	e02e      	b.n	8002f4a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_TIM_Base_MspInit+0xa0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10e      	bne.n	8002f14 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_TIM_Base_MspInit+0x9c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <HAL_TIM_Base_MspInit+0x9c>)
 8002f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <HAL_TIM_Base_MspInit+0x9c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
}
 8002f12:	e01a      	b.n	8002f4a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM11)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a11      	ldr	r2, [pc, #68]	; (8002f60 <HAL_TIM_Base_MspInit+0xa4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d115      	bne.n	8002f4a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_TIM_Base_MspInit+0x9c>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <HAL_TIM_Base_MspInit+0x9c>)
 8002f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_TIM_Base_MspInit+0x9c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	201a      	movs	r0, #26
 8002f40:	f000 facb 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002f44:	201a      	movs	r0, #26
 8002f46:	f000 fae4 	bl	8003512 <HAL_NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800

08002f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 030c 	add.w	r3, r7, #12
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_TIM_MspPostInit+0x68>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d11d      	bne.n	8002fc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_TIM_MspPostInit+0x6c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <HAL_TIM_MspPostInit+0x6c>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_TIM_MspPostInit+0x6c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4805      	ldr	r0, [pc, #20]	; (8002fd4 <HAL_TIM_MspPostInit+0x70>)
 8002fbe:	f000 fe3f 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002fc2:	bf00      	nop
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40020000 	.word	0x40020000

08002fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a35      	ldr	r2, [pc, #212]	; (80030cc <HAL_UART_MspInit+0xf4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d163      	bne.n	80030c2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_UART_MspInit+0xf8>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	4a33      	ldr	r2, [pc, #204]	; (80030d0 <HAL_UART_MspInit+0xf8>)
 8003004:	f043 0310 	orr.w	r3, r3, #16
 8003008:	6453      	str	r3, [r2, #68]	; 0x44
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_UART_MspInit+0xf8>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_UART_MspInit+0xf8>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <HAL_UART_MspInit+0xf8>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <HAL_UART_MspInit+0xf8>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003032:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003040:	2303      	movs	r3, #3
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003044:	2307      	movs	r3, #7
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4619      	mov	r1, r3
 800304e:	4821      	ldr	r0, [pc, #132]	; (80030d4 <HAL_UART_MspInit+0xfc>)
 8003050:	f000 fdf6 	bl	8003c40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003054:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <HAL_UART_MspInit+0x100>)
 8003056:	4a21      	ldr	r2, [pc, #132]	; (80030dc <HAL_UART_MspInit+0x104>)
 8003058:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800305a:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <HAL_UART_MspInit+0x100>)
 800305c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003060:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_UART_MspInit+0x100>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_UART_MspInit+0x100>)
 800306a:	2200      	movs	r2, #0
 800306c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_UART_MspInit+0x100>)
 8003070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003074:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_UART_MspInit+0x100>)
 8003078:	2200      	movs	r2, #0
 800307a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <HAL_UART_MspInit+0x100>)
 800307e:	2200      	movs	r2, #0
 8003080:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <HAL_UART_MspInit+0x100>)
 8003084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003088:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_UART_MspInit+0x100>)
 800308c:	2200      	movs	r2, #0
 800308e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_UART_MspInit+0x100>)
 8003092:	2200      	movs	r2, #0
 8003094:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003096:	4810      	ldr	r0, [pc, #64]	; (80030d8 <HAL_UART_MspInit+0x100>)
 8003098:	f000 fa56 	bl	8003548 <HAL_DMA_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80030a2:	f7ff fe95 	bl	8002dd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <HAL_UART_MspInit+0x100>)
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_UART_MspInit+0x100>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2100      	movs	r1, #0
 80030b6:	2025      	movs	r0, #37	; 0x25
 80030b8:	f000 fa0f 	bl	80034da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030bc:	2025      	movs	r0, #37	; 0x25
 80030be:	f000 fa28 	bl	8003512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030c2:	bf00      	nop
 80030c4:	3728      	adds	r7, #40	; 0x28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40011000 	.word	0x40011000
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40020000 	.word	0x40020000
 80030d8:	20000250 	.word	0x20000250
 80030dc:	40026440 	.word	0x40026440

080030e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030e4:	e7fe      	b.n	80030e4 <NMI_Handler+0x4>

080030e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ea:	e7fe      	b.n	80030ea <HardFault_Handler+0x4>

080030ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <MemManage_Handler+0x4>

080030f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030f6:	e7fe      	b.n	80030f6 <BusFault_Handler+0x4>

080030f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030fc:	e7fe      	b.n	80030fc <UsageFault_Handler+0x4>

080030fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800312c:	f000 f8b6 	bl	800329c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003130:	bf00      	nop
 8003132:	bd80      	pop	{r7, pc}

08003134 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_Pin);
 8003138:	2010      	movs	r0, #16
 800313a:	f000 ff39 	bl	8003fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800314a:	f002 fd15 	bl	8005b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200001c4 	.word	0x200001c4

08003158 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <USART1_IRQHandler+0x10>)
 800315e:	f003 fb6b 	bl	8006838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2000020c 	.word	0x2000020c

0800316c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <DMA2_Stream2_IRQHandler+0x10>)
 8003172:	f000 fb29 	bl	80037c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000250 	.word	0x20000250

08003180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <SystemInit+0x20>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <SystemInit+0x20>)
 800318c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031a8:	480d      	ldr	r0, [pc, #52]	; (80031e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031aa:	490e      	ldr	r1, [pc, #56]	; (80031e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031ac:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b0:	e002      	b.n	80031b8 <LoopCopyDataInit>

080031b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b6:	3304      	adds	r3, #4

080031b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031bc:	d3f9      	bcc.n	80031b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031c0:	4c0b      	ldr	r4, [pc, #44]	; (80031f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c4:	e001      	b.n	80031ca <LoopFillZerobss>

080031c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c8:	3204      	adds	r2, #4

080031ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031cc:	d3fb      	bcc.n	80031c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ce:	f7ff ffd7 	bl	8003180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031d2:	f004 f9fd 	bl	80075d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031d6:	f7fe fb97 	bl	8001908 <main>
  bx  lr    
 80031da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e4:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80031e8:	08008f48 	.word	0x08008f48
  ldr r2, =_sbss
 80031ec:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80031f0:	200003c0 	.word	0x200003c0

080031f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <ADC_IRQHandler>
	...

080031f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <HAL_Init+0x40>)
 8003202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_Init+0x40>)
 800320e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_Init+0x40>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_Init+0x40>)
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003220:	2003      	movs	r0, #3
 8003222:	f000 f94f 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003226:	200f      	movs	r0, #15
 8003228:	f000 f808 	bl	800323c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800322c:	f7ff fdd6 	bl	8002ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023c00 	.word	0x40023c00

0800323c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_InitTick+0x54>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_InitTick+0x58>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003252:	fbb3 f3f1 	udiv	r3, r3, r1
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f967 	bl	800352e <HAL_SYSTICK_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e00e      	b.n	8003288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b0f      	cmp	r3, #15
 800326e:	d80a      	bhi.n	8003286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003270:	2200      	movs	r2, #0
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
 8003278:	f000 f92f 	bl	80034da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800327c:	4a06      	ldr	r2, [pc, #24]	; (8003298 <HAL_InitTick+0x5c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000048 	.word	0x20000048
 8003294:	20000050 	.word	0x20000050
 8003298:	2000004c 	.word	0x2000004c

0800329c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_IncTick+0x20>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_IncTick+0x24>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_IncTick+0x24>)
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000050 	.word	0x20000050
 80032c0:	200003bc 	.word	0x200003bc

080032c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return uwTick;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_GetTick+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	200003bc 	.word	0x200003bc

080032dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e4:	f7ff ffee 	bl	80032c4 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d005      	beq.n	8003302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_Delay+0x44>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003302:	bf00      	nop
 8003304:	f7ff ffde 	bl	80032c4 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	429a      	cmp	r2, r3
 8003312:	d8f7      	bhi.n	8003304 <HAL_Delay+0x28>
  {
  }
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000050 	.word	0x20000050

08003324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003340:	4013      	ands	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800334c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003356:	4a04      	ldr	r2, [pc, #16]	; (8003368 <__NVIC_SetPriorityGrouping+0x44>)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60d3      	str	r3, [r2, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <__NVIC_GetPriorityGrouping+0x18>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0307 	and.w	r3, r3, #7
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db0b      	blt.n	80033b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <__NVIC_EnableIRQ+0x38>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	2001      	movs	r0, #1
 80033aa:	fa00 f202 	lsl.w	r2, r0, r2
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000e100 	.word	0xe000e100

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	; (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	; (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	f7ff ff8e 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff29 	bl	8003324 <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ec:	f7ff ff3e 	bl	800336c <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff8e 	bl	8003418 <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5d 	bl	80033c4 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff31 	bl	8003388 <__NVIC_EnableIRQ>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffa2 	bl	8003480 <SysTick_Config>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003554:	f7ff feb6 	bl	80032c4 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e099      	b.n	8003698 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003584:	e00f      	b.n	80035a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003586:	f7ff fe9d 	bl	80032c4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b05      	cmp	r3, #5
 8003592:	d908      	bls.n	80035a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2203      	movs	r2, #3
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e078      	b.n	8003698 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e8      	bne.n	8003586 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4b38      	ldr	r3, [pc, #224]	; (80036a0 <HAL_DMA_Init+0x158>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d107      	bne.n	8003610 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	4313      	orrs	r3, r2
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0307 	bic.w	r3, r3, #7
 8003626:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b04      	cmp	r3, #4
 8003638:	d117      	bne.n	800366a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00e      	beq.n	800366a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fa7b 	bl	8003b48 <DMA_CheckFifoParam>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003666:	2301      	movs	r3, #1
 8003668:	e016      	b.n	8003698 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa32 	bl	8003adc <DMA_CalcBaseAndBitshift>
 8003678:	4603      	mov	r3, r0
 800367a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	223f      	movs	r2, #63	; 0x3f
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	f010803f 	.word	0xf010803f

080036a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036b2:	f7ff fe07 	bl	80032c4 <HAL_GetTick>
 80036b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d008      	beq.n	80036d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e052      	b.n	800377c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0216 	bic.w	r2, r2, #22
 80036e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <HAL_DMA_Abort+0x62>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0208 	bic.w	r2, r2, #8
 8003714:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003726:	e013      	b.n	8003750 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003728:	f7ff fdcc 	bl	80032c4 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b05      	cmp	r3, #5
 8003734:	d90c      	bls.n	8003750 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2203      	movs	r2, #3
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e015      	b.n	800377c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e4      	bne.n	8003728 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	223f      	movs	r2, #63	; 0x3f
 8003764:	409a      	lsls	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d004      	beq.n	80037a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2280      	movs	r2, #128	; 0x80
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e00c      	b.n	80037bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2205      	movs	r2, #5
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037d4:	4b8e      	ldr	r3, [pc, #568]	; (8003a10 <HAL_DMA_IRQHandler+0x248>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a8e      	ldr	r2, [pc, #568]	; (8003a14 <HAL_DMA_IRQHandler+0x24c>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0a9b      	lsrs	r3, r3, #10
 80037e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	2208      	movs	r2, #8
 80037f4:	409a      	lsls	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01a      	beq.n	8003834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	2208      	movs	r2, #8
 8003822:	409a      	lsls	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	2201      	movs	r2, #1
 800383a:	409a      	lsls	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d012      	beq.n	800386a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	2201      	movs	r2, #1
 8003858:	409a      	lsls	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	f043 0202 	orr.w	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	2204      	movs	r2, #4
 8003870:	409a      	lsls	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d012      	beq.n	80038a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	2204      	movs	r2, #4
 800388e:	409a      	lsls	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	f043 0204 	orr.w	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	2210      	movs	r2, #16
 80038a6:	409a      	lsls	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d043      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d03c      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	2210      	movs	r2, #16
 80038c4:	409a      	lsls	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d018      	beq.n	800390a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d108      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d024      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
 80038f6:	e01f      	b.n	8003938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01b      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
 8003908:	e016      	b.n	8003938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0208 	bic.w	r2, r2, #8
 8003926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	2220      	movs	r2, #32
 800393e:	409a      	lsls	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 808f 	beq.w	8003a68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8087 	beq.w	8003a68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	2220      	movs	r2, #32
 8003960:	409a      	lsls	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b05      	cmp	r3, #5
 8003970:	d136      	bne.n	80039e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0216 	bic.w	r2, r2, #22
 8003980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <HAL_DMA_IRQHandler+0x1da>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0208 	bic.w	r2, r2, #8
 80039b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	223f      	movs	r2, #63	; 0x3f
 80039b8:	409a      	lsls	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d07e      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
        }
        return;
 80039de:	e079      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01d      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d031      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
 8003a0c:	e02c      	b.n	8003a68 <HAL_DMA_IRQHandler+0x2a0>
 8003a0e:	bf00      	nop
 8003a10:	20000048 	.word	0x20000048
 8003a14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d023      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4798      	blx	r3
 8003a28:	e01e      	b.n	8003a68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10f      	bne.n	8003a58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0210 	bic.w	r2, r2, #16
 8003a46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d032      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d022      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2205      	movs	r2, #5
 8003a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	3301      	adds	r3, #1
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d307      	bcc.n	8003ab0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f2      	bne.n	8003a94 <HAL_DMA_IRQHandler+0x2cc>
 8003aae:	e000      	b.n	8003ab2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ab0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
 8003ad2:	e000      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ad4:	bf00      	nop
    }
  }
}
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	3b10      	subs	r3, #16
 8003aec:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <DMA_CalcBaseAndBitshift+0x64>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003af6:	4a13      	ldr	r2, [pc, #76]	; (8003b44 <DMA_CalcBaseAndBitshift+0x68>)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d909      	bls.n	8003b1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	1d1a      	adds	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	659a      	str	r2, [r3, #88]	; 0x58
 8003b1c:	e007      	b.n	8003b2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	aaaaaaab 	.word	0xaaaaaaab
 8003b44:	08008d50 	.word	0x08008d50

08003b48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d11f      	bne.n	8003ba2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d856      	bhi.n	8003c16 <DMA_CheckFifoParam+0xce>
 8003b68:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <DMA_CheckFifoParam+0x28>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003b93 	.word	0x08003b93
 8003b78:	08003b81 	.word	0x08003b81
 8003b7c:	08003c17 	.word	0x08003c17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d046      	beq.n	8003c1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b90:	e043      	b.n	8003c1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b9a:	d140      	bne.n	8003c1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba0:	e03d      	b.n	8003c1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003baa:	d121      	bne.n	8003bf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d837      	bhi.n	8003c22 <DMA_CheckFifoParam+0xda>
 8003bb2:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <DMA_CheckFifoParam+0x70>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bcf 	.word	0x08003bcf
 8003bc0:	08003bc9 	.word	0x08003bc9
 8003bc4:	08003be1 	.word	0x08003be1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      break;
 8003bcc:	e030      	b.n	8003c30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d025      	beq.n	8003c26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bde:	e022      	b.n	8003c26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003be8:	d11f      	bne.n	8003c2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bee:	e01c      	b.n	8003c2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d903      	bls.n	8003bfe <DMA_CheckFifoParam+0xb6>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d003      	beq.n	8003c04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bfc:	e018      	b.n	8003c30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
      break;
 8003c02:	e015      	b.n	8003c30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      break;
 8003c14:	e00b      	b.n	8003c2e <DMA_CheckFifoParam+0xe6>
      break;
 8003c16:	bf00      	nop
 8003c18:	e00a      	b.n	8003c30 <DMA_CheckFifoParam+0xe8>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e008      	b.n	8003c30 <DMA_CheckFifoParam+0xe8>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e006      	b.n	8003c30 <DMA_CheckFifoParam+0xe8>
      break;
 8003c22:	bf00      	nop
 8003c24:	e004      	b.n	8003c30 <DMA_CheckFifoParam+0xe8>
      break;
 8003c26:	bf00      	nop
 8003c28:	e002      	b.n	8003c30 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c2a:	bf00      	nop
 8003c2c:	e000      	b.n	8003c30 <DMA_CheckFifoParam+0xe8>
      break;
 8003c2e:	bf00      	nop
    }
  } 
  
  return status; 
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop

08003c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	; 0x24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	e159      	b.n	8003f10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	f040 8148 	bne.w	8003f0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d005      	beq.n	8003c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d130      	bne.n	8003cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cc8:	2201      	movs	r2, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 0201 	and.w	r2, r3, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d017      	beq.n	8003d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d123      	bne.n	8003d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	08da      	lsrs	r2, r3, #3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3208      	adds	r2, #8
 8003d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	220f      	movs	r2, #15
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	08da      	lsrs	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3208      	adds	r2, #8
 8003d7e:	69b9      	ldr	r1, [r7, #24]
 8003d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	2203      	movs	r2, #3
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0203 	and.w	r2, r3, #3
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80a2 	beq.w	8003f0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	4b57      	ldr	r3, [pc, #348]	; (8003f28 <HAL_GPIO_Init+0x2e8>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	4a56      	ldr	r2, [pc, #344]	; (8003f28 <HAL_GPIO_Init+0x2e8>)
 8003dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd6:	4b54      	ldr	r3, [pc, #336]	; (8003f28 <HAL_GPIO_Init+0x2e8>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003de2:	4a52      	ldr	r2, [pc, #328]	; (8003f2c <HAL_GPIO_Init+0x2ec>)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	3302      	adds	r3, #2
 8003dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	220f      	movs	r2, #15
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a49      	ldr	r2, [pc, #292]	; (8003f30 <HAL_GPIO_Init+0x2f0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d019      	beq.n	8003e42 <HAL_GPIO_Init+0x202>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a48      	ldr	r2, [pc, #288]	; (8003f34 <HAL_GPIO_Init+0x2f4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_GPIO_Init+0x1fe>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a47      	ldr	r2, [pc, #284]	; (8003f38 <HAL_GPIO_Init+0x2f8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00d      	beq.n	8003e3a <HAL_GPIO_Init+0x1fa>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a46      	ldr	r2, [pc, #280]	; (8003f3c <HAL_GPIO_Init+0x2fc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <HAL_GPIO_Init+0x1f6>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a45      	ldr	r2, [pc, #276]	; (8003f40 <HAL_GPIO_Init+0x300>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_GPIO_Init+0x1f2>
 8003e2e:	2304      	movs	r3, #4
 8003e30:	e008      	b.n	8003e44 <HAL_GPIO_Init+0x204>
 8003e32:	2307      	movs	r3, #7
 8003e34:	e006      	b.n	8003e44 <HAL_GPIO_Init+0x204>
 8003e36:	2303      	movs	r3, #3
 8003e38:	e004      	b.n	8003e44 <HAL_GPIO_Init+0x204>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e002      	b.n	8003e44 <HAL_GPIO_Init+0x204>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_GPIO_Init+0x204>
 8003e42:	2300      	movs	r3, #0
 8003e44:	69fa      	ldr	r2, [r7, #28]
 8003e46:	f002 0203 	and.w	r2, r2, #3
 8003e4a:	0092      	lsls	r2, r2, #2
 8003e4c:	4093      	lsls	r3, r2
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e54:	4935      	ldr	r1, [pc, #212]	; (8003f2c <HAL_GPIO_Init+0x2ec>)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e62:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e86:	4a2f      	ldr	r2, [pc, #188]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003eb0:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eb6:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ee0:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f04:	4a0f      	ldr	r2, [pc, #60]	; (8003f44 <HAL_GPIO_Init+0x304>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b0f      	cmp	r3, #15
 8003f14:	f67f aea2 	bls.w	8003c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3724      	adds	r7, #36	; 0x24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40013800 	.word	0x40013800
 8003f30:	40020000 	.word	0x40020000
 8003f34:	40020400 	.word	0x40020400
 8003f38:	40020800 	.word	0x40020800
 8003f3c:	40020c00 	.word	0x40020c00
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40013c00 	.word	0x40013c00

08003f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
 8003f54:	4613      	mov	r3, r2
 8003f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f58:	787b      	ldrb	r3, [r7, #1]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f64:	e003      	b.n	8003f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f66:	887b      	ldrh	r3, [r7, #2]
 8003f68:	041a      	lsls	r2, r3, #16
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	619a      	str	r2, [r3, #24]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f8c:	887a      	ldrh	r2, [r7, #2]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4013      	ands	r3, r2
 8003f92:	041a      	lsls	r2, r3, #16
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	43d9      	mvns	r1, r3
 8003f98:	887b      	ldrh	r3, [r7, #2]
 8003f9a:	400b      	ands	r3, r1
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	619a      	str	r2, [r3, #24]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d006      	beq.n	8003fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe fec0 	bl	8002d54 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40013c00 	.word	0x40013c00

08003fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e12b      	b.n	800424a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fe ff10 	bl	8002e2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2224      	movs	r2, #36	; 0x24
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004044:	f001 fbbc 	bl	80057c0 <HAL_RCC_GetPCLK1Freq>
 8004048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4a81      	ldr	r2, [pc, #516]	; (8004254 <HAL_I2C_Init+0x274>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d807      	bhi.n	8004064 <HAL_I2C_Init+0x84>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a80      	ldr	r2, [pc, #512]	; (8004258 <HAL_I2C_Init+0x278>)
 8004058:	4293      	cmp	r3, r2
 800405a:	bf94      	ite	ls
 800405c:	2301      	movls	r3, #1
 800405e:	2300      	movhi	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e006      	b.n	8004072 <HAL_I2C_Init+0x92>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4a7d      	ldr	r2, [pc, #500]	; (800425c <HAL_I2C_Init+0x27c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	bf94      	ite	ls
 800406c:	2301      	movls	r3, #1
 800406e:	2300      	movhi	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0e7      	b.n	800424a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a78      	ldr	r2, [pc, #480]	; (8004260 <HAL_I2C_Init+0x280>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	0c9b      	lsrs	r3, r3, #18
 8004084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4a6a      	ldr	r2, [pc, #424]	; (8004254 <HAL_I2C_Init+0x274>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d802      	bhi.n	80040b4 <HAL_I2C_Init+0xd4>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	3301      	adds	r3, #1
 80040b2:	e009      	b.n	80040c8 <HAL_I2C_Init+0xe8>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
 80040be:	4a69      	ldr	r2, [pc, #420]	; (8004264 <HAL_I2C_Init+0x284>)
 80040c0:	fba2 2303 	umull	r2, r3, r2, r3
 80040c4:	099b      	lsrs	r3, r3, #6
 80040c6:	3301      	adds	r3, #1
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	495c      	ldr	r1, [pc, #368]	; (8004254 <HAL_I2C_Init+0x274>)
 80040e4:	428b      	cmp	r3, r1
 80040e6:	d819      	bhi.n	800411c <HAL_I2C_Init+0x13c>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1e59      	subs	r1, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f6:	1c59      	adds	r1, r3, #1
 80040f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040fc:	400b      	ands	r3, r1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_I2C_Init+0x138>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1e59      	subs	r1, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004110:	3301      	adds	r3, #1
 8004112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004116:	e051      	b.n	80041bc <HAL_I2C_Init+0x1dc>
 8004118:	2304      	movs	r3, #4
 800411a:	e04f      	b.n	80041bc <HAL_I2C_Init+0x1dc>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d111      	bne.n	8004148 <HAL_I2C_Init+0x168>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1e58      	subs	r0, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	440b      	add	r3, r1
 8004132:	fbb0 f3f3 	udiv	r3, r0, r3
 8004136:	3301      	adds	r3, #1
 8004138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e012      	b.n	800416e <HAL_I2C_Init+0x18e>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1e58      	subs	r0, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	0099      	lsls	r1, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Init+0x196>
 8004172:	2301      	movs	r3, #1
 8004174:	e022      	b.n	80041bc <HAL_I2C_Init+0x1dc>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10e      	bne.n	800419c <HAL_I2C_Init+0x1bc>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1e58      	subs	r0, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	440b      	add	r3, r1
 800418c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004190:	3301      	adds	r3, #1
 8004192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419a:	e00f      	b.n	80041bc <HAL_I2C_Init+0x1dc>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1e58      	subs	r0, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6859      	ldr	r1, [r3, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	0099      	lsls	r1, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b2:	3301      	adds	r3, #1
 80041b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	6809      	ldr	r1, [r1, #0]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69da      	ldr	r2, [r3, #28]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6911      	ldr	r1, [r2, #16]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68d2      	ldr	r2, [r2, #12]
 80041f6:	4311      	orrs	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	000186a0 	.word	0x000186a0
 8004258:	001e847f 	.word	0x001e847f
 800425c:	003d08ff 	.word	0x003d08ff
 8004260:	431bde83 	.word	0x431bde83
 8004264:	10624dd3 	.word	0x10624dd3

08004268 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	4608      	mov	r0, r1
 8004272:	4611      	mov	r1, r2
 8004274:	461a      	mov	r2, r3
 8004276:	4603      	mov	r3, r0
 8004278:	817b      	strh	r3, [r7, #10]
 800427a:	460b      	mov	r3, r1
 800427c:	813b      	strh	r3, [r7, #8]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004282:	f7ff f81f 	bl	80032c4 <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b20      	cmp	r3, #32
 8004292:	f040 80d9 	bne.w	8004448 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2319      	movs	r3, #25
 800429c:	2201      	movs	r2, #1
 800429e:	496d      	ldr	r1, [pc, #436]	; (8004454 <HAL_I2C_Mem_Write+0x1ec>)
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fc7f 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
 80042ae:	e0cc      	b.n	800444a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d101      	bne.n	80042be <HAL_I2C_Mem_Write+0x56>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e0c5      	b.n	800444a <HAL_I2C_Mem_Write+0x1e2>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d007      	beq.n	80042e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2221      	movs	r2, #33	; 0x21
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2240      	movs	r2, #64	; 0x40
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a3a      	ldr	r2, [r7, #32]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a4d      	ldr	r2, [pc, #308]	; (8004458 <HAL_I2C_Mem_Write+0x1f0>)
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004326:	88f8      	ldrh	r0, [r7, #6]
 8004328:	893a      	ldrh	r2, [r7, #8]
 800432a:	8979      	ldrh	r1, [r7, #10]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	4603      	mov	r3, r0
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fab6 	bl	80048a8 <I2C_RequestMemoryWrite>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d052      	beq.n	80043e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e081      	b.n	800444a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 fd00 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	2b04      	cmp	r3, #4
 800435c:	d107      	bne.n	800436e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e06b      	b.n	800444a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	781a      	ldrb	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d11b      	bne.n	80043e8 <HAL_I2C_Mem_Write+0x180>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d017      	beq.n	80043e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1aa      	bne.n	8004346 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fcec 	bl	8004dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00d      	beq.n	800441c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	2b04      	cmp	r3, #4
 8004406:	d107      	bne.n	8004418 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004416:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e016      	b.n	800444a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	e000      	b.n	800444a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004448:	2302      	movs	r3, #2
  }
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	00100002 	.word	0x00100002
 8004458:	ffff0000 	.word	0xffff0000

0800445c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	4608      	mov	r0, r1
 8004466:	4611      	mov	r1, r2
 8004468:	461a      	mov	r2, r3
 800446a:	4603      	mov	r3, r0
 800446c:	817b      	strh	r3, [r7, #10]
 800446e:	460b      	mov	r3, r1
 8004470:	813b      	strh	r3, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004476:	f7fe ff25 	bl	80032c4 <HAL_GetTick>
 800447a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b20      	cmp	r3, #32
 8004486:	f040 8208 	bne.w	800489a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2319      	movs	r3, #25
 8004490:	2201      	movs	r2, #1
 8004492:	497b      	ldr	r1, [pc, #492]	; (8004680 <HAL_I2C_Mem_Read+0x224>)
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fb85 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044a0:	2302      	movs	r3, #2
 80044a2:	e1fb      	b.n	800489c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_I2C_Mem_Read+0x56>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e1f4      	b.n	800489c <HAL_I2C_Mem_Read+0x440>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d007      	beq.n	80044d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2222      	movs	r2, #34	; 0x22
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2240      	movs	r2, #64	; 0x40
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004502:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4a5b      	ldr	r2, [pc, #364]	; (8004684 <HAL_I2C_Mem_Read+0x228>)
 8004518:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800451a:	88f8      	ldrh	r0, [r7, #6]
 800451c:	893a      	ldrh	r2, [r7, #8]
 800451e:	8979      	ldrh	r1, [r7, #10]
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	4603      	mov	r3, r0
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fa52 	bl	80049d4 <I2C_RequestMemoryRead>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e1b0      	b.n	800489c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d113      	bne.n	800456a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	623b      	str	r3, [r7, #32]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	623b      	str	r3, [r7, #32]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	623b      	str	r3, [r7, #32]
 8004556:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	e184      	b.n	8004874 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456e:	2b01      	cmp	r3, #1
 8004570:	d11b      	bne.n	80045aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e164      	b.n	8004874 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d11b      	bne.n	80045ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	e144      	b.n	8004874 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004600:	e138      	b.n	8004874 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004606:	2b03      	cmp	r3, #3
 8004608:	f200 80f1 	bhi.w	80047ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	2b01      	cmp	r3, #1
 8004612:	d123      	bne.n	800465c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fc1b 	bl	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e139      	b.n	800489c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	855a      	strh	r2, [r3, #42]	; 0x2a
 800465a:	e10b      	b.n	8004874 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	2b02      	cmp	r3, #2
 8004662:	d14e      	bne.n	8004702 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	2200      	movs	r2, #0
 800466c:	4906      	ldr	r1, [pc, #24]	; (8004688 <HAL_I2C_Mem_Read+0x22c>)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fa98 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e10e      	b.n	800489c <HAL_I2C_Mem_Read+0x440>
 800467e:	bf00      	nop
 8004680:	00100002 	.word	0x00100002
 8004684:	ffff0000 	.word	0xffff0000
 8004688:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004700:	e0b8      	b.n	8004874 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	2200      	movs	r2, #0
 800470a:	4966      	ldr	r1, [pc, #408]	; (80048a4 <HAL_I2C_Mem_Read+0x448>)
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fa49 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0bf      	b.n	800489c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	2200      	movs	r2, #0
 8004766:	494f      	ldr	r1, [pc, #316]	; (80048a4 <HAL_I2C_Mem_Read+0x448>)
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fa1b 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e091      	b.n	800489c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ec:	e042      	b.n	8004874 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fb2e 	bl	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e04c      	b.n	800489c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d118      	bne.n	8004874 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	f47f aec2 	bne.w	8004602 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	00010004 	.word	0x00010004

080048a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	4608      	mov	r0, r1
 80048b2:	4611      	mov	r1, r2
 80048b4:	461a      	mov	r2, r3
 80048b6:	4603      	mov	r3, r0
 80048b8:	817b      	strh	r3, [r7, #10]
 80048ba:	460b      	mov	r3, r1
 80048bc:	813b      	strh	r3, [r7, #8]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	2200      	movs	r2, #0
 80048da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f960 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00d      	beq.n	8004906 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f8:	d103      	bne.n	8004902 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e05f      	b.n	80049c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004906:	897b      	ldrh	r3, [r7, #10]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004914:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	6a3a      	ldr	r2, [r7, #32]
 800491a:	492d      	ldr	r1, [pc, #180]	; (80049d0 <I2C_RequestMemoryWrite+0x128>)
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f998 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e04c      	b.n	80049c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	6a39      	ldr	r1, [r7, #32]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fa02 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b04      	cmp	r3, #4
 8004958:	d107      	bne.n	800496a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004968:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e02b      	b.n	80049c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d105      	bne.n	8004980 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004974:	893b      	ldrh	r3, [r7, #8]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	611a      	str	r2, [r3, #16]
 800497e:	e021      	b.n	80049c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004980:	893b      	ldrh	r3, [r7, #8]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	b29b      	uxth	r3, r3
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800498e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004990:	6a39      	ldr	r1, [r7, #32]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f9dc 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d107      	bne.n	80049b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e005      	b.n	80049c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ba:	893b      	ldrh	r3, [r7, #8]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	00010002 	.word	0x00010002

080049d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	817b      	strh	r3, [r7, #10]
 80049e6:	460b      	mov	r3, r1
 80049e8:	813b      	strh	r3, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f8c2 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a34:	d103      	bne.n	8004a3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0aa      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a42:	897b      	ldrh	r3, [r7, #10]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	6a3a      	ldr	r2, [r7, #32]
 8004a56:	4952      	ldr	r1, [pc, #328]	; (8004ba0 <I2C_RequestMemoryRead+0x1cc>)
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f8fa 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e097      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	6a39      	ldr	r1, [r7, #32]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f964 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d107      	bne.n	8004aa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e076      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab0:	893b      	ldrh	r3, [r7, #8]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	611a      	str	r2, [r3, #16]
 8004aba:	e021      	b.n	8004b00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004abc:	893b      	ldrh	r3, [r7, #8]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004acc:	6a39      	ldr	r1, [r7, #32]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f93e 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d107      	bne.n	8004af2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e050      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004af6:	893b      	ldrh	r3, [r7, #8]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	6a39      	ldr	r1, [r7, #32]
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f923 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00d      	beq.n	8004b2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d107      	bne.n	8004b28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e035      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f82b 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b62:	d103      	bne.n	8004b6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e013      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b70:	897b      	ldrh	r3, [r7, #10]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	6a3a      	ldr	r2, [r7, #32]
 8004b84:	4906      	ldr	r1, [pc, #24]	; (8004ba0 <I2C_RequestMemoryRead+0x1cc>)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f863 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	00010002 	.word	0x00010002

08004ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb4:	e025      	b.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d021      	beq.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fe fb81 	bl	80032c4 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d116      	bne.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f043 0220 	orr.w	r2, r3, #32
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e023      	b.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10d      	bne.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	43da      	mvns	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	e00c      	b.n	8004c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d0b6      	beq.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c60:	e051      	b.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d123      	bne.n	8004cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f043 0204 	orr.w	r2, r3, #4
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e046      	b.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d021      	beq.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fe faff 	bl	80032c4 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d116      	bne.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e020      	b.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10c      	bne.n	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	43da      	mvns	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	e00b      	b.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	43da      	mvns	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d18d      	bne.n	8004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d5c:	e02d      	b.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f8ce 	bl	8004f00 <I2C_IsAcknowledgeFailed>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e02d      	b.n	8004dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d021      	beq.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f7fe faa5 	bl	80032c4 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d116      	bne.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e007      	b.n	8004dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	2b80      	cmp	r3, #128	; 0x80
 8004dc6:	d1ca      	bne.n	8004d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dde:	e02d      	b.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f88d 	bl	8004f00 <I2C_IsAcknowledgeFailed>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e02d      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d021      	beq.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df8:	f7fe fa64 	bl	80032c4 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d302      	bcc.n	8004e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d116      	bne.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e007      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d1ca      	bne.n	8004de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e60:	e042      	b.n	8004ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d119      	bne.n	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0210 	mvn.w	r2, #16
 8004e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e029      	b.n	8004ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea4:	f7fe fa0e 	bl	80032c4 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e007      	b.n	8004ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d1b5      	bne.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f16:	d11b      	bne.n	8004f50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	f043 0204 	orr.w	r2, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e267      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d075      	beq.n	800506a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f7e:	4b88      	ldr	r3, [pc, #544]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d00c      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f8a:	4b85      	ldr	r3, [pc, #532]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d112      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f96:	4b82      	ldr	r3, [pc, #520]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa2:	d10b      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa4:	4b7e      	ldr	r3, [pc, #504]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d05b      	beq.n	8005068 <HAL_RCC_OscConfig+0x108>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d157      	bne.n	8005068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e242      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc4:	d106      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x74>
 8004fc6:	4b76      	ldr	r3, [pc, #472]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a75      	ldr	r2, [pc, #468]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e01d      	b.n	8005010 <HAL_RCC_OscConfig+0xb0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x98>
 8004fde:	4b70      	ldr	r3, [pc, #448]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a6f      	ldr	r2, [pc, #444]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	4b6d      	ldr	r3, [pc, #436]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a6c      	ldr	r2, [pc, #432]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e00b      	b.n	8005010 <HAL_RCC_OscConfig+0xb0>
 8004ff8:	4b69      	ldr	r3, [pc, #420]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a68      	ldr	r2, [pc, #416]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b66      	ldr	r3, [pc, #408]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a65      	ldr	r2, [pc, #404]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 800500a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800500e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d013      	beq.n	8005040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005018:	f7fe f954 	bl	80032c4 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005020:	f7fe f950 	bl	80032c4 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	; 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e207      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005032:	4b5b      	ldr	r3, [pc, #364]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0xc0>
 800503e:	e014      	b.n	800506a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fe f940 	bl	80032c4 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005048:	f7fe f93c 	bl	80032c4 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1f3      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505a:	4b51      	ldr	r3, [pc, #324]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0xe8>
 8005066:	e000      	b.n	800506a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d063      	beq.n	800513e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005076:	4b4a      	ldr	r3, [pc, #296]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005082:	4b47      	ldr	r3, [pc, #284]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800508a:	2b08      	cmp	r3, #8
 800508c:	d11c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800508e:	4b44      	ldr	r3, [pc, #272]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d116      	bne.n	80050c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509a:	4b41      	ldr	r3, [pc, #260]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_RCC_OscConfig+0x152>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d001      	beq.n	80050b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e1c7      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b2:	4b3b      	ldr	r3, [pc, #236]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4937      	ldr	r1, [pc, #220]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	e03a      	b.n	800513e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d020      	beq.n	8005112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d0:	4b34      	ldr	r3, [pc, #208]	; (80051a4 <HAL_RCC_OscConfig+0x244>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d6:	f7fe f8f5 	bl	80032c4 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050de:	f7fe f8f1 	bl	80032c4 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e1a8      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f0:	4b2b      	ldr	r3, [pc, #172]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fc:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4925      	ldr	r1, [pc, #148]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
 8005110:	e015      	b.n	800513e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005112:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <HAL_RCC_OscConfig+0x244>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fe f8d4 	bl	80032c4 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005120:	f7fe f8d0 	bl	80032c4 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e187      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005132:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d036      	beq.n	80051b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d016      	beq.n	8005180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <HAL_RCC_OscConfig+0x248>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005158:	f7fe f8b4 	bl	80032c4 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005160:	f7fe f8b0 	bl	80032c4 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e167      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005172:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x200>
 800517e:	e01b      	b.n	80051b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_RCC_OscConfig+0x248>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005186:	f7fe f89d 	bl	80032c4 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800518c:	e00e      	b.n	80051ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800518e:	f7fe f899 	bl	80032c4 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d907      	bls.n	80051ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e150      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
 80051a0:	40023800 	.word	0x40023800
 80051a4:	42470000 	.word	0x42470000
 80051a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ac:	4b88      	ldr	r3, [pc, #544]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 80051ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ea      	bne.n	800518e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8097 	beq.w	80052f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c6:	2300      	movs	r3, #0
 80051c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ca:	4b81      	ldr	r3, [pc, #516]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10f      	bne.n	80051f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d6:	2300      	movs	r3, #0
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	4b7d      	ldr	r3, [pc, #500]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	4a7c      	ldr	r2, [pc, #496]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 80051e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e4:	6413      	str	r3, [r2, #64]	; 0x40
 80051e6:	4b7a      	ldr	r3, [pc, #488]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f6:	4b77      	ldr	r3, [pc, #476]	; (80053d4 <HAL_RCC_OscConfig+0x474>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d118      	bne.n	8005234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005202:	4b74      	ldr	r3, [pc, #464]	; (80053d4 <HAL_RCC_OscConfig+0x474>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a73      	ldr	r2, [pc, #460]	; (80053d4 <HAL_RCC_OscConfig+0x474>)
 8005208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520e:	f7fe f859 	bl	80032c4 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005216:	f7fe f855 	bl	80032c4 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e10c      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005228:	4b6a      	ldr	r3, [pc, #424]	; (80053d4 <HAL_RCC_OscConfig+0x474>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d106      	bne.n	800524a <HAL_RCC_OscConfig+0x2ea>
 800523c:	4b64      	ldr	r3, [pc, #400]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	4a63      	ldr	r2, [pc, #396]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	6713      	str	r3, [r2, #112]	; 0x70
 8005248:	e01c      	b.n	8005284 <HAL_RCC_OscConfig+0x324>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b05      	cmp	r3, #5
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0x30c>
 8005252:	4b5f      	ldr	r3, [pc, #380]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a5e      	ldr	r2, [pc, #376]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005258:	f043 0304 	orr.w	r3, r3, #4
 800525c:	6713      	str	r3, [r2, #112]	; 0x70
 800525e:	4b5c      	ldr	r3, [pc, #368]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	4a5b      	ldr	r2, [pc, #364]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
 800526a:	e00b      	b.n	8005284 <HAL_RCC_OscConfig+0x324>
 800526c:	4b58      	ldr	r3, [pc, #352]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	4a57      	ldr	r2, [pc, #348]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	6713      	str	r3, [r2, #112]	; 0x70
 8005278:	4b55      	ldr	r3, [pc, #340]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	4a54      	ldr	r2, [pc, #336]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 800527e:	f023 0304 	bic.w	r3, r3, #4
 8005282:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d015      	beq.n	80052b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528c:	f7fe f81a 	bl	80032c4 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005292:	e00a      	b.n	80052aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005294:	f7fe f816 	bl	80032c4 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0cb      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052aa:	4b49      	ldr	r3, [pc, #292]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0ee      	beq.n	8005294 <HAL_RCC_OscConfig+0x334>
 80052b6:	e014      	b.n	80052e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b8:	f7fe f804 	bl	80032c4 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c0:	f7fe f800 	bl	80032c4 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0b5      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d6:	4b3e      	ldr	r3, [pc, #248]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1ee      	bne.n	80052c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d105      	bne.n	80052f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e8:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	4a38      	ldr	r2, [pc, #224]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 80052ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80a1 	beq.w	8005440 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052fe:	4b34      	ldr	r3, [pc, #208]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	2b08      	cmp	r3, #8
 8005308:	d05c      	beq.n	80053c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d141      	bne.n	8005396 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005312:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005318:	f7fd ffd4 	bl	80032c4 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005320:	f7fd ffd0 	bl	80032c4 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e087      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005332:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	019b      	lsls	r3, r3, #6
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	3b01      	subs	r3, #1
 8005358:	041b      	lsls	r3, r3, #16
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	061b      	lsls	r3, r3, #24
 8005362:	491b      	ldr	r1, [pc, #108]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 8005364:	4313      	orrs	r3, r2
 8005366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <HAL_RCC_OscConfig+0x478>)
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536e:	f7fd ffa9 	bl	80032c4 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005376:	f7fd ffa5 	bl	80032c4 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e05c      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005388:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x416>
 8005394:	e054      	b.n	8005440 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005396:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539c:	f7fd ff92 	bl	80032c4 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a4:	f7fd ff8e 	bl	80032c4 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e045      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_RCC_OscConfig+0x470>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x444>
 80053c2:	e03d      	b.n	8005440 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d107      	bne.n	80053dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e038      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40007000 	.word	0x40007000
 80053d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <HAL_RCC_OscConfig+0x4ec>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d028      	beq.n	800543c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d121      	bne.n	800543c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005402:	429a      	cmp	r2, r3
 8005404:	d11a      	bne.n	800543c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800540c:	4013      	ands	r3, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005414:	4293      	cmp	r3, r2
 8005416:	d111      	bne.n	800543c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	3b01      	subs	r3, #1
 8005426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d107      	bne.n	800543c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005438:	429a      	cmp	r2, r3
 800543a:	d001      	beq.n	8005440 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800

08005450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0cc      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005464:	4b68      	ldr	r3, [pc, #416]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d90c      	bls.n	800548c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005472:	4b65      	ldr	r3, [pc, #404]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b63      	ldr	r3, [pc, #396]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0b8      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d020      	beq.n	80054da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a4:	4b59      	ldr	r3, [pc, #356]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4a58      	ldr	r2, [pc, #352]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054bc:	4b53      	ldr	r3, [pc, #332]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a52      	ldr	r2, [pc, #328]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c8:	4b50      	ldr	r3, [pc, #320]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	494d      	ldr	r1, [pc, #308]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d044      	beq.n	8005570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ee:	4b47      	ldr	r3, [pc, #284]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d119      	bne.n	800552e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e07f      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d003      	beq.n	800550e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800550a:	2b03      	cmp	r3, #3
 800550c:	d107      	bne.n	800551e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550e:	4b3f      	ldr	r3, [pc, #252]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e06f      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551e:	4b3b      	ldr	r3, [pc, #236]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e067      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800552e:	4b37      	ldr	r3, [pc, #220]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f023 0203 	bic.w	r2, r3, #3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4934      	ldr	r1, [pc, #208]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005540:	f7fd fec0 	bl	80032c4 <HAL_GetTick>
 8005544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005546:	e00a      	b.n	800555e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005548:	f7fd febc 	bl	80032c4 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f241 3288 	movw	r2, #5000	; 0x1388
 8005556:	4293      	cmp	r3, r2
 8005558:	d901      	bls.n	800555e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e04f      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	4b2b      	ldr	r3, [pc, #172]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 020c 	and.w	r2, r3, #12
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	429a      	cmp	r2, r3
 800556e:	d1eb      	bne.n	8005548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005570:	4b25      	ldr	r3, [pc, #148]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d20c      	bcs.n	8005598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	4b22      	ldr	r3, [pc, #136]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005586:	4b20      	ldr	r3, [pc, #128]	; (8005608 <HAL_RCC_ClockConfig+0x1b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e032      	b.n	80055fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	4916      	ldr	r1, [pc, #88]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	490e      	ldr	r1, [pc, #56]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055d6:	f000 f821 	bl	800561c <HAL_RCC_GetSysClockFreq>
 80055da:	4602      	mov	r2, r0
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	490a      	ldr	r1, [pc, #40]	; (8005610 <HAL_RCC_ClockConfig+0x1c0>)
 80055e8:	5ccb      	ldrb	r3, [r1, r3]
 80055ea:	fa22 f303 	lsr.w	r3, r2, r3
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <HAL_RCC_ClockConfig+0x1c4>)
 80055f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_RCC_ClockConfig+0x1c8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fd fe20 	bl	800323c <HAL_InitTick>

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40023c00 	.word	0x40023c00
 800560c:	40023800 	.word	0x40023800
 8005610:	08008d38 	.word	0x08008d38
 8005614:	20000048 	.word	0x20000048
 8005618:	2000004c 	.word	0x2000004c

0800561c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800561c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005620:	b090      	sub	sp, #64	; 0x40
 8005622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
 8005628:	2300      	movs	r3, #0
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800562c:	2300      	movs	r3, #0
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005634:	4b59      	ldr	r3, [pc, #356]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 030c 	and.w	r3, r3, #12
 800563c:	2b08      	cmp	r3, #8
 800563e:	d00d      	beq.n	800565c <HAL_RCC_GetSysClockFreq+0x40>
 8005640:	2b08      	cmp	r3, #8
 8005642:	f200 80a1 	bhi.w	8005788 <HAL_RCC_GetSysClockFreq+0x16c>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x34>
 800564a:	2b04      	cmp	r3, #4
 800564c:	d003      	beq.n	8005656 <HAL_RCC_GetSysClockFreq+0x3a>
 800564e:	e09b      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005650:	4b53      	ldr	r3, [pc, #332]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005652:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005654:	e09b      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005656:	4b53      	ldr	r3, [pc, #332]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005658:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800565a:	e098      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800565c:	4b4f      	ldr	r3, [pc, #316]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005666:	4b4d      	ldr	r3, [pc, #308]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d028      	beq.n	80056c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005672:	4b4a      	ldr	r3, [pc, #296]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	099b      	lsrs	r3, r3, #6
 8005678:	2200      	movs	r2, #0
 800567a:	623b      	str	r3, [r7, #32]
 800567c:	627a      	str	r2, [r7, #36]	; 0x24
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005684:	2100      	movs	r1, #0
 8005686:	4b47      	ldr	r3, [pc, #284]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005688:	fb03 f201 	mul.w	r2, r3, r1
 800568c:	2300      	movs	r3, #0
 800568e:	fb00 f303 	mul.w	r3, r0, r3
 8005692:	4413      	add	r3, r2
 8005694:	4a43      	ldr	r2, [pc, #268]	; (80057a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005696:	fba0 1202 	umull	r1, r2, r0, r2
 800569a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800569c:	460a      	mov	r2, r1
 800569e:	62ba      	str	r2, [r7, #40]	; 0x28
 80056a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a2:	4413      	add	r3, r2
 80056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	2200      	movs	r2, #0
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	61fa      	str	r2, [r7, #28]
 80056ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056b6:	f7fb fa73 	bl	8000ba0 <__aeabi_uldivmod>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4613      	mov	r3, r2
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c2:	e053      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056c4:	4b35      	ldr	r3, [pc, #212]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	099b      	lsrs	r3, r3, #6
 80056ca:	2200      	movs	r2, #0
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	617a      	str	r2, [r7, #20]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056d6:	f04f 0b00 	mov.w	fp, #0
 80056da:	4652      	mov	r2, sl
 80056dc:	465b      	mov	r3, fp
 80056de:	f04f 0000 	mov.w	r0, #0
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	0159      	lsls	r1, r3, #5
 80056e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056ec:	0150      	lsls	r0, r2, #5
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	ebb2 080a 	subs.w	r8, r2, sl
 80056f6:	eb63 090b 	sbc.w	r9, r3, fp
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005706:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800570a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800570e:	ebb2 0408 	subs.w	r4, r2, r8
 8005712:	eb63 0509 	sbc.w	r5, r3, r9
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	00eb      	lsls	r3, r5, #3
 8005720:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005724:	00e2      	lsls	r2, r4, #3
 8005726:	4614      	mov	r4, r2
 8005728:	461d      	mov	r5, r3
 800572a:	eb14 030a 	adds.w	r3, r4, sl
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	eb45 030b 	adc.w	r3, r5, fp
 8005734:	607b      	str	r3, [r7, #4]
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005742:	4629      	mov	r1, r5
 8005744:	028b      	lsls	r3, r1, #10
 8005746:	4621      	mov	r1, r4
 8005748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800574c:	4621      	mov	r1, r4
 800574e:	028a      	lsls	r2, r1, #10
 8005750:	4610      	mov	r0, r2
 8005752:	4619      	mov	r1, r3
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	2200      	movs	r2, #0
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	60fa      	str	r2, [r7, #12]
 800575c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005760:	f7fb fa1e 	bl	8000ba0 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4613      	mov	r3, r2
 800576a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <HAL_RCC_GetSysClockFreq+0x180>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	3301      	adds	r3, #1
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800577c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005786:	e002      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800578a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800578c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005790:	4618      	mov	r0, r3
 8005792:	3740      	adds	r7, #64	; 0x40
 8005794:	46bd      	mov	sp, r7
 8005796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	017d7840 	.word	0x017d7840

080057a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ae:	681b      	ldr	r3, [r3, #0]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000048 	.word	0x20000048

080057c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057c4:	f7ff fff0 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057c8:	4602      	mov	r2, r0
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	0a9b      	lsrs	r3, r3, #10
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	4903      	ldr	r1, [pc, #12]	; (80057e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d6:	5ccb      	ldrb	r3, [r1, r3]
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40023800 	.word	0x40023800
 80057e4:	08008d48 	.word	0x08008d48

080057e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057ec:	f7ff ffdc 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	0b5b      	lsrs	r3, r3, #13
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	4903      	ldr	r1, [pc, #12]	; (800580c <HAL_RCC_GetPCLK2Freq+0x24>)
 80057fe:	5ccb      	ldrb	r3, [r1, r3]
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005804:	4618      	mov	r0, r3
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40023800 	.word	0x40023800
 800580c:	08008d48 	.word	0x08008d48

08005810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e041      	b.n	80058a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fd fb40 	bl	8002ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f000 fc56 	bl	8006100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d001      	beq.n	80058c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e03c      	b.n	8005942 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1e      	ldr	r2, [pc, #120]	; (8005950 <HAL_TIM_Base_Start+0xa0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d018      	beq.n	800590c <HAL_TIM_Base_Start+0x5c>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e2:	d013      	beq.n	800590c <HAL_TIM_Base_Start+0x5c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <HAL_TIM_Base_Start+0xa4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00e      	beq.n	800590c <HAL_TIM_Base_Start+0x5c>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a19      	ldr	r2, [pc, #100]	; (8005958 <HAL_TIM_Base_Start+0xa8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d009      	beq.n	800590c <HAL_TIM_Base_Start+0x5c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a17      	ldr	r2, [pc, #92]	; (800595c <HAL_TIM_Base_Start+0xac>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d004      	beq.n	800590c <HAL_TIM_Base_Start+0x5c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a16      	ldr	r2, [pc, #88]	; (8005960 <HAL_TIM_Base_Start+0xb0>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d111      	bne.n	8005930 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b06      	cmp	r3, #6
 800591c:	d010      	beq.n	8005940 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0201 	orr.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800592e:	e007      	b.n	8005940 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0201 	orr.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40010000 	.word	0x40010000
 8005954:	40000400 	.word	0x40000400
 8005958:	40000800 	.word	0x40000800
 800595c:	40000c00 	.word	0x40000c00
 8005960:	40014000 	.word	0x40014000

08005964 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e041      	b.n	80059fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f839 	bl	8005a02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f000 fbac 	bl	8006100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d109      	bne.n	8005a3c <HAL_TIM_PWM_Start+0x24>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e022      	b.n	8005a82 <HAL_TIM_PWM_Start+0x6a>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d109      	bne.n	8005a56 <HAL_TIM_PWM_Start+0x3e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	bf14      	ite	ne
 8005a4e:	2301      	movne	r3, #1
 8005a50:	2300      	moveq	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	e015      	b.n	8005a82 <HAL_TIM_PWM_Start+0x6a>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d109      	bne.n	8005a70 <HAL_TIM_PWM_Start+0x58>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	bf14      	ite	ne
 8005a68:	2301      	movne	r3, #1
 8005a6a:	2300      	moveq	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e008      	b.n	8005a82 <HAL_TIM_PWM_Start+0x6a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	bf14      	ite	ne
 8005a7c:	2301      	movne	r3, #1
 8005a7e:	2300      	moveq	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e068      	b.n	8005b5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <HAL_TIM_PWM_Start+0x82>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a98:	e013      	b.n	8005ac2 <HAL_TIM_PWM_Start+0xaa>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIM_PWM_Start+0x92>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa8:	e00b      	b.n	8005ac2 <HAL_TIM_PWM_Start+0xaa>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d104      	bne.n	8005aba <HAL_TIM_PWM_Start+0xa2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab8:	e003      	b.n	8005ac2 <HAL_TIM_PWM_Start+0xaa>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fdbe 	bl	800664c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a23      	ldr	r2, [pc, #140]	; (8005b64 <HAL_TIM_PWM_Start+0x14c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d107      	bne.n	8005aea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ae8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1d      	ldr	r2, [pc, #116]	; (8005b64 <HAL_TIM_PWM_Start+0x14c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d018      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x10e>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afc:	d013      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x10e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <HAL_TIM_PWM_Start+0x150>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00e      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x10e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a17      	ldr	r2, [pc, #92]	; (8005b6c <HAL_TIM_PWM_Start+0x154>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d009      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x10e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <HAL_TIM_PWM_Start+0x158>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x10e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a14      	ldr	r2, [pc, #80]	; (8005b74 <HAL_TIM_PWM_Start+0x15c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d111      	bne.n	8005b4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d010      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b48:	e007      	b.n	8005b5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00
 8005b74:	40014000 	.word	0x40014000

08005b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d122      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d11b      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0202 	mvn.w	r2, #2
 8005ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa81 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005bc0:	e005      	b.n	8005bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa73 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fa84 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d122      	bne.n	8005c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d11b      	bne.n	8005c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0204 	mvn.w	r2, #4
 8005bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fa57 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fa49 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa5a 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d122      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d11b      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0208 	mvn.w	r2, #8
 8005c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2204      	movs	r2, #4
 8005c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fa2d 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005c68:	e005      	b.n	8005c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fa1f 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fa30 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	2b10      	cmp	r3, #16
 8005c88:	d122      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d11b      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0210 	mvn.w	r2, #16
 8005ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa03 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005cbc:	e005      	b.n	8005cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f9f5 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fa06 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d10e      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d107      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0201 	mvn.w	r2, #1
 8005cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f9cf 	bl	800609a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d06:	2b80      	cmp	r3, #128	; 0x80
 8005d08:	d10e      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d14:	2b80      	cmp	r3, #128	; 0x80
 8005d16:	d107      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fd30 	bl	8006788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d10e      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d107      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9cb 	bl	80060ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d10e      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d107      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0220 	mvn.w	r2, #32
 8005d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fcfa 	bl	8006774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e0ae      	b.n	8005f04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b0c      	cmp	r3, #12
 8005db2:	f200 809f 	bhi.w	8005ef4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005df1 	.word	0x08005df1
 8005dc0:	08005ef5 	.word	0x08005ef5
 8005dc4:	08005ef5 	.word	0x08005ef5
 8005dc8:	08005ef5 	.word	0x08005ef5
 8005dcc:	08005e31 	.word	0x08005e31
 8005dd0:	08005ef5 	.word	0x08005ef5
 8005dd4:	08005ef5 	.word	0x08005ef5
 8005dd8:	08005ef5 	.word	0x08005ef5
 8005ddc:	08005e73 	.word	0x08005e73
 8005de0:	08005ef5 	.word	0x08005ef5
 8005de4:	08005ef5 	.word	0x08005ef5
 8005de8:	08005ef5 	.word	0x08005ef5
 8005dec:	08005eb3 	.word	0x08005eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fa02 	bl	8006200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0208 	orr.w	r2, r2, #8
 8005e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0204 	bic.w	r2, r2, #4
 8005e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6999      	ldr	r1, [r3, #24]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	619a      	str	r2, [r3, #24]
      break;
 8005e2e:	e064      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fa48 	bl	80062cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6999      	ldr	r1, [r3, #24]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	021a      	lsls	r2, r3, #8
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	619a      	str	r2, [r3, #24]
      break;
 8005e70:	e043      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68b9      	ldr	r1, [r7, #8]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fa93 	bl	80063a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0208 	orr.w	r2, r2, #8
 8005e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0204 	bic.w	r2, r2, #4
 8005e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69d9      	ldr	r1, [r3, #28]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	61da      	str	r2, [r3, #28]
      break;
 8005eb0:	e023      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fadd 	bl	8006478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69d9      	ldr	r1, [r3, #28]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	021a      	lsls	r2, r3, #8
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	61da      	str	r2, [r3, #28]
      break;
 8005ef2:	e002      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIM_ConfigClockSource+0x1c>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e0b4      	b.n	8006092 <HAL_TIM_ConfigClockSource+0x186>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f60:	d03e      	beq.n	8005fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8005f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f66:	f200 8087 	bhi.w	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	f000 8086 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x172>
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f76:	d87f      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b70      	cmp	r3, #112	; 0x70
 8005f7a:	d01a      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8005f7c:	2b70      	cmp	r3, #112	; 0x70
 8005f7e:	d87b      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b60      	cmp	r3, #96	; 0x60
 8005f82:	d050      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x11a>
 8005f84:	2b60      	cmp	r3, #96	; 0x60
 8005f86:	d877      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b50      	cmp	r3, #80	; 0x50
 8005f8a:	d03c      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0xfa>
 8005f8c:	2b50      	cmp	r3, #80	; 0x50
 8005f8e:	d873      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d058      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x13a>
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d86f      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b30      	cmp	r3, #48	; 0x30
 8005f9a:	d064      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005f9c:	2b30      	cmp	r3, #48	; 0x30
 8005f9e:	d86b      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d060      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d867      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d05c      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d05a      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fb0:	e062      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6899      	ldr	r1, [r3, #8]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f000 fb23 	bl	800660c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	609a      	str	r2, [r3, #8]
      break;
 8005fde:	e04f      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6899      	ldr	r1, [r3, #8]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f000 fb0c 	bl	800660c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006002:	609a      	str	r2, [r3, #8]
      break;
 8006004:	e03c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6859      	ldr	r1, [r3, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	461a      	mov	r2, r3
 8006014:	f000 fa80 	bl	8006518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2150      	movs	r1, #80	; 0x50
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fad9 	bl	80065d6 <TIM_ITRx_SetConfig>
      break;
 8006024:	e02c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6859      	ldr	r1, [r3, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	461a      	mov	r2, r3
 8006034:	f000 fa9f 	bl	8006576 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2160      	movs	r1, #96	; 0x60
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fac9 	bl	80065d6 <TIM_ITRx_SetConfig>
      break;
 8006044:	e01c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6859      	ldr	r1, [r3, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	461a      	mov	r2, r3
 8006054:	f000 fa60 	bl	8006518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2140      	movs	r1, #64	; 0x40
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fab9 	bl	80065d6 <TIM_ITRx_SetConfig>
      break;
 8006064:	e00c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f000 fab0 	bl	80065d6 <TIM_ITRx_SetConfig>
      break;
 8006076:	e003      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
      break;
 800607c:	e000      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800607e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a34      	ldr	r2, [pc, #208]	; (80061e4 <TIM_Base_SetConfig+0xe4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00f      	beq.n	8006138 <TIM_Base_SetConfig+0x38>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611e:	d00b      	beq.n	8006138 <TIM_Base_SetConfig+0x38>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a31      	ldr	r2, [pc, #196]	; (80061e8 <TIM_Base_SetConfig+0xe8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d007      	beq.n	8006138 <TIM_Base_SetConfig+0x38>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a30      	ldr	r2, [pc, #192]	; (80061ec <TIM_Base_SetConfig+0xec>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_Base_SetConfig+0x38>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a2f      	ldr	r2, [pc, #188]	; (80061f0 <TIM_Base_SetConfig+0xf0>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d108      	bne.n	800614a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a25      	ldr	r2, [pc, #148]	; (80061e4 <TIM_Base_SetConfig+0xe4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d01b      	beq.n	800618a <TIM_Base_SetConfig+0x8a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006158:	d017      	beq.n	800618a <TIM_Base_SetConfig+0x8a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a22      	ldr	r2, [pc, #136]	; (80061e8 <TIM_Base_SetConfig+0xe8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <TIM_Base_SetConfig+0x8a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a21      	ldr	r2, [pc, #132]	; (80061ec <TIM_Base_SetConfig+0xec>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00f      	beq.n	800618a <TIM_Base_SetConfig+0x8a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a20      	ldr	r2, [pc, #128]	; (80061f0 <TIM_Base_SetConfig+0xf0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00b      	beq.n	800618a <TIM_Base_SetConfig+0x8a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1f      	ldr	r2, [pc, #124]	; (80061f4 <TIM_Base_SetConfig+0xf4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d007      	beq.n	800618a <TIM_Base_SetConfig+0x8a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <TIM_Base_SetConfig+0xf8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d003      	beq.n	800618a <TIM_Base_SetConfig+0x8a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <TIM_Base_SetConfig+0xfc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d108      	bne.n	800619c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <TIM_Base_SetConfig+0xe4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d103      	bne.n	80061d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	615a      	str	r2, [r3, #20]
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f023 0201 	bic.w	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0303 	bic.w	r3, r3, #3
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f023 0302 	bic.w	r3, r3, #2
 8006248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <TIM_OC1_SetConfig+0xc8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d10c      	bne.n	8006276 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0308 	bic.w	r3, r3, #8
 8006262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f023 0304 	bic.w	r3, r3, #4
 8006274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a13      	ldr	r2, [pc, #76]	; (80062c8 <TIM_OC1_SetConfig+0xc8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d111      	bne.n	80062a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800628c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	621a      	str	r2, [r3, #32]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40010000 	.word	0x40010000

080062cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f023 0210 	bic.w	r2, r3, #16
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	021b      	lsls	r3, r3, #8
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f023 0320 	bic.w	r3, r3, #32
 8006316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a1e      	ldr	r2, [pc, #120]	; (80063a0 <TIM_OC2_SetConfig+0xd4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10d      	bne.n	8006348 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <TIM_OC2_SetConfig+0xd4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d113      	bne.n	8006378 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800635e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40010000 	.word	0x40010000

080063a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <TIM_OC3_SetConfig+0xd0>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d10d      	bne.n	800641e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800641c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a14      	ldr	r2, [pc, #80]	; (8006474 <TIM_OC3_SetConfig+0xd0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d113      	bne.n	800644e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800642c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	4313      	orrs	r3, r2
 800644c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	621a      	str	r2, [r3, #32]
}
 8006468:	bf00      	nop
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	40010000 	.word	0x40010000

08006478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	031b      	lsls	r3, r3, #12
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a10      	ldr	r2, [pc, #64]	; (8006514 <TIM_OC4_SetConfig+0x9c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d109      	bne.n	80064ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	019b      	lsls	r3, r3, #6
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	621a      	str	r2, [r3, #32]
}
 8006506:	bf00      	nop
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40010000 	.word	0x40010000

08006518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	f023 0201 	bic.w	r2, r3, #1
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f023 030a 	bic.w	r3, r3, #10
 8006554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006576:	b480      	push	{r7}
 8006578:	b087      	sub	sp, #28
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	f023 0210 	bic.w	r2, r3, #16
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	031b      	lsls	r3, r3, #12
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	621a      	str	r2, [r3, #32]
}
 80065ca:	bf00      	nop
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f043 0307 	orr.w	r3, r3, #7
 80065f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	609a      	str	r2, [r3, #8]
}
 8006600:	bf00      	nop
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	021a      	lsls	r2, r3, #8
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	431a      	orrs	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4313      	orrs	r3, r2
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	609a      	str	r2, [r3, #8]
}
 8006640:	bf00      	nop
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	2201      	movs	r2, #1
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a1a      	ldr	r2, [r3, #32]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	43db      	mvns	r3, r3
 800666e:	401a      	ands	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a1a      	ldr	r2, [r3, #32]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f003 031f 	and.w	r3, r3, #31
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	fa01 f303 	lsl.w	r3, r1, r3
 8006684:	431a      	orrs	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	621a      	str	r2, [r3, #32]
}
 800668a:	bf00      	nop
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
	...

08006698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e050      	b.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a1c      	ldr	r2, [pc, #112]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d018      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fc:	d013      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a18      	ldr	r2, [pc, #96]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00e      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a16      	ldr	r2, [pc, #88]	; (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d009      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a15      	ldr	r2, [pc, #84]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d004      	beq.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a13      	ldr	r2, [pc, #76]	; (8006770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d10c      	bne.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800672c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	4313      	orrs	r3, r2
 8006736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40010000 	.word	0x40010000
 8006764:	40000400 	.word	0x40000400
 8006768:	40000800 	.word	0x40000800
 800676c:	40000c00 	.word	0x40000c00
 8006770:	40014000 	.word	0x40014000

08006774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e03f      	b.n	800682e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc fc08 	bl	8002fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2224      	movs	r2, #36	; 0x24
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fc7b 	bl	80070dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695a      	ldr	r2, [r3, #20]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006804:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006814:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b0ba      	sub	sp, #232	; 0xe8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800685e:	2300      	movs	r3, #0
 8006860:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006864:	2300      	movs	r3, #0
 8006866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800686a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10f      	bne.n	800689e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <HAL_UART_IRQHandler+0x66>
 800688a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fb65 	bl	8006f66 <UART_Receive_IT>
      return;
 800689c:	e256      	b.n	8006d4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800689e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80de 	beq.w	8006a64 <HAL_UART_IRQHandler+0x22c>
 80068a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d106      	bne.n	80068c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 80d1 	beq.w	8006a64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <HAL_UART_IRQHandler+0xae>
 80068ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	f043 0201 	orr.w	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <HAL_UART_IRQHandler+0xd2>
 80068f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	f043 0202 	orr.w	r2, r3, #2
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <HAL_UART_IRQHandler+0xf6>
 8006916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	f043 0204 	orr.w	r2, r3, #4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d011      	beq.n	800695e <HAL_UART_IRQHandler+0x126>
 800693a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	d105      	bne.n	8006952 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d005      	beq.n	800695e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f043 0208 	orr.w	r2, r3, #8
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 81ed 	beq.w	8006d42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <HAL_UART_IRQHandler+0x14e>
 8006974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 faf0 	bl	8006f66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b40      	cmp	r3, #64	; 0x40
 8006992:	bf0c      	ite	eq
 8006994:	2301      	moveq	r3, #1
 8006996:	2300      	movne	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <HAL_UART_IRQHandler+0x17a>
 80069aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d04f      	beq.n	8006a52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f9f8 	bl	8006da8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d141      	bne.n	8006a4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3314      	adds	r3, #20
 80069cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3314      	adds	r3, #20
 80069ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1d9      	bne.n	80069c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d013      	beq.n	8006a42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	4a7d      	ldr	r2, [pc, #500]	; (8006c14 <HAL_UART_IRQHandler+0x3dc>)
 8006a20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fc feac 	bl	8003784 <HAL_DMA_Abort_IT>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d016      	beq.n	8006a60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	e00e      	b.n	8006a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f99a 	bl	8006d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	e00a      	b.n	8006a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f996 	bl	8006d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e006      	b.n	8006a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f992 	bl	8006d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a5e:	e170      	b.n	8006d42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	bf00      	nop
    return;
 8006a62:	e16e      	b.n	8006d42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	f040 814a 	bne.w	8006d02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 8143 	beq.w	8006d02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 813c 	beq.w	8006d02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	60bb      	str	r3, [r7, #8]
 8006a9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	f040 80b4 	bne.w	8006c18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006abc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8140 	beq.w	8006d46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	f080 8139 	bcs.w	8006d46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ada:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae6:	f000 8088 	beq.w	8006bfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1d9      	bne.n	8006aea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3314      	adds	r3, #20
 8006b56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e1      	bne.n	8006b36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3314      	adds	r3, #20
 8006b78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3314      	adds	r3, #20
 8006b92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e3      	bne.n	8006b72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bca:	f023 0310 	bic.w	r3, r3, #16
 8006bce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006bdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006be2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e3      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fc fd55 	bl	80036a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f8c0 	bl	8006d90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c10:	e099      	b.n	8006d46 <HAL_UART_IRQHandler+0x50e>
 8006c12:	bf00      	nop
 8006c14:	08006e6f 	.word	0x08006e6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 808b 	beq.w	8006d4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8086 	beq.w	8006d4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	330c      	adds	r3, #12
 8006c44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c62:	647a      	str	r2, [r7, #68]	; 0x44
 8006c64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e3      	bne.n	8006c3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3314      	adds	r3, #20
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	623b      	str	r3, [r7, #32]
   return(result);
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3314      	adds	r3, #20
 8006c96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e3      	bne.n	8006c76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	330c      	adds	r3, #12
 8006cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0310 	bic.w	r3, r3, #16
 8006cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	330c      	adds	r3, #12
 8006cdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ce0:	61fa      	str	r2, [r7, #28]
 8006ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	69b9      	ldr	r1, [r7, #24]
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	617b      	str	r3, [r7, #20]
   return(result);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e3      	bne.n	8006cbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f848 	bl	8006d90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d00:	e023      	b.n	8006d4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <HAL_UART_IRQHandler+0x4ea>
 8006d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f8bb 	bl	8006e96 <UART_Transmit_IT>
    return;
 8006d20:	e014      	b.n	8006d4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00e      	beq.n	8006d4c <HAL_UART_IRQHandler+0x514>
 8006d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f8fb 	bl	8006f36 <UART_EndTransmit_IT>
    return;
 8006d40:	e004      	b.n	8006d4c <HAL_UART_IRQHandler+0x514>
    return;
 8006d42:	bf00      	nop
 8006d44:	e002      	b.n	8006d4c <HAL_UART_IRQHandler+0x514>
      return;
 8006d46:	bf00      	nop
 8006d48:	e000      	b.n	8006d4c <HAL_UART_IRQHandler+0x514>
      return;
 8006d4a:	bf00      	nop
  }
}
 8006d4c:	37e8      	adds	r7, #232	; 0xe8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop

08006d54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b095      	sub	sp, #84	; 0x54
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	330c      	adds	r3, #12
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dd0:	643a      	str	r2, [r7, #64]	; 0x40
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e5      	bne.n	8006db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3314      	adds	r3, #20
 8006dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	e853 3f00 	ldrex	r3, [r3]
 8006df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f023 0301 	bic.w	r3, r3, #1
 8006dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3314      	adds	r3, #20
 8006e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e5      	bne.n	8006de4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d119      	bne.n	8006e54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f023 0310 	bic.w	r3, r3, #16
 8006e36:	647b      	str	r3, [r7, #68]	; 0x44
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e40:	61ba      	str	r2, [r7, #24]
 8006e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6979      	ldr	r1, [r7, #20]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e5      	bne.n	8006e20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e62:	bf00      	nop
 8006e64:	3754      	adds	r7, #84	; 0x54
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff ff77 	bl	8006d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b21      	cmp	r3, #33	; 0x21
 8006ea8:	d13e      	bne.n	8006f28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb2:	d114      	bne.n	8006ede <UART_Transmit_IT+0x48>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d110      	bne.n	8006ede <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ed0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	1c9a      	adds	r2, r3, #2
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	621a      	str	r2, [r3, #32]
 8006edc:	e008      	b.n	8006ef0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	1c59      	adds	r1, r3, #1
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6211      	str	r1, [r2, #32]
 8006ee8:	781a      	ldrb	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4619      	mov	r1, r3
 8006efe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10f      	bne.n	8006f24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e000      	b.n	8006f2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f28:	2302      	movs	r3, #2
  }
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff fefc 	bl	8006d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b08c      	sub	sp, #48	; 0x30
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b22      	cmp	r3, #34	; 0x22
 8006f78:	f040 80ab 	bne.w	80070d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f84:	d117      	bne.n	8006fb6 <UART_Receive_IT+0x50>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d113      	bne.n	8006fb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8006fb4:	e026      	b.n	8007004 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc8:	d007      	beq.n	8006fda <UART_Receive_IT+0x74>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <UART_Receive_IT+0x82>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	e008      	b.n	8006ffa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b29b      	uxth	r3, r3
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	4619      	mov	r1, r3
 8007012:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007014:	2b00      	cmp	r3, #0
 8007016:	d15a      	bne.n	80070ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0220 	bic.w	r2, r2, #32
 8007026:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695a      	ldr	r2, [r3, #20]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0201 	bic.w	r2, r2, #1
 8007046:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	2b01      	cmp	r3, #1
 8007056:	d135      	bne.n	80070c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	330c      	adds	r3, #12
 8007064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	613b      	str	r3, [r7, #16]
   return(result);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f023 0310 	bic.w	r3, r3, #16
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707e:	623a      	str	r2, [r7, #32]
 8007080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	69f9      	ldr	r1, [r7, #28]
 8007084:	6a3a      	ldr	r2, [r7, #32]
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	61bb      	str	r3, [r7, #24]
   return(result);
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e5      	bne.n	800705e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b10      	cmp	r3, #16
 800709e:	d10a      	bne.n	80070b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff fe67 	bl	8006d90 <HAL_UARTEx_RxEventCallback>
 80070c2:	e002      	b.n	80070ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fe4f 	bl	8006d68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e002      	b.n	80070d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	e000      	b.n	80070d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070d2:	2302      	movs	r3, #2
  }
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3730      	adds	r7, #48	; 0x30
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e0:	b0c0      	sub	sp, #256	; 0x100
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f8:	68d9      	ldr	r1, [r3, #12]
 80070fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	ea40 0301 	orr.w	r3, r0, r1
 8007104:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	431a      	orrs	r2, r3
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	431a      	orrs	r2, r3
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	4313      	orrs	r3, r2
 8007124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007134:	f021 010c 	bic.w	r1, r1, #12
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007142:	430b      	orrs	r3, r1
 8007144:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007156:	6999      	ldr	r1, [r3, #24]
 8007158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	ea40 0301 	orr.w	r3, r0, r1
 8007162:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	4b8f      	ldr	r3, [pc, #572]	; (80073a8 <UART_SetConfig+0x2cc>)
 800716c:	429a      	cmp	r2, r3
 800716e:	d005      	beq.n	800717c <UART_SetConfig+0xa0>
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	4b8d      	ldr	r3, [pc, #564]	; (80073ac <UART_SetConfig+0x2d0>)
 8007178:	429a      	cmp	r2, r3
 800717a:	d104      	bne.n	8007186 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800717c:	f7fe fb34 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 8007180:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007184:	e003      	b.n	800718e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007186:	f7fe fb1b 	bl	80057c0 <HAL_RCC_GetPCLK1Freq>
 800718a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007198:	f040 810c 	bne.w	80073b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800719c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071ae:	4622      	mov	r2, r4
 80071b0:	462b      	mov	r3, r5
 80071b2:	1891      	adds	r1, r2, r2
 80071b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80071b6:	415b      	adcs	r3, r3
 80071b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071be:	4621      	mov	r1, r4
 80071c0:	eb12 0801 	adds.w	r8, r2, r1
 80071c4:	4629      	mov	r1, r5
 80071c6:	eb43 0901 	adc.w	r9, r3, r1
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071de:	4690      	mov	r8, r2
 80071e0:	4699      	mov	r9, r3
 80071e2:	4623      	mov	r3, r4
 80071e4:	eb18 0303 	adds.w	r3, r8, r3
 80071e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071ec:	462b      	mov	r3, r5
 80071ee:	eb49 0303 	adc.w	r3, r9, r3
 80071f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007202:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800720a:	460b      	mov	r3, r1
 800720c:	18db      	adds	r3, r3, r3
 800720e:	653b      	str	r3, [r7, #80]	; 0x50
 8007210:	4613      	mov	r3, r2
 8007212:	eb42 0303 	adc.w	r3, r2, r3
 8007216:	657b      	str	r3, [r7, #84]	; 0x54
 8007218:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800721c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007220:	f7f9 fcbe 	bl	8000ba0 <__aeabi_uldivmod>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4b61      	ldr	r3, [pc, #388]	; (80073b0 <UART_SetConfig+0x2d4>)
 800722a:	fba3 2302 	umull	r2, r3, r3, r2
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	011c      	lsls	r4, r3, #4
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800723c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007240:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	1891      	adds	r1, r2, r2
 800724a:	64b9      	str	r1, [r7, #72]	; 0x48
 800724c:	415b      	adcs	r3, r3
 800724e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007254:	4641      	mov	r1, r8
 8007256:	eb12 0a01 	adds.w	sl, r2, r1
 800725a:	4649      	mov	r1, r9
 800725c:	eb43 0b01 	adc.w	fp, r3, r1
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800726c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007274:	4692      	mov	sl, r2
 8007276:	469b      	mov	fp, r3
 8007278:	4643      	mov	r3, r8
 800727a:	eb1a 0303 	adds.w	r3, sl, r3
 800727e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007282:	464b      	mov	r3, r9
 8007284:	eb4b 0303 	adc.w	r3, fp, r3
 8007288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007298:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800729c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072a0:	460b      	mov	r3, r1
 80072a2:	18db      	adds	r3, r3, r3
 80072a4:	643b      	str	r3, [r7, #64]	; 0x40
 80072a6:	4613      	mov	r3, r2
 80072a8:	eb42 0303 	adc.w	r3, r2, r3
 80072ac:	647b      	str	r3, [r7, #68]	; 0x44
 80072ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072b6:	f7f9 fc73 	bl	8000ba0 <__aeabi_uldivmod>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4611      	mov	r1, r2
 80072c0:	4b3b      	ldr	r3, [pc, #236]	; (80073b0 <UART_SetConfig+0x2d4>)
 80072c2:	fba3 2301 	umull	r2, r3, r3, r1
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	2264      	movs	r2, #100	; 0x64
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	1acb      	subs	r3, r1, r3
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072d6:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <UART_SetConfig+0x2d4>)
 80072d8:	fba3 2302 	umull	r2, r3, r3, r2
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072e4:	441c      	add	r4, r3
 80072e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80072f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80072f8:	4642      	mov	r2, r8
 80072fa:	464b      	mov	r3, r9
 80072fc:	1891      	adds	r1, r2, r2
 80072fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007300:	415b      	adcs	r3, r3
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007308:	4641      	mov	r1, r8
 800730a:	1851      	adds	r1, r2, r1
 800730c:	6339      	str	r1, [r7, #48]	; 0x30
 800730e:	4649      	mov	r1, r9
 8007310:	414b      	adcs	r3, r1
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007320:	4659      	mov	r1, fp
 8007322:	00cb      	lsls	r3, r1, #3
 8007324:	4651      	mov	r1, sl
 8007326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800732a:	4651      	mov	r1, sl
 800732c:	00ca      	lsls	r2, r1, #3
 800732e:	4610      	mov	r0, r2
 8007330:	4619      	mov	r1, r3
 8007332:	4603      	mov	r3, r0
 8007334:	4642      	mov	r2, r8
 8007336:	189b      	adds	r3, r3, r2
 8007338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800733c:	464b      	mov	r3, r9
 800733e:	460a      	mov	r2, r1
 8007340:	eb42 0303 	adc.w	r3, r2, r3
 8007344:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007354:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800735c:	460b      	mov	r3, r1
 800735e:	18db      	adds	r3, r3, r3
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
 8007362:	4613      	mov	r3, r2
 8007364:	eb42 0303 	adc.w	r3, r2, r3
 8007368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800736a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800736e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007372:	f7f9 fc15 	bl	8000ba0 <__aeabi_uldivmod>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <UART_SetConfig+0x2d4>)
 800737c:	fba3 1302 	umull	r1, r3, r3, r2
 8007380:	095b      	lsrs	r3, r3, #5
 8007382:	2164      	movs	r1, #100	; 0x64
 8007384:	fb01 f303 	mul.w	r3, r1, r3
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	3332      	adds	r3, #50	; 0x32
 800738e:	4a08      	ldr	r2, [pc, #32]	; (80073b0 <UART_SetConfig+0x2d4>)
 8007390:	fba2 2303 	umull	r2, r3, r2, r3
 8007394:	095b      	lsrs	r3, r3, #5
 8007396:	f003 0207 	and.w	r2, r3, #7
 800739a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4422      	add	r2, r4
 80073a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073a4:	e105      	b.n	80075b2 <UART_SetConfig+0x4d6>
 80073a6:	bf00      	nop
 80073a8:	40011000 	.word	0x40011000
 80073ac:	40011400 	.word	0x40011400
 80073b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073b8:	2200      	movs	r2, #0
 80073ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073c6:	4642      	mov	r2, r8
 80073c8:	464b      	mov	r3, r9
 80073ca:	1891      	adds	r1, r2, r2
 80073cc:	6239      	str	r1, [r7, #32]
 80073ce:	415b      	adcs	r3, r3
 80073d0:	627b      	str	r3, [r7, #36]	; 0x24
 80073d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073d6:	4641      	mov	r1, r8
 80073d8:	1854      	adds	r4, r2, r1
 80073da:	4649      	mov	r1, r9
 80073dc:	eb43 0501 	adc.w	r5, r3, r1
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	f04f 0300 	mov.w	r3, #0
 80073e8:	00eb      	lsls	r3, r5, #3
 80073ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073ee:	00e2      	lsls	r2, r4, #3
 80073f0:	4614      	mov	r4, r2
 80073f2:	461d      	mov	r5, r3
 80073f4:	4643      	mov	r3, r8
 80073f6:	18e3      	adds	r3, r4, r3
 80073f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073fc:	464b      	mov	r3, r9
 80073fe:	eb45 0303 	adc.w	r3, r5, r3
 8007402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007416:	f04f 0200 	mov.w	r2, #0
 800741a:	f04f 0300 	mov.w	r3, #0
 800741e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007422:	4629      	mov	r1, r5
 8007424:	008b      	lsls	r3, r1, #2
 8007426:	4621      	mov	r1, r4
 8007428:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800742c:	4621      	mov	r1, r4
 800742e:	008a      	lsls	r2, r1, #2
 8007430:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007434:	f7f9 fbb4 	bl	8000ba0 <__aeabi_uldivmod>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4b60      	ldr	r3, [pc, #384]	; (80075c0 <UART_SetConfig+0x4e4>)
 800743e:	fba3 2302 	umull	r2, r3, r3, r2
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	011c      	lsls	r4, r3, #4
 8007446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800744a:	2200      	movs	r2, #0
 800744c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007450:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007454:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007458:	4642      	mov	r2, r8
 800745a:	464b      	mov	r3, r9
 800745c:	1891      	adds	r1, r2, r2
 800745e:	61b9      	str	r1, [r7, #24]
 8007460:	415b      	adcs	r3, r3
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007468:	4641      	mov	r1, r8
 800746a:	1851      	adds	r1, r2, r1
 800746c:	6139      	str	r1, [r7, #16]
 800746e:	4649      	mov	r1, r9
 8007470:	414b      	adcs	r3, r1
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007480:	4659      	mov	r1, fp
 8007482:	00cb      	lsls	r3, r1, #3
 8007484:	4651      	mov	r1, sl
 8007486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800748a:	4651      	mov	r1, sl
 800748c:	00ca      	lsls	r2, r1, #3
 800748e:	4610      	mov	r0, r2
 8007490:	4619      	mov	r1, r3
 8007492:	4603      	mov	r3, r0
 8007494:	4642      	mov	r2, r8
 8007496:	189b      	adds	r3, r3, r2
 8007498:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800749c:	464b      	mov	r3, r9
 800749e:	460a      	mov	r2, r1
 80074a0:	eb42 0303 	adc.w	r3, r2, r3
 80074a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80074b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074c0:	4649      	mov	r1, r9
 80074c2:	008b      	lsls	r3, r1, #2
 80074c4:	4641      	mov	r1, r8
 80074c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ca:	4641      	mov	r1, r8
 80074cc:	008a      	lsls	r2, r1, #2
 80074ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074d2:	f7f9 fb65 	bl	8000ba0 <__aeabi_uldivmod>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4b39      	ldr	r3, [pc, #228]	; (80075c0 <UART_SetConfig+0x4e4>)
 80074dc:	fba3 1302 	umull	r1, r3, r3, r2
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	2164      	movs	r1, #100	; 0x64
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	3332      	adds	r3, #50	; 0x32
 80074ee:	4a34      	ldr	r2, [pc, #208]	; (80075c0 <UART_SetConfig+0x4e4>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	095b      	lsrs	r3, r3, #5
 80074f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074fa:	441c      	add	r4, r3
 80074fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007500:	2200      	movs	r2, #0
 8007502:	673b      	str	r3, [r7, #112]	; 0x70
 8007504:	677a      	str	r2, [r7, #116]	; 0x74
 8007506:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800750a:	4642      	mov	r2, r8
 800750c:	464b      	mov	r3, r9
 800750e:	1891      	adds	r1, r2, r2
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	415b      	adcs	r3, r3
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800751a:	4641      	mov	r1, r8
 800751c:	1851      	adds	r1, r2, r1
 800751e:	6039      	str	r1, [r7, #0]
 8007520:	4649      	mov	r1, r9
 8007522:	414b      	adcs	r3, r1
 8007524:	607b      	str	r3, [r7, #4]
 8007526:	f04f 0200 	mov.w	r2, #0
 800752a:	f04f 0300 	mov.w	r3, #0
 800752e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007532:	4659      	mov	r1, fp
 8007534:	00cb      	lsls	r3, r1, #3
 8007536:	4651      	mov	r1, sl
 8007538:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800753c:	4651      	mov	r1, sl
 800753e:	00ca      	lsls	r2, r1, #3
 8007540:	4610      	mov	r0, r2
 8007542:	4619      	mov	r1, r3
 8007544:	4603      	mov	r3, r0
 8007546:	4642      	mov	r2, r8
 8007548:	189b      	adds	r3, r3, r2
 800754a:	66bb      	str	r3, [r7, #104]	; 0x68
 800754c:	464b      	mov	r3, r9
 800754e:	460a      	mov	r2, r1
 8007550:	eb42 0303 	adc.w	r3, r2, r3
 8007554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	663b      	str	r3, [r7, #96]	; 0x60
 8007560:	667a      	str	r2, [r7, #100]	; 0x64
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800756e:	4649      	mov	r1, r9
 8007570:	008b      	lsls	r3, r1, #2
 8007572:	4641      	mov	r1, r8
 8007574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007578:	4641      	mov	r1, r8
 800757a:	008a      	lsls	r2, r1, #2
 800757c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007580:	f7f9 fb0e 	bl	8000ba0 <__aeabi_uldivmod>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <UART_SetConfig+0x4e4>)
 800758a:	fba3 1302 	umull	r1, r3, r3, r2
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	2164      	movs	r1, #100	; 0x64
 8007592:	fb01 f303 	mul.w	r3, r1, r3
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	3332      	adds	r3, #50	; 0x32
 800759c:	4a08      	ldr	r2, [pc, #32]	; (80075c0 <UART_SetConfig+0x4e4>)
 800759e:	fba2 2303 	umull	r2, r3, r2, r3
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	f003 020f 	and.w	r2, r3, #15
 80075a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4422      	add	r2, r4
 80075b0:	609a      	str	r2, [r3, #8]
}
 80075b2:	bf00      	nop
 80075b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075b8:	46bd      	mov	sp, r7
 80075ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075be:	bf00      	nop
 80075c0:	51eb851f 	.word	0x51eb851f

080075c4 <__errno>:
 80075c4:	4b01      	ldr	r3, [pc, #4]	; (80075cc <__errno+0x8>)
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	20000054 	.word	0x20000054

080075d0 <__libc_init_array>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	4d0d      	ldr	r5, [pc, #52]	; (8007608 <__libc_init_array+0x38>)
 80075d4:	4c0d      	ldr	r4, [pc, #52]	; (800760c <__libc_init_array+0x3c>)
 80075d6:	1b64      	subs	r4, r4, r5
 80075d8:	10a4      	asrs	r4, r4, #2
 80075da:	2600      	movs	r6, #0
 80075dc:	42a6      	cmp	r6, r4
 80075de:	d109      	bne.n	80075f4 <__libc_init_array+0x24>
 80075e0:	4d0b      	ldr	r5, [pc, #44]	; (8007610 <__libc_init_array+0x40>)
 80075e2:	4c0c      	ldr	r4, [pc, #48]	; (8007614 <__libc_init_array+0x44>)
 80075e4:	f001 fb9a 	bl	8008d1c <_init>
 80075e8:	1b64      	subs	r4, r4, r5
 80075ea:	10a4      	asrs	r4, r4, #2
 80075ec:	2600      	movs	r6, #0
 80075ee:	42a6      	cmp	r6, r4
 80075f0:	d105      	bne.n	80075fe <__libc_init_array+0x2e>
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f8:	4798      	blx	r3
 80075fa:	3601      	adds	r6, #1
 80075fc:	e7ee      	b.n	80075dc <__libc_init_array+0xc>
 80075fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007602:	4798      	blx	r3
 8007604:	3601      	adds	r6, #1
 8007606:	e7f2      	b.n	80075ee <__libc_init_array+0x1e>
 8007608:	08008f40 	.word	0x08008f40
 800760c:	08008f40 	.word	0x08008f40
 8007610:	08008f40 	.word	0x08008f40
 8007614:	08008f44 	.word	0x08008f44

08007618 <memset>:
 8007618:	4402      	add	r2, r0
 800761a:	4603      	mov	r3, r0
 800761c:	4293      	cmp	r3, r2
 800761e:	d100      	bne.n	8007622 <memset+0xa>
 8007620:	4770      	bx	lr
 8007622:	f803 1b01 	strb.w	r1, [r3], #1
 8007626:	e7f9      	b.n	800761c <memset+0x4>

08007628 <sin>:
 8007628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800762a:	ec53 2b10 	vmov	r2, r3, d0
 800762e:	4828      	ldr	r0, [pc, #160]	; (80076d0 <sin+0xa8>)
 8007630:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007634:	4281      	cmp	r1, r0
 8007636:	dc07      	bgt.n	8007648 <sin+0x20>
 8007638:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80076c8 <sin+0xa0>
 800763c:	2000      	movs	r0, #0
 800763e:	b005      	add	sp, #20
 8007640:	f85d eb04 	ldr.w	lr, [sp], #4
 8007644:	f001 b994 	b.w	8008970 <__kernel_sin>
 8007648:	4822      	ldr	r0, [pc, #136]	; (80076d4 <sin+0xac>)
 800764a:	4281      	cmp	r1, r0
 800764c:	dd09      	ble.n	8007662 <sin+0x3a>
 800764e:	ee10 0a10 	vmov	r0, s0
 8007652:	4619      	mov	r1, r3
 8007654:	f7f8 fdc4 	bl	80001e0 <__aeabi_dsub>
 8007658:	ec41 0b10 	vmov	d0, r0, r1
 800765c:	b005      	add	sp, #20
 800765e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007662:	4668      	mov	r0, sp
 8007664:	f000 faac 	bl	8007bc0 <__ieee754_rem_pio2>
 8007668:	f000 0003 	and.w	r0, r0, #3
 800766c:	2801      	cmp	r0, #1
 800766e:	d00c      	beq.n	800768a <sin+0x62>
 8007670:	2802      	cmp	r0, #2
 8007672:	d011      	beq.n	8007698 <sin+0x70>
 8007674:	b9f0      	cbnz	r0, 80076b4 <sin+0x8c>
 8007676:	ed9d 1b02 	vldr	d1, [sp, #8]
 800767a:	ed9d 0b00 	vldr	d0, [sp]
 800767e:	2001      	movs	r0, #1
 8007680:	f001 f976 	bl	8008970 <__kernel_sin>
 8007684:	ec51 0b10 	vmov	r0, r1, d0
 8007688:	e7e6      	b.n	8007658 <sin+0x30>
 800768a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800768e:	ed9d 0b00 	vldr	d0, [sp]
 8007692:	f000 fd55 	bl	8008140 <__kernel_cos>
 8007696:	e7f5      	b.n	8007684 <sin+0x5c>
 8007698:	ed9d 1b02 	vldr	d1, [sp, #8]
 800769c:	ed9d 0b00 	vldr	d0, [sp]
 80076a0:	2001      	movs	r0, #1
 80076a2:	f001 f965 	bl	8008970 <__kernel_sin>
 80076a6:	ec53 2b10 	vmov	r2, r3, d0
 80076aa:	ee10 0a10 	vmov	r0, s0
 80076ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80076b2:	e7d1      	b.n	8007658 <sin+0x30>
 80076b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076b8:	ed9d 0b00 	vldr	d0, [sp]
 80076bc:	f000 fd40 	bl	8008140 <__kernel_cos>
 80076c0:	e7f1      	b.n	80076a6 <sin+0x7e>
 80076c2:	bf00      	nop
 80076c4:	f3af 8000 	nop.w
	...
 80076d0:	3fe921fb 	.word	0x3fe921fb
 80076d4:	7fefffff 	.word	0x7fefffff

080076d8 <asin>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	ed2d 8b02 	vpush	{d8}
 80076de:	ec55 4b10 	vmov	r4, r5, d0
 80076e2:	f000 f859 	bl	8007798 <__ieee754_asin>
 80076e6:	4622      	mov	r2, r4
 80076e8:	462b      	mov	r3, r5
 80076ea:	4620      	mov	r0, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	eeb0 8a40 	vmov.f32	s16, s0
 80076f2:	eef0 8a60 	vmov.f32	s17, s1
 80076f6:	f7f9 f9c5 	bl	8000a84 <__aeabi_dcmpun>
 80076fa:	b9a8      	cbnz	r0, 8007728 <asin+0x50>
 80076fc:	ec45 4b10 	vmov	d0, r4, r5
 8007700:	f001 f9f4 	bl	8008aec <fabs>
 8007704:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <asin+0x60>)
 8007706:	ec51 0b10 	vmov	r0, r1, d0
 800770a:	2200      	movs	r2, #0
 800770c:	f7f9 f9b0 	bl	8000a70 <__aeabi_dcmpgt>
 8007710:	b150      	cbz	r0, 8007728 <asin+0x50>
 8007712:	f7ff ff57 	bl	80075c4 <__errno>
 8007716:	ecbd 8b02 	vpop	{d8}
 800771a:	2321      	movs	r3, #33	; 0x21
 800771c:	6003      	str	r3, [r0, #0]
 800771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007722:	4806      	ldr	r0, [pc, #24]	; (800773c <asin+0x64>)
 8007724:	f001 ba6c 	b.w	8008c00 <nan>
 8007728:	eeb0 0a48 	vmov.f32	s0, s16
 800772c:	eef0 0a68 	vmov.f32	s1, s17
 8007730:	ecbd 8b02 	vpop	{d8}
 8007734:	bd38      	pop	{r3, r4, r5, pc}
 8007736:	bf00      	nop
 8007738:	3ff00000 	.word	0x3ff00000
 800773c:	08008d58 	.word	0x08008d58

08007740 <sqrt>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	ed2d 8b02 	vpush	{d8}
 8007746:	ec55 4b10 	vmov	r4, r5, d0
 800774a:	f000 fc45 	bl	8007fd8 <__ieee754_sqrt>
 800774e:	4622      	mov	r2, r4
 8007750:	462b      	mov	r3, r5
 8007752:	4620      	mov	r0, r4
 8007754:	4629      	mov	r1, r5
 8007756:	eeb0 8a40 	vmov.f32	s16, s0
 800775a:	eef0 8a60 	vmov.f32	s17, s1
 800775e:	f7f9 f991 	bl	8000a84 <__aeabi_dcmpun>
 8007762:	b990      	cbnz	r0, 800778a <sqrt+0x4a>
 8007764:	2200      	movs	r2, #0
 8007766:	2300      	movs	r3, #0
 8007768:	4620      	mov	r0, r4
 800776a:	4629      	mov	r1, r5
 800776c:	f7f9 f962 	bl	8000a34 <__aeabi_dcmplt>
 8007770:	b158      	cbz	r0, 800778a <sqrt+0x4a>
 8007772:	f7ff ff27 	bl	80075c4 <__errno>
 8007776:	2321      	movs	r3, #33	; 0x21
 8007778:	6003      	str	r3, [r0, #0]
 800777a:	2200      	movs	r2, #0
 800777c:	2300      	movs	r3, #0
 800777e:	4610      	mov	r0, r2
 8007780:	4619      	mov	r1, r3
 8007782:	f7f9 f80f 	bl	80007a4 <__aeabi_ddiv>
 8007786:	ec41 0b18 	vmov	d8, r0, r1
 800778a:	eeb0 0a48 	vmov.f32	s0, s16
 800778e:	eef0 0a68 	vmov.f32	s1, s17
 8007792:	ecbd 8b02 	vpop	{d8}
 8007796:	bd38      	pop	{r3, r4, r5, pc}

08007798 <__ieee754_asin>:
 8007798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779c:	ed2d 8b04 	vpush	{d8-d9}
 80077a0:	ec55 4b10 	vmov	r4, r5, d0
 80077a4:	4bcc      	ldr	r3, [pc, #816]	; (8007ad8 <__ieee754_asin+0x340>)
 80077a6:	b083      	sub	sp, #12
 80077a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80077ac:	4598      	cmp	r8, r3
 80077ae:	9501      	str	r5, [sp, #4]
 80077b0:	dd35      	ble.n	800781e <__ieee754_asin+0x86>
 80077b2:	ee10 3a10 	vmov	r3, s0
 80077b6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80077ba:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80077be:	ea58 0303 	orrs.w	r3, r8, r3
 80077c2:	d117      	bne.n	80077f4 <__ieee754_asin+0x5c>
 80077c4:	a3aa      	add	r3, pc, #680	; (adr r3, 8007a70 <__ieee754_asin+0x2d8>)
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	ee10 0a10 	vmov	r0, s0
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7f8 febe 	bl	8000550 <__aeabi_dmul>
 80077d4:	a3a8      	add	r3, pc, #672	; (adr r3, 8007a78 <__ieee754_asin+0x2e0>)
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	4606      	mov	r6, r0
 80077dc:	460f      	mov	r7, r1
 80077de:	4620      	mov	r0, r4
 80077e0:	4629      	mov	r1, r5
 80077e2:	f7f8 feb5 	bl	8000550 <__aeabi_dmul>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4630      	mov	r0, r6
 80077ec:	4639      	mov	r1, r7
 80077ee:	f7f8 fcf9 	bl	80001e4 <__adddf3>
 80077f2:	e00b      	b.n	800780c <__ieee754_asin+0x74>
 80077f4:	ee10 2a10 	vmov	r2, s0
 80077f8:	462b      	mov	r3, r5
 80077fa:	ee10 0a10 	vmov	r0, s0
 80077fe:	4629      	mov	r1, r5
 8007800:	f7f8 fcee 	bl	80001e0 <__aeabi_dsub>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	f7f8 ffcc 	bl	80007a4 <__aeabi_ddiv>
 800780c:	4604      	mov	r4, r0
 800780e:	460d      	mov	r5, r1
 8007810:	ec45 4b10 	vmov	d0, r4, r5
 8007814:	b003      	add	sp, #12
 8007816:	ecbd 8b04 	vpop	{d8-d9}
 800781a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781e:	4baf      	ldr	r3, [pc, #700]	; (8007adc <__ieee754_asin+0x344>)
 8007820:	4598      	cmp	r8, r3
 8007822:	dc11      	bgt.n	8007848 <__ieee754_asin+0xb0>
 8007824:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007828:	f280 80ae 	bge.w	8007988 <__ieee754_asin+0x1f0>
 800782c:	a394      	add	r3, pc, #592	; (adr r3, 8007a80 <__ieee754_asin+0x2e8>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	ee10 0a10 	vmov	r0, s0
 8007836:	4629      	mov	r1, r5
 8007838:	f7f8 fcd4 	bl	80001e4 <__adddf3>
 800783c:	4ba8      	ldr	r3, [pc, #672]	; (8007ae0 <__ieee754_asin+0x348>)
 800783e:	2200      	movs	r2, #0
 8007840:	f7f9 f916 	bl	8000a70 <__aeabi_dcmpgt>
 8007844:	2800      	cmp	r0, #0
 8007846:	d1e3      	bne.n	8007810 <__ieee754_asin+0x78>
 8007848:	ec45 4b10 	vmov	d0, r4, r5
 800784c:	f001 f94e 	bl	8008aec <fabs>
 8007850:	49a3      	ldr	r1, [pc, #652]	; (8007ae0 <__ieee754_asin+0x348>)
 8007852:	ec53 2b10 	vmov	r2, r3, d0
 8007856:	2000      	movs	r0, #0
 8007858:	f7f8 fcc2 	bl	80001e0 <__aeabi_dsub>
 800785c:	4ba1      	ldr	r3, [pc, #644]	; (8007ae4 <__ieee754_asin+0x34c>)
 800785e:	2200      	movs	r2, #0
 8007860:	f7f8 fe76 	bl	8000550 <__aeabi_dmul>
 8007864:	a388      	add	r3, pc, #544	; (adr r3, 8007a88 <__ieee754_asin+0x2f0>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	4604      	mov	r4, r0
 800786c:	460d      	mov	r5, r1
 800786e:	f7f8 fe6f 	bl	8000550 <__aeabi_dmul>
 8007872:	a387      	add	r3, pc, #540	; (adr r3, 8007a90 <__ieee754_asin+0x2f8>)
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f7f8 fcb4 	bl	80001e4 <__adddf3>
 800787c:	4622      	mov	r2, r4
 800787e:	462b      	mov	r3, r5
 8007880:	f7f8 fe66 	bl	8000550 <__aeabi_dmul>
 8007884:	a384      	add	r3, pc, #528	; (adr r3, 8007a98 <__ieee754_asin+0x300>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f7f8 fca9 	bl	80001e0 <__aeabi_dsub>
 800788e:	4622      	mov	r2, r4
 8007890:	462b      	mov	r3, r5
 8007892:	f7f8 fe5d 	bl	8000550 <__aeabi_dmul>
 8007896:	a382      	add	r3, pc, #520	; (adr r3, 8007aa0 <__ieee754_asin+0x308>)
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f7f8 fca2 	bl	80001e4 <__adddf3>
 80078a0:	4622      	mov	r2, r4
 80078a2:	462b      	mov	r3, r5
 80078a4:	f7f8 fe54 	bl	8000550 <__aeabi_dmul>
 80078a8:	a37f      	add	r3, pc, #508	; (adr r3, 8007aa8 <__ieee754_asin+0x310>)
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f7f8 fc97 	bl	80001e0 <__aeabi_dsub>
 80078b2:	4622      	mov	r2, r4
 80078b4:	462b      	mov	r3, r5
 80078b6:	f7f8 fe4b 	bl	8000550 <__aeabi_dmul>
 80078ba:	a37d      	add	r3, pc, #500	; (adr r3, 8007ab0 <__ieee754_asin+0x318>)
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	f7f8 fc90 	bl	80001e4 <__adddf3>
 80078c4:	4622      	mov	r2, r4
 80078c6:	462b      	mov	r3, r5
 80078c8:	f7f8 fe42 	bl	8000550 <__aeabi_dmul>
 80078cc:	a37a      	add	r3, pc, #488	; (adr r3, 8007ab8 <__ieee754_asin+0x320>)
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	ec41 0b18 	vmov	d8, r0, r1
 80078d6:	4620      	mov	r0, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	f7f8 fe39 	bl	8000550 <__aeabi_dmul>
 80078de:	a378      	add	r3, pc, #480	; (adr r3, 8007ac0 <__ieee754_asin+0x328>)
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f7f8 fc7c 	bl	80001e0 <__aeabi_dsub>
 80078e8:	4622      	mov	r2, r4
 80078ea:	462b      	mov	r3, r5
 80078ec:	f7f8 fe30 	bl	8000550 <__aeabi_dmul>
 80078f0:	a375      	add	r3, pc, #468	; (adr r3, 8007ac8 <__ieee754_asin+0x330>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f7f8 fc75 	bl	80001e4 <__adddf3>
 80078fa:	4622      	mov	r2, r4
 80078fc:	462b      	mov	r3, r5
 80078fe:	f7f8 fe27 	bl	8000550 <__aeabi_dmul>
 8007902:	a373      	add	r3, pc, #460	; (adr r3, 8007ad0 <__ieee754_asin+0x338>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fc6a 	bl	80001e0 <__aeabi_dsub>
 800790c:	4622      	mov	r2, r4
 800790e:	462b      	mov	r3, r5
 8007910:	f7f8 fe1e 	bl	8000550 <__aeabi_dmul>
 8007914:	4b72      	ldr	r3, [pc, #456]	; (8007ae0 <__ieee754_asin+0x348>)
 8007916:	2200      	movs	r2, #0
 8007918:	f7f8 fc64 	bl	80001e4 <__adddf3>
 800791c:	ec45 4b10 	vmov	d0, r4, r5
 8007920:	4606      	mov	r6, r0
 8007922:	460f      	mov	r7, r1
 8007924:	f000 fb58 	bl	8007fd8 <__ieee754_sqrt>
 8007928:	4b6f      	ldr	r3, [pc, #444]	; (8007ae8 <__ieee754_asin+0x350>)
 800792a:	4598      	cmp	r8, r3
 800792c:	ec5b ab10 	vmov	sl, fp, d0
 8007930:	f340 80dc 	ble.w	8007aec <__ieee754_asin+0x354>
 8007934:	4632      	mov	r2, r6
 8007936:	463b      	mov	r3, r7
 8007938:	ec51 0b18 	vmov	r0, r1, d8
 800793c:	f7f8 ff32 	bl	80007a4 <__aeabi_ddiv>
 8007940:	4652      	mov	r2, sl
 8007942:	465b      	mov	r3, fp
 8007944:	f7f8 fe04 	bl	8000550 <__aeabi_dmul>
 8007948:	4652      	mov	r2, sl
 800794a:	465b      	mov	r3, fp
 800794c:	f7f8 fc4a 	bl	80001e4 <__adddf3>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	f7f8 fc46 	bl	80001e4 <__adddf3>
 8007958:	a347      	add	r3, pc, #284	; (adr r3, 8007a78 <__ieee754_asin+0x2e0>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 fc3f 	bl	80001e0 <__aeabi_dsub>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	a142      	add	r1, pc, #264	; (adr r1, 8007a70 <__ieee754_asin+0x2d8>)
 8007968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800796c:	f7f8 fc38 	bl	80001e0 <__aeabi_dsub>
 8007970:	9b01      	ldr	r3, [sp, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	bfdc      	itt	le
 8007976:	4602      	movle	r2, r0
 8007978:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800797c:	4604      	mov	r4, r0
 800797e:	460d      	mov	r5, r1
 8007980:	bfdc      	itt	le
 8007982:	4614      	movle	r4, r2
 8007984:	461d      	movle	r5, r3
 8007986:	e743      	b.n	8007810 <__ieee754_asin+0x78>
 8007988:	ee10 2a10 	vmov	r2, s0
 800798c:	ee10 0a10 	vmov	r0, s0
 8007990:	462b      	mov	r3, r5
 8007992:	4629      	mov	r1, r5
 8007994:	f7f8 fddc 	bl	8000550 <__aeabi_dmul>
 8007998:	a33b      	add	r3, pc, #236	; (adr r3, 8007a88 <__ieee754_asin+0x2f0>)
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	4606      	mov	r6, r0
 80079a0:	460f      	mov	r7, r1
 80079a2:	f7f8 fdd5 	bl	8000550 <__aeabi_dmul>
 80079a6:	a33a      	add	r3, pc, #232	; (adr r3, 8007a90 <__ieee754_asin+0x2f8>)
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f7f8 fc1a 	bl	80001e4 <__adddf3>
 80079b0:	4632      	mov	r2, r6
 80079b2:	463b      	mov	r3, r7
 80079b4:	f7f8 fdcc 	bl	8000550 <__aeabi_dmul>
 80079b8:	a337      	add	r3, pc, #220	; (adr r3, 8007a98 <__ieee754_asin+0x300>)
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f7f8 fc0f 	bl	80001e0 <__aeabi_dsub>
 80079c2:	4632      	mov	r2, r6
 80079c4:	463b      	mov	r3, r7
 80079c6:	f7f8 fdc3 	bl	8000550 <__aeabi_dmul>
 80079ca:	a335      	add	r3, pc, #212	; (adr r3, 8007aa0 <__ieee754_asin+0x308>)
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f7f8 fc08 	bl	80001e4 <__adddf3>
 80079d4:	4632      	mov	r2, r6
 80079d6:	463b      	mov	r3, r7
 80079d8:	f7f8 fdba 	bl	8000550 <__aeabi_dmul>
 80079dc:	a332      	add	r3, pc, #200	; (adr r3, 8007aa8 <__ieee754_asin+0x310>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f7f8 fbfd 	bl	80001e0 <__aeabi_dsub>
 80079e6:	4632      	mov	r2, r6
 80079e8:	463b      	mov	r3, r7
 80079ea:	f7f8 fdb1 	bl	8000550 <__aeabi_dmul>
 80079ee:	a330      	add	r3, pc, #192	; (adr r3, 8007ab0 <__ieee754_asin+0x318>)
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	f7f8 fbf6 	bl	80001e4 <__adddf3>
 80079f8:	4632      	mov	r2, r6
 80079fa:	463b      	mov	r3, r7
 80079fc:	f7f8 fda8 	bl	8000550 <__aeabi_dmul>
 8007a00:	a32d      	add	r3, pc, #180	; (adr r3, 8007ab8 <__ieee754_asin+0x320>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	4680      	mov	r8, r0
 8007a08:	4689      	mov	r9, r1
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	f7f8 fd9f 	bl	8000550 <__aeabi_dmul>
 8007a12:	a32b      	add	r3, pc, #172	; (adr r3, 8007ac0 <__ieee754_asin+0x328>)
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f7f8 fbe2 	bl	80001e0 <__aeabi_dsub>
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	463b      	mov	r3, r7
 8007a20:	f7f8 fd96 	bl	8000550 <__aeabi_dmul>
 8007a24:	a328      	add	r3, pc, #160	; (adr r3, 8007ac8 <__ieee754_asin+0x330>)
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f7f8 fbdb 	bl	80001e4 <__adddf3>
 8007a2e:	4632      	mov	r2, r6
 8007a30:	463b      	mov	r3, r7
 8007a32:	f7f8 fd8d 	bl	8000550 <__aeabi_dmul>
 8007a36:	a326      	add	r3, pc, #152	; (adr r3, 8007ad0 <__ieee754_asin+0x338>)
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f7f8 fbd0 	bl	80001e0 <__aeabi_dsub>
 8007a40:	4632      	mov	r2, r6
 8007a42:	463b      	mov	r3, r7
 8007a44:	f7f8 fd84 	bl	8000550 <__aeabi_dmul>
 8007a48:	4b25      	ldr	r3, [pc, #148]	; (8007ae0 <__ieee754_asin+0x348>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f7f8 fbca 	bl	80001e4 <__adddf3>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4640      	mov	r0, r8
 8007a56:	4649      	mov	r1, r9
 8007a58:	f7f8 fea4 	bl	80007a4 <__aeabi_ddiv>
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	462b      	mov	r3, r5
 8007a60:	f7f8 fd76 	bl	8000550 <__aeabi_dmul>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4620      	mov	r0, r4
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	e6bf      	b.n	80077ee <__ieee754_asin+0x56>
 8007a6e:	bf00      	nop
 8007a70:	54442d18 	.word	0x54442d18
 8007a74:	3ff921fb 	.word	0x3ff921fb
 8007a78:	33145c07 	.word	0x33145c07
 8007a7c:	3c91a626 	.word	0x3c91a626
 8007a80:	8800759c 	.word	0x8800759c
 8007a84:	7e37e43c 	.word	0x7e37e43c
 8007a88:	0dfdf709 	.word	0x0dfdf709
 8007a8c:	3f023de1 	.word	0x3f023de1
 8007a90:	7501b288 	.word	0x7501b288
 8007a94:	3f49efe0 	.word	0x3f49efe0
 8007a98:	b5688f3b 	.word	0xb5688f3b
 8007a9c:	3fa48228 	.word	0x3fa48228
 8007aa0:	0e884455 	.word	0x0e884455
 8007aa4:	3fc9c155 	.word	0x3fc9c155
 8007aa8:	03eb6f7d 	.word	0x03eb6f7d
 8007aac:	3fd4d612 	.word	0x3fd4d612
 8007ab0:	55555555 	.word	0x55555555
 8007ab4:	3fc55555 	.word	0x3fc55555
 8007ab8:	b12e9282 	.word	0xb12e9282
 8007abc:	3fb3b8c5 	.word	0x3fb3b8c5
 8007ac0:	1b8d0159 	.word	0x1b8d0159
 8007ac4:	3fe6066c 	.word	0x3fe6066c
 8007ac8:	9c598ac8 	.word	0x9c598ac8
 8007acc:	40002ae5 	.word	0x40002ae5
 8007ad0:	1c8a2d4b 	.word	0x1c8a2d4b
 8007ad4:	40033a27 	.word	0x40033a27
 8007ad8:	3fefffff 	.word	0x3fefffff
 8007adc:	3fdfffff 	.word	0x3fdfffff
 8007ae0:	3ff00000 	.word	0x3ff00000
 8007ae4:	3fe00000 	.word	0x3fe00000
 8007ae8:	3fef3332 	.word	0x3fef3332
 8007aec:	ee10 2a10 	vmov	r2, s0
 8007af0:	ee10 0a10 	vmov	r0, s0
 8007af4:	465b      	mov	r3, fp
 8007af6:	4659      	mov	r1, fp
 8007af8:	f7f8 fb74 	bl	80001e4 <__adddf3>
 8007afc:	4632      	mov	r2, r6
 8007afe:	463b      	mov	r3, r7
 8007b00:	ec41 0b19 	vmov	d9, r0, r1
 8007b04:	ec51 0b18 	vmov	r0, r1, d8
 8007b08:	f7f8 fe4c 	bl	80007a4 <__aeabi_ddiv>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	ec51 0b19 	vmov	r0, r1, d9
 8007b14:	f7f8 fd1c 	bl	8000550 <__aeabi_dmul>
 8007b18:	f04f 0800 	mov.w	r8, #0
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	460f      	mov	r7, r1
 8007b20:	4642      	mov	r2, r8
 8007b22:	465b      	mov	r3, fp
 8007b24:	4640      	mov	r0, r8
 8007b26:	4659      	mov	r1, fp
 8007b28:	f7f8 fd12 	bl	8000550 <__aeabi_dmul>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4620      	mov	r0, r4
 8007b32:	4629      	mov	r1, r5
 8007b34:	f7f8 fb54 	bl	80001e0 <__aeabi_dsub>
 8007b38:	4642      	mov	r2, r8
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	460d      	mov	r5, r1
 8007b3e:	465b      	mov	r3, fp
 8007b40:	4650      	mov	r0, sl
 8007b42:	4659      	mov	r1, fp
 8007b44:	f7f8 fb4e 	bl	80001e4 <__adddf3>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	4629      	mov	r1, r5
 8007b50:	f7f8 fe28 	bl	80007a4 <__aeabi_ddiv>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	f7f8 fb44 	bl	80001e4 <__adddf3>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	a113      	add	r1, pc, #76	; (adr r1, 8007bb0 <__ieee754_asin+0x418>)
 8007b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b66:	f7f8 fb3b 	bl	80001e0 <__aeabi_dsub>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4630      	mov	r0, r6
 8007b70:	4639      	mov	r1, r7
 8007b72:	f7f8 fb35 	bl	80001e0 <__aeabi_dsub>
 8007b76:	4642      	mov	r2, r8
 8007b78:	4604      	mov	r4, r0
 8007b7a:	460d      	mov	r5, r1
 8007b7c:	465b      	mov	r3, fp
 8007b7e:	4640      	mov	r0, r8
 8007b80:	4659      	mov	r1, fp
 8007b82:	f7f8 fb2f 	bl	80001e4 <__adddf3>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	a10b      	add	r1, pc, #44	; (adr r1, 8007bb8 <__ieee754_asin+0x420>)
 8007b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b90:	f7f8 fb26 	bl	80001e0 <__aeabi_dsub>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	4620      	mov	r0, r4
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	f7f8 fb20 	bl	80001e0 <__aeabi_dsub>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	a104      	add	r1, pc, #16	; (adr r1, 8007bb8 <__ieee754_asin+0x420>)
 8007ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007baa:	e6df      	b.n	800796c <__ieee754_asin+0x1d4>
 8007bac:	f3af 8000 	nop.w
 8007bb0:	33145c07 	.word	0x33145c07
 8007bb4:	3c91a626 	.word	0x3c91a626
 8007bb8:	54442d18 	.word	0x54442d18
 8007bbc:	3fe921fb 	.word	0x3fe921fb

08007bc0 <__ieee754_rem_pio2>:
 8007bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	ed2d 8b02 	vpush	{d8}
 8007bc8:	ec55 4b10 	vmov	r4, r5, d0
 8007bcc:	4bca      	ldr	r3, [pc, #808]	; (8007ef8 <__ieee754_rem_pio2+0x338>)
 8007bce:	b08b      	sub	sp, #44	; 0x2c
 8007bd0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007bd4:	4598      	cmp	r8, r3
 8007bd6:	4682      	mov	sl, r0
 8007bd8:	9502      	str	r5, [sp, #8]
 8007bda:	dc08      	bgt.n	8007bee <__ieee754_rem_pio2+0x2e>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2300      	movs	r3, #0
 8007be0:	ed80 0b00 	vstr	d0, [r0]
 8007be4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007be8:	f04f 0b00 	mov.w	fp, #0
 8007bec:	e028      	b.n	8007c40 <__ieee754_rem_pio2+0x80>
 8007bee:	4bc3      	ldr	r3, [pc, #780]	; (8007efc <__ieee754_rem_pio2+0x33c>)
 8007bf0:	4598      	cmp	r8, r3
 8007bf2:	dc78      	bgt.n	8007ce6 <__ieee754_rem_pio2+0x126>
 8007bf4:	9b02      	ldr	r3, [sp, #8]
 8007bf6:	4ec2      	ldr	r6, [pc, #776]	; (8007f00 <__ieee754_rem_pio2+0x340>)
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	ee10 0a10 	vmov	r0, s0
 8007bfe:	a3b0      	add	r3, pc, #704	; (adr r3, 8007ec0 <__ieee754_rem_pio2+0x300>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	4629      	mov	r1, r5
 8007c06:	dd39      	ble.n	8007c7c <__ieee754_rem_pio2+0xbc>
 8007c08:	f7f8 faea 	bl	80001e0 <__aeabi_dsub>
 8007c0c:	45b0      	cmp	r8, r6
 8007c0e:	4604      	mov	r4, r0
 8007c10:	460d      	mov	r5, r1
 8007c12:	d01b      	beq.n	8007c4c <__ieee754_rem_pio2+0x8c>
 8007c14:	a3ac      	add	r3, pc, #688	; (adr r3, 8007ec8 <__ieee754_rem_pio2+0x308>)
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	f7f8 fae1 	bl	80001e0 <__aeabi_dsub>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	e9ca 2300 	strd	r2, r3, [sl]
 8007c26:	4620      	mov	r0, r4
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7f8 fad9 	bl	80001e0 <__aeabi_dsub>
 8007c2e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007ec8 <__ieee754_rem_pio2+0x308>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 fad4 	bl	80001e0 <__aeabi_dsub>
 8007c38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007c3c:	f04f 0b01 	mov.w	fp, #1
 8007c40:	4658      	mov	r0, fp
 8007c42:	b00b      	add	sp, #44	; 0x2c
 8007c44:	ecbd 8b02 	vpop	{d8}
 8007c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ed0 <__ieee754_rem_pio2+0x310>)
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	f7f8 fac5 	bl	80001e0 <__aeabi_dsub>
 8007c56:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ed8 <__ieee754_rem_pio2+0x318>)
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	460d      	mov	r5, r1
 8007c60:	f7f8 fabe 	bl	80001e0 <__aeabi_dsub>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	e9ca 2300 	strd	r2, r3, [sl]
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	f7f8 fab6 	bl	80001e0 <__aeabi_dsub>
 8007c74:	a398      	add	r3, pc, #608	; (adr r3, 8007ed8 <__ieee754_rem_pio2+0x318>)
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	e7db      	b.n	8007c34 <__ieee754_rem_pio2+0x74>
 8007c7c:	f7f8 fab2 	bl	80001e4 <__adddf3>
 8007c80:	45b0      	cmp	r8, r6
 8007c82:	4604      	mov	r4, r0
 8007c84:	460d      	mov	r5, r1
 8007c86:	d016      	beq.n	8007cb6 <__ieee754_rem_pio2+0xf6>
 8007c88:	a38f      	add	r3, pc, #572	; (adr r3, 8007ec8 <__ieee754_rem_pio2+0x308>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	f7f8 faa9 	bl	80001e4 <__adddf3>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	e9ca 2300 	strd	r2, r3, [sl]
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	f7f8 fa9f 	bl	80001e0 <__aeabi_dsub>
 8007ca2:	a389      	add	r3, pc, #548	; (adr r3, 8007ec8 <__ieee754_rem_pio2+0x308>)
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f7f8 fa9c 	bl	80001e4 <__adddf3>
 8007cac:	f04f 3bff 	mov.w	fp, #4294967295
 8007cb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007cb4:	e7c4      	b.n	8007c40 <__ieee754_rem_pio2+0x80>
 8007cb6:	a386      	add	r3, pc, #536	; (adr r3, 8007ed0 <__ieee754_rem_pio2+0x310>)
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f7f8 fa92 	bl	80001e4 <__adddf3>
 8007cc0:	a385      	add	r3, pc, #532	; (adr r3, 8007ed8 <__ieee754_rem_pio2+0x318>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	460d      	mov	r5, r1
 8007cca:	f7f8 fa8b 	bl	80001e4 <__adddf3>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	e9ca 2300 	strd	r2, r3, [sl]
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	f7f8 fa81 	bl	80001e0 <__aeabi_dsub>
 8007cde:	a37e      	add	r3, pc, #504	; (adr r3, 8007ed8 <__ieee754_rem_pio2+0x318>)
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	e7e0      	b.n	8007ca8 <__ieee754_rem_pio2+0xe8>
 8007ce6:	4b87      	ldr	r3, [pc, #540]	; (8007f04 <__ieee754_rem_pio2+0x344>)
 8007ce8:	4598      	cmp	r8, r3
 8007cea:	f300 80d9 	bgt.w	8007ea0 <__ieee754_rem_pio2+0x2e0>
 8007cee:	f000 fefd 	bl	8008aec <fabs>
 8007cf2:	ec55 4b10 	vmov	r4, r5, d0
 8007cf6:	ee10 0a10 	vmov	r0, s0
 8007cfa:	a379      	add	r3, pc, #484	; (adr r3, 8007ee0 <__ieee754_rem_pio2+0x320>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	4629      	mov	r1, r5
 8007d02:	f7f8 fc25 	bl	8000550 <__aeabi_dmul>
 8007d06:	4b80      	ldr	r3, [pc, #512]	; (8007f08 <__ieee754_rem_pio2+0x348>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f7f8 fa6b 	bl	80001e4 <__adddf3>
 8007d0e:	f7f8 fecf 	bl	8000ab0 <__aeabi_d2iz>
 8007d12:	4683      	mov	fp, r0
 8007d14:	f7f8 fbb2 	bl	800047c <__aeabi_i2d>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	ec43 2b18 	vmov	d8, r2, r3
 8007d20:	a367      	add	r3, pc, #412	; (adr r3, 8007ec0 <__ieee754_rem_pio2+0x300>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f7f8 fc13 	bl	8000550 <__aeabi_dmul>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4620      	mov	r0, r4
 8007d30:	4629      	mov	r1, r5
 8007d32:	f7f8 fa55 	bl	80001e0 <__aeabi_dsub>
 8007d36:	a364      	add	r3, pc, #400	; (adr r3, 8007ec8 <__ieee754_rem_pio2+0x308>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	460f      	mov	r7, r1
 8007d40:	ec51 0b18 	vmov	r0, r1, d8
 8007d44:	f7f8 fc04 	bl	8000550 <__aeabi_dmul>
 8007d48:	f1bb 0f1f 	cmp.w	fp, #31
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	460d      	mov	r5, r1
 8007d50:	dc0d      	bgt.n	8007d6e <__ieee754_rem_pio2+0x1ae>
 8007d52:	4b6e      	ldr	r3, [pc, #440]	; (8007f0c <__ieee754_rem_pio2+0x34c>)
 8007d54:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5c:	4543      	cmp	r3, r8
 8007d5e:	d006      	beq.n	8007d6e <__ieee754_rem_pio2+0x1ae>
 8007d60:	4622      	mov	r2, r4
 8007d62:	462b      	mov	r3, r5
 8007d64:	4630      	mov	r0, r6
 8007d66:	4639      	mov	r1, r7
 8007d68:	f7f8 fa3a 	bl	80001e0 <__aeabi_dsub>
 8007d6c:	e00f      	b.n	8007d8e <__ieee754_rem_pio2+0x1ce>
 8007d6e:	462b      	mov	r3, r5
 8007d70:	4622      	mov	r2, r4
 8007d72:	4630      	mov	r0, r6
 8007d74:	4639      	mov	r1, r7
 8007d76:	f7f8 fa33 	bl	80001e0 <__aeabi_dsub>
 8007d7a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007d7e:	9303      	str	r3, [sp, #12]
 8007d80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007d84:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007d88:	f1b8 0f10 	cmp.w	r8, #16
 8007d8c:	dc02      	bgt.n	8007d94 <__ieee754_rem_pio2+0x1d4>
 8007d8e:	e9ca 0100 	strd	r0, r1, [sl]
 8007d92:	e039      	b.n	8007e08 <__ieee754_rem_pio2+0x248>
 8007d94:	a34e      	add	r3, pc, #312	; (adr r3, 8007ed0 <__ieee754_rem_pio2+0x310>)
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	ec51 0b18 	vmov	r0, r1, d8
 8007d9e:	f7f8 fbd7 	bl	8000550 <__aeabi_dmul>
 8007da2:	4604      	mov	r4, r0
 8007da4:	460d      	mov	r5, r1
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4630      	mov	r0, r6
 8007dac:	4639      	mov	r1, r7
 8007dae:	f7f8 fa17 	bl	80001e0 <__aeabi_dsub>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4680      	mov	r8, r0
 8007db8:	4689      	mov	r9, r1
 8007dba:	4630      	mov	r0, r6
 8007dbc:	4639      	mov	r1, r7
 8007dbe:	f7f8 fa0f 	bl	80001e0 <__aeabi_dsub>
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	462b      	mov	r3, r5
 8007dc6:	f7f8 fa0b 	bl	80001e0 <__aeabi_dsub>
 8007dca:	a343      	add	r3, pc, #268	; (adr r3, 8007ed8 <__ieee754_rem_pio2+0x318>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	ec51 0b18 	vmov	r0, r1, d8
 8007dd8:	f7f8 fbba 	bl	8000550 <__aeabi_dmul>
 8007ddc:	4622      	mov	r2, r4
 8007dde:	462b      	mov	r3, r5
 8007de0:	f7f8 f9fe 	bl	80001e0 <__aeabi_dsub>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4604      	mov	r4, r0
 8007dea:	460d      	mov	r5, r1
 8007dec:	4640      	mov	r0, r8
 8007dee:	4649      	mov	r1, r9
 8007df0:	f7f8 f9f6 	bl	80001e0 <__aeabi_dsub>
 8007df4:	9a03      	ldr	r2, [sp, #12]
 8007df6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b31      	cmp	r3, #49	; 0x31
 8007dfe:	dc24      	bgt.n	8007e4a <__ieee754_rem_pio2+0x28a>
 8007e00:	e9ca 0100 	strd	r0, r1, [sl]
 8007e04:	4646      	mov	r6, r8
 8007e06:	464f      	mov	r7, r9
 8007e08:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	4642      	mov	r2, r8
 8007e10:	464b      	mov	r3, r9
 8007e12:	4639      	mov	r1, r7
 8007e14:	f7f8 f9e4 	bl	80001e0 <__aeabi_dsub>
 8007e18:	462b      	mov	r3, r5
 8007e1a:	4622      	mov	r2, r4
 8007e1c:	f7f8 f9e0 	bl	80001e0 <__aeabi_dsub>
 8007e20:	9b02      	ldr	r3, [sp, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007e28:	f6bf af0a 	bge.w	8007c40 <__ieee754_rem_pio2+0x80>
 8007e2c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e30:	f8ca 3004 	str.w	r3, [sl, #4]
 8007e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e38:	f8ca 8000 	str.w	r8, [sl]
 8007e3c:	f8ca 0008 	str.w	r0, [sl, #8]
 8007e40:	f8ca 300c 	str.w	r3, [sl, #12]
 8007e44:	f1cb 0b00 	rsb	fp, fp, #0
 8007e48:	e6fa      	b.n	8007c40 <__ieee754_rem_pio2+0x80>
 8007e4a:	a327      	add	r3, pc, #156	; (adr r3, 8007ee8 <__ieee754_rem_pio2+0x328>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	ec51 0b18 	vmov	r0, r1, d8
 8007e54:	f7f8 fb7c 	bl	8000550 <__aeabi_dmul>
 8007e58:	4604      	mov	r4, r0
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4640      	mov	r0, r8
 8007e62:	4649      	mov	r1, r9
 8007e64:	f7f8 f9bc 	bl	80001e0 <__aeabi_dsub>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	460f      	mov	r7, r1
 8007e70:	4640      	mov	r0, r8
 8007e72:	4649      	mov	r1, r9
 8007e74:	f7f8 f9b4 	bl	80001e0 <__aeabi_dsub>
 8007e78:	4622      	mov	r2, r4
 8007e7a:	462b      	mov	r3, r5
 8007e7c:	f7f8 f9b0 	bl	80001e0 <__aeabi_dsub>
 8007e80:	a31b      	add	r3, pc, #108	; (adr r3, 8007ef0 <__ieee754_rem_pio2+0x330>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	4604      	mov	r4, r0
 8007e88:	460d      	mov	r5, r1
 8007e8a:	ec51 0b18 	vmov	r0, r1, d8
 8007e8e:	f7f8 fb5f 	bl	8000550 <__aeabi_dmul>
 8007e92:	4622      	mov	r2, r4
 8007e94:	462b      	mov	r3, r5
 8007e96:	f7f8 f9a3 	bl	80001e0 <__aeabi_dsub>
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	460d      	mov	r5, r1
 8007e9e:	e75f      	b.n	8007d60 <__ieee754_rem_pio2+0x1a0>
 8007ea0:	4b1b      	ldr	r3, [pc, #108]	; (8007f10 <__ieee754_rem_pio2+0x350>)
 8007ea2:	4598      	cmp	r8, r3
 8007ea4:	dd36      	ble.n	8007f14 <__ieee754_rem_pio2+0x354>
 8007ea6:	ee10 2a10 	vmov	r2, s0
 8007eaa:	462b      	mov	r3, r5
 8007eac:	4620      	mov	r0, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 f996 	bl	80001e0 <__aeabi_dsub>
 8007eb4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007eb8:	e9ca 0100 	strd	r0, r1, [sl]
 8007ebc:	e694      	b.n	8007be8 <__ieee754_rem_pio2+0x28>
 8007ebe:	bf00      	nop
 8007ec0:	54400000 	.word	0x54400000
 8007ec4:	3ff921fb 	.word	0x3ff921fb
 8007ec8:	1a626331 	.word	0x1a626331
 8007ecc:	3dd0b461 	.word	0x3dd0b461
 8007ed0:	1a600000 	.word	0x1a600000
 8007ed4:	3dd0b461 	.word	0x3dd0b461
 8007ed8:	2e037073 	.word	0x2e037073
 8007edc:	3ba3198a 	.word	0x3ba3198a
 8007ee0:	6dc9c883 	.word	0x6dc9c883
 8007ee4:	3fe45f30 	.word	0x3fe45f30
 8007ee8:	2e000000 	.word	0x2e000000
 8007eec:	3ba3198a 	.word	0x3ba3198a
 8007ef0:	252049c1 	.word	0x252049c1
 8007ef4:	397b839a 	.word	0x397b839a
 8007ef8:	3fe921fb 	.word	0x3fe921fb
 8007efc:	4002d97b 	.word	0x4002d97b
 8007f00:	3ff921fb 	.word	0x3ff921fb
 8007f04:	413921fb 	.word	0x413921fb
 8007f08:	3fe00000 	.word	0x3fe00000
 8007f0c:	08008d5c 	.word	0x08008d5c
 8007f10:	7fefffff 	.word	0x7fefffff
 8007f14:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007f18:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007f1c:	ee10 0a10 	vmov	r0, s0
 8007f20:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007f24:	ee10 6a10 	vmov	r6, s0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	f7f8 fdc1 	bl	8000ab0 <__aeabi_d2iz>
 8007f2e:	f7f8 faa5 	bl	800047c <__aeabi_i2d>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4630      	mov	r0, r6
 8007f38:	4639      	mov	r1, r7
 8007f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f3e:	f7f8 f94f 	bl	80001e0 <__aeabi_dsub>
 8007f42:	4b23      	ldr	r3, [pc, #140]	; (8007fd0 <__ieee754_rem_pio2+0x410>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	f7f8 fb03 	bl	8000550 <__aeabi_dmul>
 8007f4a:	460f      	mov	r7, r1
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	f7f8 fdaf 	bl	8000ab0 <__aeabi_d2iz>
 8007f52:	f7f8 fa93 	bl	800047c <__aeabi_i2d>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f62:	f7f8 f93d 	bl	80001e0 <__aeabi_dsub>
 8007f66:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <__ieee754_rem_pio2+0x410>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f7f8 faf1 	bl	8000550 <__aeabi_dmul>
 8007f6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f72:	ad04      	add	r5, sp, #16
 8007f74:	f04f 0803 	mov.w	r8, #3
 8007f78:	46a9      	mov	r9, r5
 8007f7a:	2600      	movs	r6, #0
 8007f7c:	2700      	movs	r7, #0
 8007f7e:	4632      	mov	r2, r6
 8007f80:	463b      	mov	r3, r7
 8007f82:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007f86:	46c3      	mov	fp, r8
 8007f88:	3d08      	subs	r5, #8
 8007f8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f8e:	f7f8 fd47 	bl	8000a20 <__aeabi_dcmpeq>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d1f3      	bne.n	8007f7e <__ieee754_rem_pio2+0x3be>
 8007f96:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <__ieee754_rem_pio2+0x414>)
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	4622      	mov	r2, r4
 8007fa0:	465b      	mov	r3, fp
 8007fa2:	4651      	mov	r1, sl
 8007fa4:	4648      	mov	r0, r9
 8007fa6:	f000 f993 	bl	80082d0 <__kernel_rem_pio2>
 8007faa:	9b02      	ldr	r3, [sp, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	4683      	mov	fp, r0
 8007fb0:	f6bf ae46 	bge.w	8007c40 <__ieee754_rem_pio2+0x80>
 8007fb4:	e9da 2100 	ldrd	r2, r1, [sl]
 8007fb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fbc:	e9ca 2300 	strd	r2, r3, [sl]
 8007fc0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007fc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fc8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007fcc:	e73a      	b.n	8007e44 <__ieee754_rem_pio2+0x284>
 8007fce:	bf00      	nop
 8007fd0:	41700000 	.word	0x41700000
 8007fd4:	08008ddc 	.word	0x08008ddc

08007fd8 <__ieee754_sqrt>:
 8007fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fdc:	ec55 4b10 	vmov	r4, r5, d0
 8007fe0:	4e55      	ldr	r6, [pc, #340]	; (8008138 <__ieee754_sqrt+0x160>)
 8007fe2:	43ae      	bics	r6, r5
 8007fe4:	ee10 0a10 	vmov	r0, s0
 8007fe8:	ee10 3a10 	vmov	r3, s0
 8007fec:	462a      	mov	r2, r5
 8007fee:	4629      	mov	r1, r5
 8007ff0:	d110      	bne.n	8008014 <__ieee754_sqrt+0x3c>
 8007ff2:	ee10 2a10 	vmov	r2, s0
 8007ff6:	462b      	mov	r3, r5
 8007ff8:	f7f8 faaa 	bl	8000550 <__aeabi_dmul>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4620      	mov	r0, r4
 8008002:	4629      	mov	r1, r5
 8008004:	f7f8 f8ee 	bl	80001e4 <__adddf3>
 8008008:	4604      	mov	r4, r0
 800800a:	460d      	mov	r5, r1
 800800c:	ec45 4b10 	vmov	d0, r4, r5
 8008010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008014:	2d00      	cmp	r5, #0
 8008016:	dc10      	bgt.n	800803a <__ieee754_sqrt+0x62>
 8008018:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800801c:	4330      	orrs	r0, r6
 800801e:	d0f5      	beq.n	800800c <__ieee754_sqrt+0x34>
 8008020:	b15d      	cbz	r5, 800803a <__ieee754_sqrt+0x62>
 8008022:	ee10 2a10 	vmov	r2, s0
 8008026:	462b      	mov	r3, r5
 8008028:	ee10 0a10 	vmov	r0, s0
 800802c:	f7f8 f8d8 	bl	80001e0 <__aeabi_dsub>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	f7f8 fbb6 	bl	80007a4 <__aeabi_ddiv>
 8008038:	e7e6      	b.n	8008008 <__ieee754_sqrt+0x30>
 800803a:	1512      	asrs	r2, r2, #20
 800803c:	d074      	beq.n	8008128 <__ieee754_sqrt+0x150>
 800803e:	07d4      	lsls	r4, r2, #31
 8008040:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008044:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008048:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800804c:	bf5e      	ittt	pl
 800804e:	0fda      	lsrpl	r2, r3, #31
 8008050:	005b      	lslpl	r3, r3, #1
 8008052:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008056:	2400      	movs	r4, #0
 8008058:	0fda      	lsrs	r2, r3, #31
 800805a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800805e:	107f      	asrs	r7, r7, #1
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	2516      	movs	r5, #22
 8008064:	4620      	mov	r0, r4
 8008066:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800806a:	1886      	adds	r6, r0, r2
 800806c:	428e      	cmp	r6, r1
 800806e:	bfde      	ittt	le
 8008070:	1b89      	suble	r1, r1, r6
 8008072:	18b0      	addle	r0, r6, r2
 8008074:	18a4      	addle	r4, r4, r2
 8008076:	0049      	lsls	r1, r1, #1
 8008078:	3d01      	subs	r5, #1
 800807a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800807e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008082:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008086:	d1f0      	bne.n	800806a <__ieee754_sqrt+0x92>
 8008088:	462a      	mov	r2, r5
 800808a:	f04f 0e20 	mov.w	lr, #32
 800808e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008092:	4281      	cmp	r1, r0
 8008094:	eb06 0c05 	add.w	ip, r6, r5
 8008098:	dc02      	bgt.n	80080a0 <__ieee754_sqrt+0xc8>
 800809a:	d113      	bne.n	80080c4 <__ieee754_sqrt+0xec>
 800809c:	459c      	cmp	ip, r3
 800809e:	d811      	bhi.n	80080c4 <__ieee754_sqrt+0xec>
 80080a0:	f1bc 0f00 	cmp.w	ip, #0
 80080a4:	eb0c 0506 	add.w	r5, ip, r6
 80080a8:	da43      	bge.n	8008132 <__ieee754_sqrt+0x15a>
 80080aa:	2d00      	cmp	r5, #0
 80080ac:	db41      	blt.n	8008132 <__ieee754_sqrt+0x15a>
 80080ae:	f100 0801 	add.w	r8, r0, #1
 80080b2:	1a09      	subs	r1, r1, r0
 80080b4:	459c      	cmp	ip, r3
 80080b6:	bf88      	it	hi
 80080b8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80080bc:	eba3 030c 	sub.w	r3, r3, ip
 80080c0:	4432      	add	r2, r6
 80080c2:	4640      	mov	r0, r8
 80080c4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80080c8:	f1be 0e01 	subs.w	lr, lr, #1
 80080cc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80080d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80080d8:	d1db      	bne.n	8008092 <__ieee754_sqrt+0xba>
 80080da:	430b      	orrs	r3, r1
 80080dc:	d006      	beq.n	80080ec <__ieee754_sqrt+0x114>
 80080de:	1c50      	adds	r0, r2, #1
 80080e0:	bf13      	iteet	ne
 80080e2:	3201      	addne	r2, #1
 80080e4:	3401      	addeq	r4, #1
 80080e6:	4672      	moveq	r2, lr
 80080e8:	f022 0201 	bicne.w	r2, r2, #1
 80080ec:	1063      	asrs	r3, r4, #1
 80080ee:	0852      	lsrs	r2, r2, #1
 80080f0:	07e1      	lsls	r1, r4, #31
 80080f2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80080f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80080fa:	bf48      	it	mi
 80080fc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008100:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008104:	4614      	mov	r4, r2
 8008106:	e781      	b.n	800800c <__ieee754_sqrt+0x34>
 8008108:	0ad9      	lsrs	r1, r3, #11
 800810a:	3815      	subs	r0, #21
 800810c:	055b      	lsls	r3, r3, #21
 800810e:	2900      	cmp	r1, #0
 8008110:	d0fa      	beq.n	8008108 <__ieee754_sqrt+0x130>
 8008112:	02cd      	lsls	r5, r1, #11
 8008114:	d50a      	bpl.n	800812c <__ieee754_sqrt+0x154>
 8008116:	f1c2 0420 	rsb	r4, r2, #32
 800811a:	fa23 f404 	lsr.w	r4, r3, r4
 800811e:	1e55      	subs	r5, r2, #1
 8008120:	4093      	lsls	r3, r2
 8008122:	4321      	orrs	r1, r4
 8008124:	1b42      	subs	r2, r0, r5
 8008126:	e78a      	b.n	800803e <__ieee754_sqrt+0x66>
 8008128:	4610      	mov	r0, r2
 800812a:	e7f0      	b.n	800810e <__ieee754_sqrt+0x136>
 800812c:	0049      	lsls	r1, r1, #1
 800812e:	3201      	adds	r2, #1
 8008130:	e7ef      	b.n	8008112 <__ieee754_sqrt+0x13a>
 8008132:	4680      	mov	r8, r0
 8008134:	e7bd      	b.n	80080b2 <__ieee754_sqrt+0xda>
 8008136:	bf00      	nop
 8008138:	7ff00000 	.word	0x7ff00000
 800813c:	00000000 	.word	0x00000000

08008140 <__kernel_cos>:
 8008140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	ec57 6b10 	vmov	r6, r7, d0
 8008148:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800814c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008150:	ed8d 1b00 	vstr	d1, [sp]
 8008154:	da07      	bge.n	8008166 <__kernel_cos+0x26>
 8008156:	ee10 0a10 	vmov	r0, s0
 800815a:	4639      	mov	r1, r7
 800815c:	f7f8 fca8 	bl	8000ab0 <__aeabi_d2iz>
 8008160:	2800      	cmp	r0, #0
 8008162:	f000 8088 	beq.w	8008276 <__kernel_cos+0x136>
 8008166:	4632      	mov	r2, r6
 8008168:	463b      	mov	r3, r7
 800816a:	4630      	mov	r0, r6
 800816c:	4639      	mov	r1, r7
 800816e:	f7f8 f9ef 	bl	8000550 <__aeabi_dmul>
 8008172:	4b51      	ldr	r3, [pc, #324]	; (80082b8 <__kernel_cos+0x178>)
 8008174:	2200      	movs	r2, #0
 8008176:	4604      	mov	r4, r0
 8008178:	460d      	mov	r5, r1
 800817a:	f7f8 f9e9 	bl	8000550 <__aeabi_dmul>
 800817e:	a340      	add	r3, pc, #256	; (adr r3, 8008280 <__kernel_cos+0x140>)
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	4682      	mov	sl, r0
 8008186:	468b      	mov	fp, r1
 8008188:	4620      	mov	r0, r4
 800818a:	4629      	mov	r1, r5
 800818c:	f7f8 f9e0 	bl	8000550 <__aeabi_dmul>
 8008190:	a33d      	add	r3, pc, #244	; (adr r3, 8008288 <__kernel_cos+0x148>)
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f7f8 f825 	bl	80001e4 <__adddf3>
 800819a:	4622      	mov	r2, r4
 800819c:	462b      	mov	r3, r5
 800819e:	f7f8 f9d7 	bl	8000550 <__aeabi_dmul>
 80081a2:	a33b      	add	r3, pc, #236	; (adr r3, 8008290 <__kernel_cos+0x150>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	f7f8 f81a 	bl	80001e0 <__aeabi_dsub>
 80081ac:	4622      	mov	r2, r4
 80081ae:	462b      	mov	r3, r5
 80081b0:	f7f8 f9ce 	bl	8000550 <__aeabi_dmul>
 80081b4:	a338      	add	r3, pc, #224	; (adr r3, 8008298 <__kernel_cos+0x158>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f7f8 f813 	bl	80001e4 <__adddf3>
 80081be:	4622      	mov	r2, r4
 80081c0:	462b      	mov	r3, r5
 80081c2:	f7f8 f9c5 	bl	8000550 <__aeabi_dmul>
 80081c6:	a336      	add	r3, pc, #216	; (adr r3, 80082a0 <__kernel_cos+0x160>)
 80081c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081cc:	f7f8 f808 	bl	80001e0 <__aeabi_dsub>
 80081d0:	4622      	mov	r2, r4
 80081d2:	462b      	mov	r3, r5
 80081d4:	f7f8 f9bc 	bl	8000550 <__aeabi_dmul>
 80081d8:	a333      	add	r3, pc, #204	; (adr r3, 80082a8 <__kernel_cos+0x168>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	f7f8 f801 	bl	80001e4 <__adddf3>
 80081e2:	4622      	mov	r2, r4
 80081e4:	462b      	mov	r3, r5
 80081e6:	f7f8 f9b3 	bl	8000550 <__aeabi_dmul>
 80081ea:	4622      	mov	r2, r4
 80081ec:	462b      	mov	r3, r5
 80081ee:	f7f8 f9af 	bl	8000550 <__aeabi_dmul>
 80081f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081f6:	4604      	mov	r4, r0
 80081f8:	460d      	mov	r5, r1
 80081fa:	4630      	mov	r0, r6
 80081fc:	4639      	mov	r1, r7
 80081fe:	f7f8 f9a7 	bl	8000550 <__aeabi_dmul>
 8008202:	460b      	mov	r3, r1
 8008204:	4602      	mov	r2, r0
 8008206:	4629      	mov	r1, r5
 8008208:	4620      	mov	r0, r4
 800820a:	f7f7 ffe9 	bl	80001e0 <__aeabi_dsub>
 800820e:	4b2b      	ldr	r3, [pc, #172]	; (80082bc <__kernel_cos+0x17c>)
 8008210:	4598      	cmp	r8, r3
 8008212:	4606      	mov	r6, r0
 8008214:	460f      	mov	r7, r1
 8008216:	dc10      	bgt.n	800823a <__kernel_cos+0xfa>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4650      	mov	r0, sl
 800821e:	4659      	mov	r1, fp
 8008220:	f7f7 ffde 	bl	80001e0 <__aeabi_dsub>
 8008224:	460b      	mov	r3, r1
 8008226:	4926      	ldr	r1, [pc, #152]	; (80082c0 <__kernel_cos+0x180>)
 8008228:	4602      	mov	r2, r0
 800822a:	2000      	movs	r0, #0
 800822c:	f7f7 ffd8 	bl	80001e0 <__aeabi_dsub>
 8008230:	ec41 0b10 	vmov	d0, r0, r1
 8008234:	b003      	add	sp, #12
 8008236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823a:	4b22      	ldr	r3, [pc, #136]	; (80082c4 <__kernel_cos+0x184>)
 800823c:	4920      	ldr	r1, [pc, #128]	; (80082c0 <__kernel_cos+0x180>)
 800823e:	4598      	cmp	r8, r3
 8008240:	bfcc      	ite	gt
 8008242:	4d21      	ldrgt	r5, [pc, #132]	; (80082c8 <__kernel_cos+0x188>)
 8008244:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008248:	2400      	movs	r4, #0
 800824a:	4622      	mov	r2, r4
 800824c:	462b      	mov	r3, r5
 800824e:	2000      	movs	r0, #0
 8008250:	f7f7 ffc6 	bl	80001e0 <__aeabi_dsub>
 8008254:	4622      	mov	r2, r4
 8008256:	4680      	mov	r8, r0
 8008258:	4689      	mov	r9, r1
 800825a:	462b      	mov	r3, r5
 800825c:	4650      	mov	r0, sl
 800825e:	4659      	mov	r1, fp
 8008260:	f7f7 ffbe 	bl	80001e0 <__aeabi_dsub>
 8008264:	4632      	mov	r2, r6
 8008266:	463b      	mov	r3, r7
 8008268:	f7f7 ffba 	bl	80001e0 <__aeabi_dsub>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4640      	mov	r0, r8
 8008272:	4649      	mov	r1, r9
 8008274:	e7da      	b.n	800822c <__kernel_cos+0xec>
 8008276:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80082b0 <__kernel_cos+0x170>
 800827a:	e7db      	b.n	8008234 <__kernel_cos+0xf4>
 800827c:	f3af 8000 	nop.w
 8008280:	be8838d4 	.word	0xbe8838d4
 8008284:	bda8fae9 	.word	0xbda8fae9
 8008288:	bdb4b1c4 	.word	0xbdb4b1c4
 800828c:	3e21ee9e 	.word	0x3e21ee9e
 8008290:	809c52ad 	.word	0x809c52ad
 8008294:	3e927e4f 	.word	0x3e927e4f
 8008298:	19cb1590 	.word	0x19cb1590
 800829c:	3efa01a0 	.word	0x3efa01a0
 80082a0:	16c15177 	.word	0x16c15177
 80082a4:	3f56c16c 	.word	0x3f56c16c
 80082a8:	5555554c 	.word	0x5555554c
 80082ac:	3fa55555 	.word	0x3fa55555
 80082b0:	00000000 	.word	0x00000000
 80082b4:	3ff00000 	.word	0x3ff00000
 80082b8:	3fe00000 	.word	0x3fe00000
 80082bc:	3fd33332 	.word	0x3fd33332
 80082c0:	3ff00000 	.word	0x3ff00000
 80082c4:	3fe90000 	.word	0x3fe90000
 80082c8:	3fd20000 	.word	0x3fd20000
 80082cc:	00000000 	.word	0x00000000

080082d0 <__kernel_rem_pio2>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	ed2d 8b02 	vpush	{d8}
 80082d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80082dc:	f112 0f14 	cmn.w	r2, #20
 80082e0:	9308      	str	r3, [sp, #32]
 80082e2:	9101      	str	r1, [sp, #4]
 80082e4:	4bc4      	ldr	r3, [pc, #784]	; (80085f8 <__kernel_rem_pio2+0x328>)
 80082e6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80082e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80082ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082ee:	9302      	str	r3, [sp, #8]
 80082f0:	9b08      	ldr	r3, [sp, #32]
 80082f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80082f6:	bfa8      	it	ge
 80082f8:	1ed4      	subge	r4, r2, #3
 80082fa:	9306      	str	r3, [sp, #24]
 80082fc:	bfb2      	itee	lt
 80082fe:	2400      	movlt	r4, #0
 8008300:	2318      	movge	r3, #24
 8008302:	fb94 f4f3 	sdivge	r4, r4, r3
 8008306:	f06f 0317 	mvn.w	r3, #23
 800830a:	fb04 3303 	mla	r3, r4, r3, r3
 800830e:	eb03 0a02 	add.w	sl, r3, r2
 8008312:	9b02      	ldr	r3, [sp, #8]
 8008314:	9a06      	ldr	r2, [sp, #24]
 8008316:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80085e8 <__kernel_rem_pio2+0x318>
 800831a:	eb03 0802 	add.w	r8, r3, r2
 800831e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008320:	1aa7      	subs	r7, r4, r2
 8008322:	ae22      	add	r6, sp, #136	; 0x88
 8008324:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008328:	2500      	movs	r5, #0
 800832a:	4545      	cmp	r5, r8
 800832c:	dd13      	ble.n	8008356 <__kernel_rem_pio2+0x86>
 800832e:	9b08      	ldr	r3, [sp, #32]
 8008330:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80085e8 <__kernel_rem_pio2+0x318>
 8008334:	aa22      	add	r2, sp, #136	; 0x88
 8008336:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800833a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800833e:	f04f 0800 	mov.w	r8, #0
 8008342:	9b02      	ldr	r3, [sp, #8]
 8008344:	4598      	cmp	r8, r3
 8008346:	dc2f      	bgt.n	80083a8 <__kernel_rem_pio2+0xd8>
 8008348:	ed8d 8b04 	vstr	d8, [sp, #16]
 800834c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008350:	462f      	mov	r7, r5
 8008352:	2600      	movs	r6, #0
 8008354:	e01b      	b.n	800838e <__kernel_rem_pio2+0xbe>
 8008356:	42ef      	cmn	r7, r5
 8008358:	d407      	bmi.n	800836a <__kernel_rem_pio2+0x9a>
 800835a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800835e:	f7f8 f88d 	bl	800047c <__aeabi_i2d>
 8008362:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008366:	3501      	adds	r5, #1
 8008368:	e7df      	b.n	800832a <__kernel_rem_pio2+0x5a>
 800836a:	ec51 0b18 	vmov	r0, r1, d8
 800836e:	e7f8      	b.n	8008362 <__kernel_rem_pio2+0x92>
 8008370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008374:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008378:	f7f8 f8ea 	bl	8000550 <__aeabi_dmul>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008384:	f7f7 ff2e 	bl	80001e4 <__adddf3>
 8008388:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800838c:	3601      	adds	r6, #1
 800838e:	9b06      	ldr	r3, [sp, #24]
 8008390:	429e      	cmp	r6, r3
 8008392:	f1a7 0708 	sub.w	r7, r7, #8
 8008396:	ddeb      	ble.n	8008370 <__kernel_rem_pio2+0xa0>
 8008398:	ed9d 7b04 	vldr	d7, [sp, #16]
 800839c:	f108 0801 	add.w	r8, r8, #1
 80083a0:	ecab 7b02 	vstmia	fp!, {d7}
 80083a4:	3508      	adds	r5, #8
 80083a6:	e7cc      	b.n	8008342 <__kernel_rem_pio2+0x72>
 80083a8:	9b02      	ldr	r3, [sp, #8]
 80083aa:	aa0e      	add	r2, sp, #56	; 0x38
 80083ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083b0:	930d      	str	r3, [sp, #52]	; 0x34
 80083b2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80083b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80083b8:	9c02      	ldr	r4, [sp, #8]
 80083ba:	930c      	str	r3, [sp, #48]	; 0x30
 80083bc:	00e3      	lsls	r3, r4, #3
 80083be:	930a      	str	r3, [sp, #40]	; 0x28
 80083c0:	ab9a      	add	r3, sp, #616	; 0x268
 80083c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80083ca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80083ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80083d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80083d4:	46c3      	mov	fp, r8
 80083d6:	46a1      	mov	r9, r4
 80083d8:	f1b9 0f00 	cmp.w	r9, #0
 80083dc:	f1a5 0508 	sub.w	r5, r5, #8
 80083e0:	dc77      	bgt.n	80084d2 <__kernel_rem_pio2+0x202>
 80083e2:	ec47 6b10 	vmov	d0, r6, r7
 80083e6:	4650      	mov	r0, sl
 80083e8:	f000 fc12 	bl	8008c10 <scalbn>
 80083ec:	ec57 6b10 	vmov	r6, r7, d0
 80083f0:	2200      	movs	r2, #0
 80083f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80083f6:	ee10 0a10 	vmov	r0, s0
 80083fa:	4639      	mov	r1, r7
 80083fc:	f7f8 f8a8 	bl	8000550 <__aeabi_dmul>
 8008400:	ec41 0b10 	vmov	d0, r0, r1
 8008404:	f000 fb7c 	bl	8008b00 <floor>
 8008408:	4b7c      	ldr	r3, [pc, #496]	; (80085fc <__kernel_rem_pio2+0x32c>)
 800840a:	ec51 0b10 	vmov	r0, r1, d0
 800840e:	2200      	movs	r2, #0
 8008410:	f7f8 f89e 	bl	8000550 <__aeabi_dmul>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4630      	mov	r0, r6
 800841a:	4639      	mov	r1, r7
 800841c:	f7f7 fee0 	bl	80001e0 <__aeabi_dsub>
 8008420:	460f      	mov	r7, r1
 8008422:	4606      	mov	r6, r0
 8008424:	f7f8 fb44 	bl	8000ab0 <__aeabi_d2iz>
 8008428:	9004      	str	r0, [sp, #16]
 800842a:	f7f8 f827 	bl	800047c <__aeabi_i2d>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	4630      	mov	r0, r6
 8008434:	4639      	mov	r1, r7
 8008436:	f7f7 fed3 	bl	80001e0 <__aeabi_dsub>
 800843a:	f1ba 0f00 	cmp.w	sl, #0
 800843e:	4606      	mov	r6, r0
 8008440:	460f      	mov	r7, r1
 8008442:	dd6d      	ble.n	8008520 <__kernel_rem_pio2+0x250>
 8008444:	1e62      	subs	r2, r4, #1
 8008446:	ab0e      	add	r3, sp, #56	; 0x38
 8008448:	9d04      	ldr	r5, [sp, #16]
 800844a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800844e:	f1ca 0118 	rsb	r1, sl, #24
 8008452:	fa40 f301 	asr.w	r3, r0, r1
 8008456:	441d      	add	r5, r3
 8008458:	408b      	lsls	r3, r1
 800845a:	1ac0      	subs	r0, r0, r3
 800845c:	ab0e      	add	r3, sp, #56	; 0x38
 800845e:	9504      	str	r5, [sp, #16]
 8008460:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008464:	f1ca 0317 	rsb	r3, sl, #23
 8008468:	fa40 fb03 	asr.w	fp, r0, r3
 800846c:	f1bb 0f00 	cmp.w	fp, #0
 8008470:	dd65      	ble.n	800853e <__kernel_rem_pio2+0x26e>
 8008472:	9b04      	ldr	r3, [sp, #16]
 8008474:	2200      	movs	r2, #0
 8008476:	3301      	adds	r3, #1
 8008478:	9304      	str	r3, [sp, #16]
 800847a:	4615      	mov	r5, r2
 800847c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008480:	4294      	cmp	r4, r2
 8008482:	f300 809c 	bgt.w	80085be <__kernel_rem_pio2+0x2ee>
 8008486:	f1ba 0f00 	cmp.w	sl, #0
 800848a:	dd07      	ble.n	800849c <__kernel_rem_pio2+0x1cc>
 800848c:	f1ba 0f01 	cmp.w	sl, #1
 8008490:	f000 80c0 	beq.w	8008614 <__kernel_rem_pio2+0x344>
 8008494:	f1ba 0f02 	cmp.w	sl, #2
 8008498:	f000 80c6 	beq.w	8008628 <__kernel_rem_pio2+0x358>
 800849c:	f1bb 0f02 	cmp.w	fp, #2
 80084a0:	d14d      	bne.n	800853e <__kernel_rem_pio2+0x26e>
 80084a2:	4632      	mov	r2, r6
 80084a4:	463b      	mov	r3, r7
 80084a6:	4956      	ldr	r1, [pc, #344]	; (8008600 <__kernel_rem_pio2+0x330>)
 80084a8:	2000      	movs	r0, #0
 80084aa:	f7f7 fe99 	bl	80001e0 <__aeabi_dsub>
 80084ae:	4606      	mov	r6, r0
 80084b0:	460f      	mov	r7, r1
 80084b2:	2d00      	cmp	r5, #0
 80084b4:	d043      	beq.n	800853e <__kernel_rem_pio2+0x26e>
 80084b6:	4650      	mov	r0, sl
 80084b8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80085f0 <__kernel_rem_pio2+0x320>
 80084bc:	f000 fba8 	bl	8008c10 <scalbn>
 80084c0:	4630      	mov	r0, r6
 80084c2:	4639      	mov	r1, r7
 80084c4:	ec53 2b10 	vmov	r2, r3, d0
 80084c8:	f7f7 fe8a 	bl	80001e0 <__aeabi_dsub>
 80084cc:	4606      	mov	r6, r0
 80084ce:	460f      	mov	r7, r1
 80084d0:	e035      	b.n	800853e <__kernel_rem_pio2+0x26e>
 80084d2:	4b4c      	ldr	r3, [pc, #304]	; (8008604 <__kernel_rem_pio2+0x334>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	4630      	mov	r0, r6
 80084d8:	4639      	mov	r1, r7
 80084da:	f7f8 f839 	bl	8000550 <__aeabi_dmul>
 80084de:	f7f8 fae7 	bl	8000ab0 <__aeabi_d2iz>
 80084e2:	f7f7 ffcb 	bl	800047c <__aeabi_i2d>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	ec43 2b18 	vmov	d8, r2, r3
 80084ee:	4b46      	ldr	r3, [pc, #280]	; (8008608 <__kernel_rem_pio2+0x338>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	f7f8 f82d 	bl	8000550 <__aeabi_dmul>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4630      	mov	r0, r6
 80084fc:	4639      	mov	r1, r7
 80084fe:	f7f7 fe6f 	bl	80001e0 <__aeabi_dsub>
 8008502:	f7f8 fad5 	bl	8000ab0 <__aeabi_d2iz>
 8008506:	e9d5 2300 	ldrd	r2, r3, [r5]
 800850a:	f84b 0b04 	str.w	r0, [fp], #4
 800850e:	ec51 0b18 	vmov	r0, r1, d8
 8008512:	f7f7 fe67 	bl	80001e4 <__adddf3>
 8008516:	f109 39ff 	add.w	r9, r9, #4294967295
 800851a:	4606      	mov	r6, r0
 800851c:	460f      	mov	r7, r1
 800851e:	e75b      	b.n	80083d8 <__kernel_rem_pio2+0x108>
 8008520:	d106      	bne.n	8008530 <__kernel_rem_pio2+0x260>
 8008522:	1e63      	subs	r3, r4, #1
 8008524:	aa0e      	add	r2, sp, #56	; 0x38
 8008526:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800852a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800852e:	e79d      	b.n	800846c <__kernel_rem_pio2+0x19c>
 8008530:	4b36      	ldr	r3, [pc, #216]	; (800860c <__kernel_rem_pio2+0x33c>)
 8008532:	2200      	movs	r2, #0
 8008534:	f7f8 fa92 	bl	8000a5c <__aeabi_dcmpge>
 8008538:	2800      	cmp	r0, #0
 800853a:	d13d      	bne.n	80085b8 <__kernel_rem_pio2+0x2e8>
 800853c:	4683      	mov	fp, r0
 800853e:	2200      	movs	r2, #0
 8008540:	2300      	movs	r3, #0
 8008542:	4630      	mov	r0, r6
 8008544:	4639      	mov	r1, r7
 8008546:	f7f8 fa6b 	bl	8000a20 <__aeabi_dcmpeq>
 800854a:	2800      	cmp	r0, #0
 800854c:	f000 80c0 	beq.w	80086d0 <__kernel_rem_pio2+0x400>
 8008550:	1e65      	subs	r5, r4, #1
 8008552:	462b      	mov	r3, r5
 8008554:	2200      	movs	r2, #0
 8008556:	9902      	ldr	r1, [sp, #8]
 8008558:	428b      	cmp	r3, r1
 800855a:	da6c      	bge.n	8008636 <__kernel_rem_pio2+0x366>
 800855c:	2a00      	cmp	r2, #0
 800855e:	f000 8089 	beq.w	8008674 <__kernel_rem_pio2+0x3a4>
 8008562:	ab0e      	add	r3, sp, #56	; 0x38
 8008564:	f1aa 0a18 	sub.w	sl, sl, #24
 8008568:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80ad 	beq.w	80086cc <__kernel_rem_pio2+0x3fc>
 8008572:	4650      	mov	r0, sl
 8008574:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80085f0 <__kernel_rem_pio2+0x320>
 8008578:	f000 fb4a 	bl	8008c10 <scalbn>
 800857c:	ab9a      	add	r3, sp, #616	; 0x268
 800857e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008582:	ec57 6b10 	vmov	r6, r7, d0
 8008586:	00ec      	lsls	r4, r5, #3
 8008588:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800858c:	46aa      	mov	sl, r5
 800858e:	f1ba 0f00 	cmp.w	sl, #0
 8008592:	f280 80d6 	bge.w	8008742 <__kernel_rem_pio2+0x472>
 8008596:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80085e8 <__kernel_rem_pio2+0x318>
 800859a:	462e      	mov	r6, r5
 800859c:	2e00      	cmp	r6, #0
 800859e:	f2c0 8104 	blt.w	80087aa <__kernel_rem_pio2+0x4da>
 80085a2:	ab72      	add	r3, sp, #456	; 0x1c8
 80085a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80085a8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008610 <__kernel_rem_pio2+0x340>
 80085ac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80085b0:	f04f 0800 	mov.w	r8, #0
 80085b4:	1baf      	subs	r7, r5, r6
 80085b6:	e0ea      	b.n	800878e <__kernel_rem_pio2+0x4be>
 80085b8:	f04f 0b02 	mov.w	fp, #2
 80085bc:	e759      	b.n	8008472 <__kernel_rem_pio2+0x1a2>
 80085be:	f8d8 3000 	ldr.w	r3, [r8]
 80085c2:	b955      	cbnz	r5, 80085da <__kernel_rem_pio2+0x30a>
 80085c4:	b123      	cbz	r3, 80085d0 <__kernel_rem_pio2+0x300>
 80085c6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80085ca:	f8c8 3000 	str.w	r3, [r8]
 80085ce:	2301      	movs	r3, #1
 80085d0:	3201      	adds	r2, #1
 80085d2:	f108 0804 	add.w	r8, r8, #4
 80085d6:	461d      	mov	r5, r3
 80085d8:	e752      	b.n	8008480 <__kernel_rem_pio2+0x1b0>
 80085da:	1acb      	subs	r3, r1, r3
 80085dc:	f8c8 3000 	str.w	r3, [r8]
 80085e0:	462b      	mov	r3, r5
 80085e2:	e7f5      	b.n	80085d0 <__kernel_rem_pio2+0x300>
 80085e4:	f3af 8000 	nop.w
	...
 80085f4:	3ff00000 	.word	0x3ff00000
 80085f8:	08008f28 	.word	0x08008f28
 80085fc:	40200000 	.word	0x40200000
 8008600:	3ff00000 	.word	0x3ff00000
 8008604:	3e700000 	.word	0x3e700000
 8008608:	41700000 	.word	0x41700000
 800860c:	3fe00000 	.word	0x3fe00000
 8008610:	08008ee8 	.word	0x08008ee8
 8008614:	1e62      	subs	r2, r4, #1
 8008616:	ab0e      	add	r3, sp, #56	; 0x38
 8008618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008620:	a90e      	add	r1, sp, #56	; 0x38
 8008622:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008626:	e739      	b.n	800849c <__kernel_rem_pio2+0x1cc>
 8008628:	1e62      	subs	r2, r4, #1
 800862a:	ab0e      	add	r3, sp, #56	; 0x38
 800862c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008630:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008634:	e7f4      	b.n	8008620 <__kernel_rem_pio2+0x350>
 8008636:	a90e      	add	r1, sp, #56	; 0x38
 8008638:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800863c:	3b01      	subs	r3, #1
 800863e:	430a      	orrs	r2, r1
 8008640:	e789      	b.n	8008556 <__kernel_rem_pio2+0x286>
 8008642:	3301      	adds	r3, #1
 8008644:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008648:	2900      	cmp	r1, #0
 800864a:	d0fa      	beq.n	8008642 <__kernel_rem_pio2+0x372>
 800864c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800864e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008652:	446a      	add	r2, sp
 8008654:	3a98      	subs	r2, #152	; 0x98
 8008656:	920a      	str	r2, [sp, #40]	; 0x28
 8008658:	9a08      	ldr	r2, [sp, #32]
 800865a:	18e3      	adds	r3, r4, r3
 800865c:	18a5      	adds	r5, r4, r2
 800865e:	aa22      	add	r2, sp, #136	; 0x88
 8008660:	f104 0801 	add.w	r8, r4, #1
 8008664:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008668:	9304      	str	r3, [sp, #16]
 800866a:	9b04      	ldr	r3, [sp, #16]
 800866c:	4543      	cmp	r3, r8
 800866e:	da04      	bge.n	800867a <__kernel_rem_pio2+0x3aa>
 8008670:	461c      	mov	r4, r3
 8008672:	e6a3      	b.n	80083bc <__kernel_rem_pio2+0xec>
 8008674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008676:	2301      	movs	r3, #1
 8008678:	e7e4      	b.n	8008644 <__kernel_rem_pio2+0x374>
 800867a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800867c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008680:	f7f7 fefc 	bl	800047c <__aeabi_i2d>
 8008684:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800868a:	46ab      	mov	fp, r5
 800868c:	461c      	mov	r4, r3
 800868e:	f04f 0900 	mov.w	r9, #0
 8008692:	2600      	movs	r6, #0
 8008694:	2700      	movs	r7, #0
 8008696:	9b06      	ldr	r3, [sp, #24]
 8008698:	4599      	cmp	r9, r3
 800869a:	dd06      	ble.n	80086aa <__kernel_rem_pio2+0x3da>
 800869c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869e:	e8e3 6702 	strd	r6, r7, [r3], #8
 80086a2:	f108 0801 	add.w	r8, r8, #1
 80086a6:	930a      	str	r3, [sp, #40]	; 0x28
 80086a8:	e7df      	b.n	800866a <__kernel_rem_pio2+0x39a>
 80086aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80086ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80086b2:	f7f7 ff4d 	bl	8000550 <__aeabi_dmul>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4630      	mov	r0, r6
 80086bc:	4639      	mov	r1, r7
 80086be:	f7f7 fd91 	bl	80001e4 <__adddf3>
 80086c2:	f109 0901 	add.w	r9, r9, #1
 80086c6:	4606      	mov	r6, r0
 80086c8:	460f      	mov	r7, r1
 80086ca:	e7e4      	b.n	8008696 <__kernel_rem_pio2+0x3c6>
 80086cc:	3d01      	subs	r5, #1
 80086ce:	e748      	b.n	8008562 <__kernel_rem_pio2+0x292>
 80086d0:	ec47 6b10 	vmov	d0, r6, r7
 80086d4:	f1ca 0000 	rsb	r0, sl, #0
 80086d8:	f000 fa9a 	bl	8008c10 <scalbn>
 80086dc:	ec57 6b10 	vmov	r6, r7, d0
 80086e0:	4ba0      	ldr	r3, [pc, #640]	; (8008964 <__kernel_rem_pio2+0x694>)
 80086e2:	ee10 0a10 	vmov	r0, s0
 80086e6:	2200      	movs	r2, #0
 80086e8:	4639      	mov	r1, r7
 80086ea:	f7f8 f9b7 	bl	8000a5c <__aeabi_dcmpge>
 80086ee:	b1f8      	cbz	r0, 8008730 <__kernel_rem_pio2+0x460>
 80086f0:	4b9d      	ldr	r3, [pc, #628]	; (8008968 <__kernel_rem_pio2+0x698>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	4630      	mov	r0, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f7 ff2a 	bl	8000550 <__aeabi_dmul>
 80086fc:	f7f8 f9d8 	bl	8000ab0 <__aeabi_d2iz>
 8008700:	4680      	mov	r8, r0
 8008702:	f7f7 febb 	bl	800047c <__aeabi_i2d>
 8008706:	4b97      	ldr	r3, [pc, #604]	; (8008964 <__kernel_rem_pio2+0x694>)
 8008708:	2200      	movs	r2, #0
 800870a:	f7f7 ff21 	bl	8000550 <__aeabi_dmul>
 800870e:	460b      	mov	r3, r1
 8008710:	4602      	mov	r2, r0
 8008712:	4639      	mov	r1, r7
 8008714:	4630      	mov	r0, r6
 8008716:	f7f7 fd63 	bl	80001e0 <__aeabi_dsub>
 800871a:	f7f8 f9c9 	bl	8000ab0 <__aeabi_d2iz>
 800871e:	1c65      	adds	r5, r4, #1
 8008720:	ab0e      	add	r3, sp, #56	; 0x38
 8008722:	f10a 0a18 	add.w	sl, sl, #24
 8008726:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800872a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800872e:	e720      	b.n	8008572 <__kernel_rem_pio2+0x2a2>
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f7f8 f9bc 	bl	8000ab0 <__aeabi_d2iz>
 8008738:	ab0e      	add	r3, sp, #56	; 0x38
 800873a:	4625      	mov	r5, r4
 800873c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008740:	e717      	b.n	8008572 <__kernel_rem_pio2+0x2a2>
 8008742:	ab0e      	add	r3, sp, #56	; 0x38
 8008744:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008748:	f7f7 fe98 	bl	800047c <__aeabi_i2d>
 800874c:	4632      	mov	r2, r6
 800874e:	463b      	mov	r3, r7
 8008750:	f7f7 fefe 	bl	8000550 <__aeabi_dmul>
 8008754:	4b84      	ldr	r3, [pc, #528]	; (8008968 <__kernel_rem_pio2+0x698>)
 8008756:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800875a:	2200      	movs	r2, #0
 800875c:	4630      	mov	r0, r6
 800875e:	4639      	mov	r1, r7
 8008760:	f7f7 fef6 	bl	8000550 <__aeabi_dmul>
 8008764:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008768:	4606      	mov	r6, r0
 800876a:	460f      	mov	r7, r1
 800876c:	e70f      	b.n	800858e <__kernel_rem_pio2+0x2be>
 800876e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008772:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008776:	f7f7 feeb 	bl	8000550 <__aeabi_dmul>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008782:	f7f7 fd2f 	bl	80001e4 <__adddf3>
 8008786:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800878a:	f108 0801 	add.w	r8, r8, #1
 800878e:	9b02      	ldr	r3, [sp, #8]
 8008790:	4598      	cmp	r8, r3
 8008792:	dc01      	bgt.n	8008798 <__kernel_rem_pio2+0x4c8>
 8008794:	45b8      	cmp	r8, r7
 8008796:	ddea      	ble.n	800876e <__kernel_rem_pio2+0x49e>
 8008798:	ed9d 7b06 	vldr	d7, [sp, #24]
 800879c:	ab4a      	add	r3, sp, #296	; 0x128
 800879e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80087a2:	ed87 7b00 	vstr	d7, [r7]
 80087a6:	3e01      	subs	r6, #1
 80087a8:	e6f8      	b.n	800859c <__kernel_rem_pio2+0x2cc>
 80087aa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	dc0b      	bgt.n	80087c8 <__kernel_rem_pio2+0x4f8>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc35      	bgt.n	8008820 <__kernel_rem_pio2+0x550>
 80087b4:	d059      	beq.n	800886a <__kernel_rem_pio2+0x59a>
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	f003 0007 	and.w	r0, r3, #7
 80087bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80087c0:	ecbd 8b02 	vpop	{d8}
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d1f3      	bne.n	80087b6 <__kernel_rem_pio2+0x4e6>
 80087ce:	ab4a      	add	r3, sp, #296	; 0x128
 80087d0:	4423      	add	r3, r4
 80087d2:	9306      	str	r3, [sp, #24]
 80087d4:	461c      	mov	r4, r3
 80087d6:	469a      	mov	sl, r3
 80087d8:	9502      	str	r5, [sp, #8]
 80087da:	9b02      	ldr	r3, [sp, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f1aa 0a08 	sub.w	sl, sl, #8
 80087e2:	dc6b      	bgt.n	80088bc <__kernel_rem_pio2+0x5ec>
 80087e4:	46aa      	mov	sl, r5
 80087e6:	f1ba 0f01 	cmp.w	sl, #1
 80087ea:	f1a4 0408 	sub.w	r4, r4, #8
 80087ee:	f300 8085 	bgt.w	80088fc <__kernel_rem_pio2+0x62c>
 80087f2:	9c06      	ldr	r4, [sp, #24]
 80087f4:	2000      	movs	r0, #0
 80087f6:	3408      	adds	r4, #8
 80087f8:	2100      	movs	r1, #0
 80087fa:	2d01      	cmp	r5, #1
 80087fc:	f300 809d 	bgt.w	800893a <__kernel_rem_pio2+0x66a>
 8008800:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008804:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008808:	f1bb 0f00 	cmp.w	fp, #0
 800880c:	f040 809b 	bne.w	8008946 <__kernel_rem_pio2+0x676>
 8008810:	9b01      	ldr	r3, [sp, #4]
 8008812:	e9c3 5600 	strd	r5, r6, [r3]
 8008816:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800881a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800881e:	e7ca      	b.n	80087b6 <__kernel_rem_pio2+0x4e6>
 8008820:	3408      	adds	r4, #8
 8008822:	ab4a      	add	r3, sp, #296	; 0x128
 8008824:	441c      	add	r4, r3
 8008826:	462e      	mov	r6, r5
 8008828:	2000      	movs	r0, #0
 800882a:	2100      	movs	r1, #0
 800882c:	2e00      	cmp	r6, #0
 800882e:	da36      	bge.n	800889e <__kernel_rem_pio2+0x5ce>
 8008830:	f1bb 0f00 	cmp.w	fp, #0
 8008834:	d039      	beq.n	80088aa <__kernel_rem_pio2+0x5da>
 8008836:	4602      	mov	r2, r0
 8008838:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800883c:	9c01      	ldr	r4, [sp, #4]
 800883e:	e9c4 2300 	strd	r2, r3, [r4]
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800884a:	f7f7 fcc9 	bl	80001e0 <__aeabi_dsub>
 800884e:	ae4c      	add	r6, sp, #304	; 0x130
 8008850:	2401      	movs	r4, #1
 8008852:	42a5      	cmp	r5, r4
 8008854:	da2c      	bge.n	80088b0 <__kernel_rem_pio2+0x5e0>
 8008856:	f1bb 0f00 	cmp.w	fp, #0
 800885a:	d002      	beq.n	8008862 <__kernel_rem_pio2+0x592>
 800885c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008860:	4619      	mov	r1, r3
 8008862:	9b01      	ldr	r3, [sp, #4]
 8008864:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008868:	e7a5      	b.n	80087b6 <__kernel_rem_pio2+0x4e6>
 800886a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800886e:	eb0d 0403 	add.w	r4, sp, r3
 8008872:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008876:	2000      	movs	r0, #0
 8008878:	2100      	movs	r1, #0
 800887a:	2d00      	cmp	r5, #0
 800887c:	da09      	bge.n	8008892 <__kernel_rem_pio2+0x5c2>
 800887e:	f1bb 0f00 	cmp.w	fp, #0
 8008882:	d002      	beq.n	800888a <__kernel_rem_pio2+0x5ba>
 8008884:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008888:	4619      	mov	r1, r3
 800888a:	9b01      	ldr	r3, [sp, #4]
 800888c:	e9c3 0100 	strd	r0, r1, [r3]
 8008890:	e791      	b.n	80087b6 <__kernel_rem_pio2+0x4e6>
 8008892:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008896:	f7f7 fca5 	bl	80001e4 <__adddf3>
 800889a:	3d01      	subs	r5, #1
 800889c:	e7ed      	b.n	800887a <__kernel_rem_pio2+0x5aa>
 800889e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80088a2:	f7f7 fc9f 	bl	80001e4 <__adddf3>
 80088a6:	3e01      	subs	r6, #1
 80088a8:	e7c0      	b.n	800882c <__kernel_rem_pio2+0x55c>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	e7c5      	b.n	800883c <__kernel_rem_pio2+0x56c>
 80088b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80088b4:	f7f7 fc96 	bl	80001e4 <__adddf3>
 80088b8:	3401      	adds	r4, #1
 80088ba:	e7ca      	b.n	8008852 <__kernel_rem_pio2+0x582>
 80088bc:	e9da 8900 	ldrd	r8, r9, [sl]
 80088c0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80088c4:	9b02      	ldr	r3, [sp, #8]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	9302      	str	r3, [sp, #8]
 80088ca:	4632      	mov	r2, r6
 80088cc:	463b      	mov	r3, r7
 80088ce:	4640      	mov	r0, r8
 80088d0:	4649      	mov	r1, r9
 80088d2:	f7f7 fc87 	bl	80001e4 <__adddf3>
 80088d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	4640      	mov	r0, r8
 80088e0:	4649      	mov	r1, r9
 80088e2:	f7f7 fc7d 	bl	80001e0 <__aeabi_dsub>
 80088e6:	4632      	mov	r2, r6
 80088e8:	463b      	mov	r3, r7
 80088ea:	f7f7 fc7b 	bl	80001e4 <__adddf3>
 80088ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 80088f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088f6:	ed8a 7b00 	vstr	d7, [sl]
 80088fa:	e76e      	b.n	80087da <__kernel_rem_pio2+0x50a>
 80088fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008900:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008904:	4640      	mov	r0, r8
 8008906:	4632      	mov	r2, r6
 8008908:	463b      	mov	r3, r7
 800890a:	4649      	mov	r1, r9
 800890c:	f7f7 fc6a 	bl	80001e4 <__adddf3>
 8008910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4640      	mov	r0, r8
 800891a:	4649      	mov	r1, r9
 800891c:	f7f7 fc60 	bl	80001e0 <__aeabi_dsub>
 8008920:	4632      	mov	r2, r6
 8008922:	463b      	mov	r3, r7
 8008924:	f7f7 fc5e 	bl	80001e4 <__adddf3>
 8008928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800892c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008930:	ed84 7b00 	vstr	d7, [r4]
 8008934:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008938:	e755      	b.n	80087e6 <__kernel_rem_pio2+0x516>
 800893a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800893e:	f7f7 fc51 	bl	80001e4 <__adddf3>
 8008942:	3d01      	subs	r5, #1
 8008944:	e759      	b.n	80087fa <__kernel_rem_pio2+0x52a>
 8008946:	9b01      	ldr	r3, [sp, #4]
 8008948:	9a01      	ldr	r2, [sp, #4]
 800894a:	601d      	str	r5, [r3, #0]
 800894c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008950:	605c      	str	r4, [r3, #4]
 8008952:	609f      	str	r7, [r3, #8]
 8008954:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008958:	60d3      	str	r3, [r2, #12]
 800895a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800895e:	6110      	str	r0, [r2, #16]
 8008960:	6153      	str	r3, [r2, #20]
 8008962:	e728      	b.n	80087b6 <__kernel_rem_pio2+0x4e6>
 8008964:	41700000 	.word	0x41700000
 8008968:	3e700000 	.word	0x3e700000
 800896c:	00000000 	.word	0x00000000

08008970 <__kernel_sin>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	ed2d 8b04 	vpush	{d8-d9}
 8008978:	eeb0 8a41 	vmov.f32	s16, s2
 800897c:	eef0 8a61 	vmov.f32	s17, s3
 8008980:	ec55 4b10 	vmov	r4, r5, d0
 8008984:	b083      	sub	sp, #12
 8008986:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800898a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800898e:	9001      	str	r0, [sp, #4]
 8008990:	da06      	bge.n	80089a0 <__kernel_sin+0x30>
 8008992:	ee10 0a10 	vmov	r0, s0
 8008996:	4629      	mov	r1, r5
 8008998:	f7f8 f88a 	bl	8000ab0 <__aeabi_d2iz>
 800899c:	2800      	cmp	r0, #0
 800899e:	d051      	beq.n	8008a44 <__kernel_sin+0xd4>
 80089a0:	4622      	mov	r2, r4
 80089a2:	462b      	mov	r3, r5
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	f7f7 fdd2 	bl	8000550 <__aeabi_dmul>
 80089ac:	4682      	mov	sl, r0
 80089ae:	468b      	mov	fp, r1
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4620      	mov	r0, r4
 80089b6:	4629      	mov	r1, r5
 80089b8:	f7f7 fdca 	bl	8000550 <__aeabi_dmul>
 80089bc:	a341      	add	r3, pc, #260	; (adr r3, 8008ac4 <__kernel_sin+0x154>)
 80089be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c2:	4680      	mov	r8, r0
 80089c4:	4689      	mov	r9, r1
 80089c6:	4650      	mov	r0, sl
 80089c8:	4659      	mov	r1, fp
 80089ca:	f7f7 fdc1 	bl	8000550 <__aeabi_dmul>
 80089ce:	a33f      	add	r3, pc, #252	; (adr r3, 8008acc <__kernel_sin+0x15c>)
 80089d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d4:	f7f7 fc04 	bl	80001e0 <__aeabi_dsub>
 80089d8:	4652      	mov	r2, sl
 80089da:	465b      	mov	r3, fp
 80089dc:	f7f7 fdb8 	bl	8000550 <__aeabi_dmul>
 80089e0:	a33c      	add	r3, pc, #240	; (adr r3, 8008ad4 <__kernel_sin+0x164>)
 80089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e6:	f7f7 fbfd 	bl	80001e4 <__adddf3>
 80089ea:	4652      	mov	r2, sl
 80089ec:	465b      	mov	r3, fp
 80089ee:	f7f7 fdaf 	bl	8000550 <__aeabi_dmul>
 80089f2:	a33a      	add	r3, pc, #232	; (adr r3, 8008adc <__kernel_sin+0x16c>)
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	f7f7 fbf2 	bl	80001e0 <__aeabi_dsub>
 80089fc:	4652      	mov	r2, sl
 80089fe:	465b      	mov	r3, fp
 8008a00:	f7f7 fda6 	bl	8000550 <__aeabi_dmul>
 8008a04:	a337      	add	r3, pc, #220	; (adr r3, 8008ae4 <__kernel_sin+0x174>)
 8008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0a:	f7f7 fbeb 	bl	80001e4 <__adddf3>
 8008a0e:	9b01      	ldr	r3, [sp, #4]
 8008a10:	4606      	mov	r6, r0
 8008a12:	460f      	mov	r7, r1
 8008a14:	b9eb      	cbnz	r3, 8008a52 <__kernel_sin+0xe2>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4650      	mov	r0, sl
 8008a1c:	4659      	mov	r1, fp
 8008a1e:	f7f7 fd97 	bl	8000550 <__aeabi_dmul>
 8008a22:	a325      	add	r3, pc, #148	; (adr r3, 8008ab8 <__kernel_sin+0x148>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fbda 	bl	80001e0 <__aeabi_dsub>
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	464b      	mov	r3, r9
 8008a30:	f7f7 fd8e 	bl	8000550 <__aeabi_dmul>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	f7f7 fbd2 	bl	80001e4 <__adddf3>
 8008a40:	4604      	mov	r4, r0
 8008a42:	460d      	mov	r5, r1
 8008a44:	ec45 4b10 	vmov	d0, r4, r5
 8008a48:	b003      	add	sp, #12
 8008a4a:	ecbd 8b04 	vpop	{d8-d9}
 8008a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a52:	4b1b      	ldr	r3, [pc, #108]	; (8008ac0 <__kernel_sin+0x150>)
 8008a54:	ec51 0b18 	vmov	r0, r1, d8
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f7f7 fd79 	bl	8000550 <__aeabi_dmul>
 8008a5e:	4632      	mov	r2, r6
 8008a60:	ec41 0b19 	vmov	d9, r0, r1
 8008a64:	463b      	mov	r3, r7
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	f7f7 fd71 	bl	8000550 <__aeabi_dmul>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	ec51 0b19 	vmov	r0, r1, d9
 8008a76:	f7f7 fbb3 	bl	80001e0 <__aeabi_dsub>
 8008a7a:	4652      	mov	r2, sl
 8008a7c:	465b      	mov	r3, fp
 8008a7e:	f7f7 fd67 	bl	8000550 <__aeabi_dmul>
 8008a82:	ec53 2b18 	vmov	r2, r3, d8
 8008a86:	f7f7 fbab 	bl	80001e0 <__aeabi_dsub>
 8008a8a:	a30b      	add	r3, pc, #44	; (adr r3, 8008ab8 <__kernel_sin+0x148>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	4606      	mov	r6, r0
 8008a92:	460f      	mov	r7, r1
 8008a94:	4640      	mov	r0, r8
 8008a96:	4649      	mov	r1, r9
 8008a98:	f7f7 fd5a 	bl	8000550 <__aeabi_dmul>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	f7f7 fb9e 	bl	80001e4 <__adddf3>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f7 fb96 	bl	80001e0 <__aeabi_dsub>
 8008ab4:	e7c4      	b.n	8008a40 <__kernel_sin+0xd0>
 8008ab6:	bf00      	nop
 8008ab8:	55555549 	.word	0x55555549
 8008abc:	3fc55555 	.word	0x3fc55555
 8008ac0:	3fe00000 	.word	0x3fe00000
 8008ac4:	5acfd57c 	.word	0x5acfd57c
 8008ac8:	3de5d93a 	.word	0x3de5d93a
 8008acc:	8a2b9ceb 	.word	0x8a2b9ceb
 8008ad0:	3e5ae5e6 	.word	0x3e5ae5e6
 8008ad4:	57b1fe7d 	.word	0x57b1fe7d
 8008ad8:	3ec71de3 	.word	0x3ec71de3
 8008adc:	19c161d5 	.word	0x19c161d5
 8008ae0:	3f2a01a0 	.word	0x3f2a01a0
 8008ae4:	1110f8a6 	.word	0x1110f8a6
 8008ae8:	3f811111 	.word	0x3f811111

08008aec <fabs>:
 8008aec:	ec51 0b10 	vmov	r0, r1, d0
 8008af0:	ee10 2a10 	vmov	r2, s0
 8008af4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008af8:	ec43 2b10 	vmov	d0, r2, r3
 8008afc:	4770      	bx	lr
	...

08008b00 <floor>:
 8008b00:	ec51 0b10 	vmov	r0, r1, d0
 8008b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008b0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008b10:	2e13      	cmp	r6, #19
 8008b12:	ee10 5a10 	vmov	r5, s0
 8008b16:	ee10 8a10 	vmov	r8, s0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	dc32      	bgt.n	8008b84 <floor+0x84>
 8008b1e:	2e00      	cmp	r6, #0
 8008b20:	da14      	bge.n	8008b4c <floor+0x4c>
 8008b22:	a333      	add	r3, pc, #204	; (adr r3, 8008bf0 <floor+0xf0>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f7f7 fb5c 	bl	80001e4 <__adddf3>
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f7f7 ff9e 	bl	8000a70 <__aeabi_dcmpgt>
 8008b34:	b138      	cbz	r0, 8008b46 <floor+0x46>
 8008b36:	2c00      	cmp	r4, #0
 8008b38:	da57      	bge.n	8008bea <floor+0xea>
 8008b3a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008b3e:	431d      	orrs	r5, r3
 8008b40:	d001      	beq.n	8008b46 <floor+0x46>
 8008b42:	4c2d      	ldr	r4, [pc, #180]	; (8008bf8 <floor+0xf8>)
 8008b44:	2500      	movs	r5, #0
 8008b46:	4621      	mov	r1, r4
 8008b48:	4628      	mov	r0, r5
 8008b4a:	e025      	b.n	8008b98 <floor+0x98>
 8008b4c:	4f2b      	ldr	r7, [pc, #172]	; (8008bfc <floor+0xfc>)
 8008b4e:	4137      	asrs	r7, r6
 8008b50:	ea01 0307 	and.w	r3, r1, r7
 8008b54:	4303      	orrs	r3, r0
 8008b56:	d01f      	beq.n	8008b98 <floor+0x98>
 8008b58:	a325      	add	r3, pc, #148	; (adr r3, 8008bf0 <floor+0xf0>)
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	f7f7 fb41 	bl	80001e4 <__adddf3>
 8008b62:	2200      	movs	r2, #0
 8008b64:	2300      	movs	r3, #0
 8008b66:	f7f7 ff83 	bl	8000a70 <__aeabi_dcmpgt>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d0eb      	beq.n	8008b46 <floor+0x46>
 8008b6e:	2c00      	cmp	r4, #0
 8008b70:	bfbe      	ittt	lt
 8008b72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008b76:	fa43 f606 	asrlt.w	r6, r3, r6
 8008b7a:	19a4      	addlt	r4, r4, r6
 8008b7c:	ea24 0407 	bic.w	r4, r4, r7
 8008b80:	2500      	movs	r5, #0
 8008b82:	e7e0      	b.n	8008b46 <floor+0x46>
 8008b84:	2e33      	cmp	r6, #51	; 0x33
 8008b86:	dd0b      	ble.n	8008ba0 <floor+0xa0>
 8008b88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008b8c:	d104      	bne.n	8008b98 <floor+0x98>
 8008b8e:	ee10 2a10 	vmov	r2, s0
 8008b92:	460b      	mov	r3, r1
 8008b94:	f7f7 fb26 	bl	80001e4 <__adddf3>
 8008b98:	ec41 0b10 	vmov	d0, r0, r1
 8008b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba8:	fa23 f707 	lsr.w	r7, r3, r7
 8008bac:	4207      	tst	r7, r0
 8008bae:	d0f3      	beq.n	8008b98 <floor+0x98>
 8008bb0:	a30f      	add	r3, pc, #60	; (adr r3, 8008bf0 <floor+0xf0>)
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fb15 	bl	80001e4 <__adddf3>
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f7f7 ff57 	bl	8000a70 <__aeabi_dcmpgt>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d0bf      	beq.n	8008b46 <floor+0x46>
 8008bc6:	2c00      	cmp	r4, #0
 8008bc8:	da02      	bge.n	8008bd0 <floor+0xd0>
 8008bca:	2e14      	cmp	r6, #20
 8008bcc:	d103      	bne.n	8008bd6 <floor+0xd6>
 8008bce:	3401      	adds	r4, #1
 8008bd0:	ea25 0507 	bic.w	r5, r5, r7
 8008bd4:	e7b7      	b.n	8008b46 <floor+0x46>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008bdc:	fa03 f606 	lsl.w	r6, r3, r6
 8008be0:	4435      	add	r5, r6
 8008be2:	4545      	cmp	r5, r8
 8008be4:	bf38      	it	cc
 8008be6:	18e4      	addcc	r4, r4, r3
 8008be8:	e7f2      	b.n	8008bd0 <floor+0xd0>
 8008bea:	2500      	movs	r5, #0
 8008bec:	462c      	mov	r4, r5
 8008bee:	e7aa      	b.n	8008b46 <floor+0x46>
 8008bf0:	8800759c 	.word	0x8800759c
 8008bf4:	7e37e43c 	.word	0x7e37e43c
 8008bf8:	bff00000 	.word	0xbff00000
 8008bfc:	000fffff 	.word	0x000fffff

08008c00 <nan>:
 8008c00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008c08 <nan+0x8>
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	00000000 	.word	0x00000000
 8008c0c:	7ff80000 	.word	0x7ff80000

08008c10 <scalbn>:
 8008c10:	b570      	push	{r4, r5, r6, lr}
 8008c12:	ec55 4b10 	vmov	r4, r5, d0
 8008c16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	462b      	mov	r3, r5
 8008c1e:	b99a      	cbnz	r2, 8008c48 <scalbn+0x38>
 8008c20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008c24:	4323      	orrs	r3, r4
 8008c26:	d036      	beq.n	8008c96 <scalbn+0x86>
 8008c28:	4b39      	ldr	r3, [pc, #228]	; (8008d10 <scalbn+0x100>)
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	ee10 0a10 	vmov	r0, s0
 8008c30:	2200      	movs	r2, #0
 8008c32:	f7f7 fc8d 	bl	8000550 <__aeabi_dmul>
 8008c36:	4b37      	ldr	r3, [pc, #220]	; (8008d14 <scalbn+0x104>)
 8008c38:	429e      	cmp	r6, r3
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	460d      	mov	r5, r1
 8008c3e:	da10      	bge.n	8008c62 <scalbn+0x52>
 8008c40:	a32b      	add	r3, pc, #172	; (adr r3, 8008cf0 <scalbn+0xe0>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	e03a      	b.n	8008cbe <scalbn+0xae>
 8008c48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008c4c:	428a      	cmp	r2, r1
 8008c4e:	d10c      	bne.n	8008c6a <scalbn+0x5a>
 8008c50:	ee10 2a10 	vmov	r2, s0
 8008c54:	4620      	mov	r0, r4
 8008c56:	4629      	mov	r1, r5
 8008c58:	f7f7 fac4 	bl	80001e4 <__adddf3>
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	460d      	mov	r5, r1
 8008c60:	e019      	b.n	8008c96 <scalbn+0x86>
 8008c62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008c66:	460b      	mov	r3, r1
 8008c68:	3a36      	subs	r2, #54	; 0x36
 8008c6a:	4432      	add	r2, r6
 8008c6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008c70:	428a      	cmp	r2, r1
 8008c72:	dd08      	ble.n	8008c86 <scalbn+0x76>
 8008c74:	2d00      	cmp	r5, #0
 8008c76:	a120      	add	r1, pc, #128	; (adr r1, 8008cf8 <scalbn+0xe8>)
 8008c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c7c:	da1c      	bge.n	8008cb8 <scalbn+0xa8>
 8008c7e:	a120      	add	r1, pc, #128	; (adr r1, 8008d00 <scalbn+0xf0>)
 8008c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c84:	e018      	b.n	8008cb8 <scalbn+0xa8>
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	dd08      	ble.n	8008c9c <scalbn+0x8c>
 8008c8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008c96:	ec45 4b10 	vmov	d0, r4, r5
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008ca0:	da19      	bge.n	8008cd6 <scalbn+0xc6>
 8008ca2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008ca6:	429e      	cmp	r6, r3
 8008ca8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008cac:	dd0a      	ble.n	8008cc4 <scalbn+0xb4>
 8008cae:	a112      	add	r1, pc, #72	; (adr r1, 8008cf8 <scalbn+0xe8>)
 8008cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1e2      	bne.n	8008c7e <scalbn+0x6e>
 8008cb8:	a30f      	add	r3, pc, #60	; (adr r3, 8008cf8 <scalbn+0xe8>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fc47 	bl	8000550 <__aeabi_dmul>
 8008cc2:	e7cb      	b.n	8008c5c <scalbn+0x4c>
 8008cc4:	a10a      	add	r1, pc, #40	; (adr r1, 8008cf0 <scalbn+0xe0>)
 8008cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0b8      	beq.n	8008c40 <scalbn+0x30>
 8008cce:	a10e      	add	r1, pc, #56	; (adr r1, 8008d08 <scalbn+0xf8>)
 8008cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cd4:	e7b4      	b.n	8008c40 <scalbn+0x30>
 8008cd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008cda:	3236      	adds	r2, #54	; 0x36
 8008cdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ce0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <scalbn+0x108>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	e7e8      	b.n	8008cbe <scalbn+0xae>
 8008cec:	f3af 8000 	nop.w
 8008cf0:	c2f8f359 	.word	0xc2f8f359
 8008cf4:	01a56e1f 	.word	0x01a56e1f
 8008cf8:	8800759c 	.word	0x8800759c
 8008cfc:	7e37e43c 	.word	0x7e37e43c
 8008d00:	8800759c 	.word	0x8800759c
 8008d04:	fe37e43c 	.word	0xfe37e43c
 8008d08:	c2f8f359 	.word	0xc2f8f359
 8008d0c:	81a56e1f 	.word	0x81a56e1f
 8008d10:	43500000 	.word	0x43500000
 8008d14:	ffff3cb0 	.word	0xffff3cb0
 8008d18:	3c900000 	.word	0x3c900000

08008d1c <_init>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr

08008d28 <_fini>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	bf00      	nop
 8008d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2e:	bc08      	pop	{r3}
 8008d30:	469e      	mov	lr, r3
 8008d32:	4770      	bx	lr
